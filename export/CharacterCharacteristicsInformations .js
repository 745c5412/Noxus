// Generated by Noxus types 
export class CharacterCharacteristicsInformations{
constructor(experience,experienceLevelFloor,experienceNextLevelFloor,kamas,statsPoints,additionnalPoints,spellsPoints,alignmentInfos,lifePoints,maxLifePoints,energyPoints,maxEnergyPoints,actionPointsCurrent,movementPointsCurrent,initiative,prospecting,actionPoints,movementPoints,strength,vitality,wisdom,chance,agility,intelligence,range,summonableCreaturesBoost,reflect,criticalHit,criticalHitWeapon,criticalMiss,healBonus,allDamagesBonus,weaponDamagesBonusPercent,damagesBonusPercent,trapBonus,trapBonusPercent,glyphBonusPercent,runeBonusPercent,permanentDamagePercent,tackleBlock,tackleEvade,PAAttack,PMAttack,pushDamageBonus,criticalDamageBonus,neutralDamageBonus,earthDamageBonus,waterDamageBonus,airDamageBonus,fireDamageBonus,dodgePALostProbability,dodgePMLostProbability,neutralElementResistPercent,earthElementResistPercent,waterElementResistPercent,airElementResistPercent,fireElementResistPercent,neutralElementReduction,earthElementReduction,waterElementReduction,airElementReduction,fireElementReduction,pushDamageReduction,criticalDamageReduction,pvpNeutralElementResistPercent,pvpEarthElementResistPercent,pvpWaterElementResistPercent,pvpAirElementResistPercent,pvpFireElementResistPercent,pvpNeutralElementReduction,pvpEarthElementReduction,pvpWaterElementReduction,pvpAirElementReduction,pvpFireElementReduction,spellModifications,probationTime) {
this.protocolId  = 8;
this.experience = experience;
this.experienceLevelFloor = experienceLevelFloor;
this.experienceNextLevelFloor = experienceNextLevelFloor;
this.kamas = kamas;
this.statsPoints = statsPoints;
this.additionnalPoints = additionnalPoints;
this.spellsPoints = spellsPoints;
this.alignmentInfos = alignmentInfos;
this.lifePoints = lifePoints;
this.maxLifePoints = maxLifePoints;
this.energyPoints = energyPoints;
this.maxEnergyPoints = maxEnergyPoints;
this.actionPointsCurrent = actionPointsCurrent;
this.movementPointsCurrent = movementPointsCurrent;
this.initiative = initiative;
this.prospecting = prospecting;
this.actionPoints = actionPoints;
this.movementPoints = movementPoints;
this.strength = strength;
this.vitality = vitality;
this.wisdom = wisdom;
this.chance = chance;
this.agility = agility;
this.intelligence = intelligence;
this.range = range;
this.summonableCreaturesBoost = summonableCreaturesBoost;
this.reflect = reflect;
this.criticalHit = criticalHit;
this.criticalHitWeapon = criticalHitWeapon;
this.criticalMiss = criticalMiss;
this.healBonus = healBonus;
this.allDamagesBonus = allDamagesBonus;
this.weaponDamagesBonusPercent = weaponDamagesBonusPercent;
this.damagesBonusPercent = damagesBonusPercent;
this.trapBonus = trapBonus;
this.trapBonusPercent = trapBonusPercent;
this.glyphBonusPercent = glyphBonusPercent;
this.runeBonusPercent = runeBonusPercent;
this.permanentDamagePercent = permanentDamagePercent;
this.tackleBlock = tackleBlock;
this.tackleEvade = tackleEvade;
this.PAAttack = PAAttack;
this.PMAttack = PMAttack;
this.pushDamageBonus = pushDamageBonus;
this.criticalDamageBonus = criticalDamageBonus;
this.neutralDamageBonus = neutralDamageBonus;
this.earthDamageBonus = earthDamageBonus;
this.waterDamageBonus = waterDamageBonus;
this.airDamageBonus = airDamageBonus;
this.fireDamageBonus = fireDamageBonus;
this.dodgePALostProbability = dodgePALostProbability;
this.dodgePMLostProbability = dodgePMLostProbability;
this.neutralElementResistPercent = neutralElementResistPercent;
this.earthElementResistPercent = earthElementResistPercent;
this.waterElementResistPercent = waterElementResistPercent;
this.airElementResistPercent = airElementResistPercent;
this.fireElementResistPercent = fireElementResistPercent;
this.neutralElementReduction = neutralElementReduction;
this.earthElementReduction = earthElementReduction;
this.waterElementReduction = waterElementReduction;
this.airElementReduction = airElementReduction;
this.fireElementReduction = fireElementReduction;
this.pushDamageReduction = pushDamageReduction;
this.criticalDamageReduction = criticalDamageReduction;
this.pvpNeutralElementResistPercent = pvpNeutralElementResistPercent;
this.pvpEarthElementResistPercent = pvpEarthElementResistPercent;
this.pvpWaterElementResistPercent = pvpWaterElementResistPercent;
this.pvpAirElementResistPercent = pvpAirElementResistPercent;
this.pvpFireElementResistPercent = pvpFireElementResistPercent;
this.pvpNeutralElementReduction = pvpNeutralElementReduction;
this.pvpEarthElementReduction = pvpEarthElementReduction;
this.pvpWaterElementReduction = pvpWaterElementReduction;
this.pvpAirElementReduction = pvpAirElementReduction;
this.pvpFireElementReduction = pvpFireElementReduction;
this.spellModifications = spellModifications;
this.probationTime = probationTime;
}
serialize(buffer){
         if(this.experience < 0 || this.experience > 9007199254740990)
         {
            Logger.error("Forbidden value (" + this.experience + ") on element experience.");
         }
         buffer.writeVarLong(this.experience);
         if(this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990)
         {
            Logger.error("Forbidden value (" + this.experienceLevelFloor + ") on element experienceLevelFloor.");
         }
         buffer.writeVarLong(this.experienceLevelFloor);
         if(this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990)
         {
            Logger.error("Forbidden value (" + this.experienceNextLevelFloor + ") on element experienceNextLevelFloor.");
         }
         buffer.writeVarLong(this.experienceNextLevelFloor);
         if(this.kamas < 0)
         {
            Logger.error("Forbidden value (" + this.kamas + ") on element kamas.");
         }
         buffer.writeInt(this.kamas);
         if(this.statsPoints < 0)
         {
            Logger.error("Forbidden value (" + this.statsPoints + ") on element statsPoints.");
         }
         buffer.writeVarShort(this.statsPoints);
         if(this.additionnalPoints < 0)
         {
            Logger.error("Forbidden value (" + this.additionnalPoints + ") on element additionnalPoints.");
         }
         buffer.writeVarShort(this.additionnalPoints);
         if(this.spellsPoints < 0)
         {
            Logger.error("Forbidden value (" + this.spellsPoints + ") on element spellsPoints.");
         }
         buffer.writeVarShort(this.spellsPoints);
         this.alignmentInfos.serialize(buffer);
         if(this.lifePoints < 0)
         {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
         }
         buffer.writeVarInt(this.lifePoints);
         if(this.maxLifePoints < 0)
         {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
         }
         buffer.writeVarInt(this.maxLifePoints);
         if(this.energyPoints < 0)
         {
            Logger.error("Forbidden value (" + this.energyPoints + ") on element energyPoints.");
         }
         buffer.writeVarShort(this.energyPoints);
         if(this.maxEnergyPoints < 0)
         {
            Logger.error("Forbidden value (" + this.maxEnergyPoints + ") on element maxEnergyPoints.");
         }
         buffer.writeVarShort(this.maxEnergyPoints);
         buffer.writeVarShort(this.actionPointsCurrent);
         buffer.writeVarShort(this.movementPointsCurrent);
         this.initiative.serialize(buffer);
         this.prospecting.serialize(buffer);
         this.actionPoints.serialize(buffer);
         this.movementPoints.serialize(buffer);
         this.strength.serialize(buffer);
         this.vitality.serialize(buffer);
         this.wisdom.serialize(buffer);
         this.chance.serialize(buffer);
         this.agility.serialize(buffer);
         this.intelligence.serialize(buffer);
         this.range.serialize(buffer);
         this.summonableCreaturesBoost.serialize(buffer);
         this.reflect.serialize(buffer);
         this.criticalHit.serialize(buffer);
         if(this.criticalHitWeapon < 0)
         {
            Logger.error("Forbidden value (" + this.criticalHitWeapon + ") on element criticalHitWeapon.");
         }
         buffer.writeVarShort(this.criticalHitWeapon);
         this.criticalMiss.serialize(buffer);
         this.healBonus.serialize(buffer);
         this.allDamagesBonus.serialize(buffer);
         this.weaponDamagesBonusPercent.serialize(buffer);
         this.damagesBonusPercent.serialize(buffer);
         this.trapBonus.serialize(buffer);
         this.trapBonusPercent.serialize(buffer);
         this.glyphBonusPercent.serialize(buffer);
         this.runeBonusPercent.serialize(buffer);
         this.permanentDamagePercent.serialize(buffer);
         this.tackleBlock.serialize(buffer);
         this.tackleEvade.serialize(buffer);
         this.PAAttack.serialize(buffer);
         this.PMAttack.serialize(buffer);
         this.pushDamageBonus.serialize(buffer);
         this.criticalDamageBonus.serialize(buffer);
         this.neutralDamageBonus.serialize(buffer);
         this.earthDamageBonus.serialize(buffer);
         this.waterDamageBonus.serialize(buffer);
         this.airDamageBonus.serialize(buffer);
         this.fireDamageBonus.serialize(buffer);
         this.dodgePALostProbability.serialize(buffer);
         this.dodgePMLostProbability.serialize(buffer);
         this.neutralElementResistPercent.serialize(buffer);
         this.earthElementResistPercent.serialize(buffer);
         this.waterElementResistPercent.serialize(buffer);
         this.airElementResistPercent.serialize(buffer);
         this.fireElementResistPercent.serialize(buffer);
         this.neutralElementReduction.serialize(buffer);
         this.earthElementReduction.serialize(buffer);
         this.waterElementReduction.serialize(buffer);
         this.airElementReduction.serialize(buffer);
         this.fireElementReduction.serialize(buffer);
         this.pushDamageReduction.serialize(buffer);
         this.criticalDamageReduction.serialize(buffer);
         this.pvpNeutralElementResistPercent.serialize(buffer);
         this.pvpEarthElementResistPercent.serialize(buffer);
         this.pvpWaterElementResistPercent.serialize(buffer);
         this.pvpAirElementResistPercent.serialize(buffer);
         this.pvpFireElementResistPercent.serialize(buffer);
         this.pvpNeutralElementReduction.serialize(buffer);
         this.pvpEarthElementReduction.serialize(buffer);
         this.pvpWaterElementReduction.serialize(buffer);
         this.pvpAirElementReduction.serialize(buffer);
         this.pvpFireElementReduction.serialize(buffer);
         buffer.writeShort(this.spellModifications.length);
         var _loc2_ =  0;
         while(_loc2_ < this.spellModifications.length)
         {
this.spellModifications[_loc2_].serialize(buffer);
            _loc2_++;
         }
         if(this.probationTime < 0)
         {
            Logger.error("Forbidden value (" + this.probationTime + ") on element probationTime.");
         }
         buffer.writeInt(this.probationTime);
}
deserialize(buffer){
         var _loc4_ =  null;
         this.experience = buffer.readVarUhLong();
         if(this.experience < 0 || this.experience > 9007199254740990)
         {
            Logger.error("Forbidden value (" + this.experience + ") on element of CharacterCharacteristicsInformations.experience.");
         }
         this.experienceLevelFloor = buffer.readVarUhLong();
         if(this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990)
         {
            Logger.error("Forbidden value (" + this.experienceLevelFloor + ") on element of CharacterCharacteristicsInformations.experienceLevelFloor.");
         }
         this.experienceNextLevelFloor = buffer.readVarUhLong();
         if(this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990)
         {
            Logger.error("Forbidden value (" + this.experienceNextLevelFloor + ") on element of CharacterCharacteristicsInformations.experienceNextLevelFloor.");
         }
         this.kamas = buffer.readInt();
         if(this.kamas < 0)
         {
            Logger.error("Forbidden value (" + this.kamas + ") on element of CharacterCharacteristicsInformations.kamas.");
         }
         this.statsPoints = buffer.readVarUhShort();
         if(this.statsPoints < 0)
         {
            Logger.error("Forbidden value (" + this.statsPoints + ") on element of CharacterCharacteristicsInformations.statsPoints.");
         }
         this.additionnalPoints = buffer.readVarUhShort();
         if(this.additionnalPoints < 0)
         {
            Logger.error("Forbidden value (" + this.additionnalPoints + ") on element of CharacterCharacteristicsInformations.additionnalPoints.");
         }
         this.spellsPoints = buffer.readVarUhShort();
         if(this.spellsPoints < 0)
         {
            Logger.error("Forbidden value (" + this.spellsPoints + ") on element of CharacterCharacteristicsInformations.spellsPoints.");
         }
         this.alignmentInfos = new ActorExtendedAlignmentInformations();
         this.alignmentInfos.deserialize(buffer);
         this.lifePoints = buffer.readVarUhInt();
         if(this.lifePoints < 0)
         {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element of CharacterCharacteristicsInformations.lifePoints.");
         }
         this.maxLifePoints = buffer.readVarUhInt();
         if(this.maxLifePoints < 0)
         {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element of CharacterCharacteristicsInformations.maxLifePoints.");
         }
         this.energyPoints = buffer.readVarUhShort();
         if(this.energyPoints < 0)
         {
            Logger.error("Forbidden value (" + this.energyPoints + ") on element of CharacterCharacteristicsInformations.energyPoints.");
         }
         this.maxEnergyPoints = buffer.readVarUhShort();
         if(this.maxEnergyPoints < 0)
         {
            Logger.error("Forbidden value (" + this.maxEnergyPoints + ") on element of CharacterCharacteristicsInformations.maxEnergyPoints.");
         }
         this.actionPointsCurrent = buffer.readVarShort();
         this.movementPointsCurrent = buffer.readVarShort();
         this.initiative  =  new CharacterBaseCharacteristic();
         this.initiative.deserialize(buffer);
         this.prospecting  =  new CharacterBaseCharacteristic();
         this.prospecting.deserialize(buffer);
         this.actionPoints  =  new CharacterBaseCharacteristic();
         this.actionPoints.deserialize(buffer);
         this.movementPoints  =  new CharacterBaseCharacteristic();
         this.movementPoints.deserialize(buffer);
         this.strength  =  new CharacterBaseCharacteristic();
         this.strength.deserialize(buffer);
         this.vitality  =  new CharacterBaseCharacteristic();
         this.vitality.deserialize(buffer);
         this.wisdom  =  new CharacterBaseCharacteristic();
         this.wisdom.deserialize(buffer);
         this.chance  =  new CharacterBaseCharacteristic();
         this.chance.deserialize(buffer);
         this.agility  =  new CharacterBaseCharacteristic();
         this.agility.deserialize(buffer);
         this.intelligence  =  new CharacterBaseCharacteristic();
         this.intelligence.deserialize(buffer);
         this.range  =  new CharacterBaseCharacteristic();
         this.range.deserialize(buffer);
         this.summonableCreaturesBoost  =  new CharacterBaseCharacteristic();
         this.summonableCreaturesBoost.deserialize(buffer);
         this.reflect  =  new CharacterBaseCharacteristic();
         this.reflect.deserialize(buffer);
         this.criticalHit  =  new CharacterBaseCharacteristic();
         this.criticalHit.deserialize(buffer);
         this.criticalHitWeapon = buffer.readVarUhShort();
         if(this.criticalHitWeapon < 0)
         {
            Logger.error("Forbidden value (" + this.criticalHitWeapon + ") on element of CharacterCharacteristicsInformations.criticalHitWeapon.");
         }
         this.criticalMiss  =  new CharacterBaseCharacteristic();
         this.criticalMiss.deserialize(buffer);
         this.healBonus  =  new CharacterBaseCharacteristic();
         this.healBonus.deserialize(buffer);
         this.allDamagesBonus  =  new CharacterBaseCharacteristic();
         this.allDamagesBonus.deserialize(buffer);
         this.weaponDamagesBonusPercent  =  new CharacterBaseCharacteristic();
         this.weaponDamagesBonusPercent.deserialize(buffer);
         this.damagesBonusPercent  =  new CharacterBaseCharacteristic();
         this.damagesBonusPercent.deserialize(buffer);
         this.trapBonus  =  new CharacterBaseCharacteristic();
         this.trapBonus.deserialize(buffer);
         this.trapBonusPercent  =  new CharacterBaseCharacteristic();
         this.trapBonusPercent.deserialize(buffer);
         this.glyphBonusPercent  =  new CharacterBaseCharacteristic();
         this.glyphBonusPercent.deserialize(buffer);
         this.runeBonusPercent  =  new CharacterBaseCharacteristic();
         this.runeBonusPercent.deserialize(buffer);
         this.permanentDamagePercent  =  new CharacterBaseCharacteristic();
         this.permanentDamagePercent.deserialize(buffer);
         this.tackleBlock  =  new CharacterBaseCharacteristic();
         this.tackleBlock.deserialize(buffer);
         this.tackleEvade  =  new CharacterBaseCharacteristic();
         this.tackleEvade.deserialize(buffer);
         this.PAAttack  =  new CharacterBaseCharacteristic();
         this.PAAttack.deserialize(buffer);
         this.PMAttack  =  new CharacterBaseCharacteristic();
         this.PMAttack.deserialize(buffer);
         this.pushDamageBonus  =  new CharacterBaseCharacteristic();
         this.pushDamageBonus.deserialize(buffer);
         this.criticalDamageBonus  =  new CharacterBaseCharacteristic();
         this.criticalDamageBonus.deserialize(buffer);
         this.neutralDamageBonus  =  new CharacterBaseCharacteristic();
         this.neutralDamageBonus.deserialize(buffer);
         this.earthDamageBonus  =  new CharacterBaseCharacteristic();
         this.earthDamageBonus.deserialize(buffer);
         this.waterDamageBonus  =  new CharacterBaseCharacteristic();
         this.waterDamageBonus.deserialize(buffer);
         this.airDamageBonus  =  new CharacterBaseCharacteristic();
         this.airDamageBonus.deserialize(buffer);
         this.fireDamageBonus  =  new CharacterBaseCharacteristic();
         this.fireDamageBonus.deserialize(buffer);
         this.dodgePALostProbability  =  new CharacterBaseCharacteristic();
         this.dodgePALostProbability.deserialize(buffer);
         this.dodgePMLostProbability  =  new CharacterBaseCharacteristic();
         this.dodgePMLostProbability.deserialize(buffer);
         this.neutralElementResistPercent  =  new CharacterBaseCharacteristic();
         this.neutralElementResistPercent.deserialize(buffer);
         this.earthElementResistPercent  =  new CharacterBaseCharacteristic();
         this.earthElementResistPercent.deserialize(buffer);
         this.waterElementResistPercent  =  new CharacterBaseCharacteristic();
         this.waterElementResistPercent.deserialize(buffer);
         this.airElementResistPercent  =  new CharacterBaseCharacteristic();
         this.airElementResistPercent.deserialize(buffer);
         this.fireElementResistPercent  =  new CharacterBaseCharacteristic();
         this.fireElementResistPercent.deserialize(buffer);
         this.neutralElementReduction  =  new CharacterBaseCharacteristic();
         this.neutralElementReduction.deserialize(buffer);
         this.earthElementReduction  =  new CharacterBaseCharacteristic();
         this.earthElementReduction.deserialize(buffer);
         this.waterElementReduction  =  new CharacterBaseCharacteristic();
         this.waterElementReduction.deserialize(buffer);
         this.airElementReduction  =  new CharacterBaseCharacteristic();
         this.airElementReduction.deserialize(buffer);
         this.fireElementReduction  =  new CharacterBaseCharacteristic();
         this.fireElementReduction.deserialize(buffer);
         this.pushDamageReduction  =  new CharacterBaseCharacteristic();
         this.pushDamageReduction.deserialize(buffer);
         this.criticalDamageReduction  =  new CharacterBaseCharacteristic();
         this.criticalDamageReduction.deserialize(buffer);
         this.pvpNeutralElementResistPercent  =  new CharacterBaseCharacteristic();
         this.pvpNeutralElementResistPercent.deserialize(buffer);
         this.pvpEarthElementResistPercent  =  new CharacterBaseCharacteristic();
         this.pvpEarthElementResistPercent.deserialize(buffer);
         this.pvpWaterElementResistPercent  =  new CharacterBaseCharacteristic();
         this.pvpWaterElementResistPercent.deserialize(buffer);
         this.pvpAirElementResistPercent  =  new CharacterBaseCharacteristic();
         this.pvpAirElementResistPercent.deserialize(buffer);
         this.pvpFireElementResistPercent  =  new CharacterBaseCharacteristic();
         this.pvpFireElementResistPercent.deserialize(buffer);
         this.pvpNeutralElementReduction  =  new CharacterBaseCharacteristic();
         this.pvpNeutralElementReduction.deserialize(buffer);
         this.pvpEarthElementReduction  =  new CharacterBaseCharacteristic();
         this.pvpEarthElementReduction.deserialize(buffer);
         this.pvpWaterElementReduction  =  new CharacterBaseCharacteristic();
         this.pvpWaterElementReduction.deserialize(buffer);
         this.pvpAirElementReduction  =  new CharacterBaseCharacteristic();
         this.pvpAirElementReduction.deserialize(buffer);
         this.pvpFireElementReduction  =  new CharacterBaseCharacteristic();
         this.pvpFireElementReduction.deserialize(buffer);
         var _loc2_ =  buffer.readUnsignedShort();
         var _loc3_ =  0;
         while(_loc3_ < _loc2_)
         {
            _loc4_  =  new CharacterSpellModification();
            _loc4_.deserialize(buffer);
            this.spellModifications.push(_loc4_);
            _loc3_++;
         }
         this.probationTime = buffer.readInt();
         if(this.probationTime < 0)
         {
            Logger.error("Forbidden value (" + this.probationTime + ") on element of CharacterCharacteristicsInformations.probationTime.");
         }
}
}
