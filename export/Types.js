// Generated by Noxus types 
export class StatisticData {
    constructor() {
        this.protocolId = 484;
    }
    serialize(buffer) {
    }
    deserialize(buffer) {
    }
}

// Generated by Noxus types 
export class StatisticDataBoolean extends StatisticData {
    constructor(value) {
        super();
        this.value = value;
        this.protocolId = 482;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeBoolean(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class StatisticDataByte extends StatisticData {
    constructor(value) {
        super();
        this.value = value;
        this.protocolId = 486;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readByte();
    }
}

// Generated by Noxus types 
export class StatisticDataInt extends StatisticData {
    constructor(value) {
        super();
        this.value = value;
        this.protocolId = 485;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeInt(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readInt();
    }
}

// Generated by Noxus types 
export class StatisticDataShort extends StatisticData {
    constructor(value) {
        super();
        this.value = value;
        this.protocolId = 488;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readShort();
    }
}

// Generated by Noxus types 
export class StatisticDataString extends StatisticData {
    constructor(value) {
        super();
        this.value = value;
        this.protocolId = 487;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class GameServerInformations {
    constructor(id, type, status, completion, isSelectable, charactersCount, charactersSlots, date) {
        this.id = id;
        this.type = type;
        this.status = status;
        this.completion = completion;
        this.isSelectable = isSelectable;
        this.charactersCount = charactersCount;
        this.charactersSlots = charactersSlots;
        this.date = date;
        this.protocolId = 25;
    }
    serialize(buffer) {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeVarShort(this.id);
        buffer.writeByte(this.type);
        buffer.writeByte(this.status);
        buffer.writeByte(this.completion);
        buffer.writeBoolean(this.isSelectable);
        if (this.charactersCount < 0) {
            Logger.error("Forbidden value (" + this.charactersCount + ") on element charactersCount.");
        }
        buffer.writeByte(this.charactersCount);
        if (this.charactersSlots < 0) {
            Logger.error("Forbidden value (" + this.charactersSlots + ") on element charactersSlots.");
        }
        buffer.writeByte(this.charactersSlots);
        if (this.date < -9007199254740990 || this.date > 9007199254740990) {
            Logger.error("Forbidden value (" + this.date + ") on element date.");
        }
        buffer.writeDouble(this.date);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of GameServerInformations.id.");
        }
        this.type = buffer.readByte();
        this.status = buffer.readByte();
        if (this.status < 0) {
            Logger.error("Forbidden value (" + this.status + ") on element of GameServerInformations.status.");
        }
        this.completion = buffer.readByte();
        if (this.completion < 0) {
            Logger.error("Forbidden value (" + this.completion + ") on element of GameServerInformations.completion.");
        }
        this.isSelectable = buffer.readBoolean();
        this.charactersCount = buffer.readByte();
        if (this.charactersCount < 0) {
            Logger.error("Forbidden value (" + this.charactersCount + ") on element of GameServerInformations.charactersCount.");
        }
        this.charactersSlots = buffer.readByte();
        if (this.charactersSlots < 0) {
            Logger.error("Forbidden value (" + this.charactersSlots + ") on element of GameServerInformations.charactersSlots.");
        }
        this.date = buffer.readDouble();
        if (this.date < -9007199254740990 || this.date > 9007199254740990) {
            Logger.error("Forbidden value (" + this.date + ") on element of GameServerInformations.date.");
        }
    }
}

// Generated by Noxus types 
export class Achievement {
    constructor(id, finishedObjective, startedObjectives) {
        this.id = id;
        this.finishedObjective = finishedObjective;
        this.startedObjectives = startedObjectives;
        this.protocolId = 363;
    }
    serialize(buffer) {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeVarShort(this.id);
        buffer.writeShort(this.finishedObjective.length);
        var _loc2_ = 0;
        while (_loc2_ < this.finishedObjective.length) {
            this.finishedObjective[_loc2_].serialize(buffer);
            _loc2_++;
        }
        buffer.writeShort(this.startedObjectives.length);
        var _loc3_ = 0;
        while (_loc3_ < this.startedObjectives.length) {
            this.startedObjectives[_loc3_].serialize(buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of Achievement.id.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new Types.AchievementObjective();
            _loc6_.deserialize(buffer);
            this.finishedObjective.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new Types.AchievementStartedObjective();
            _loc7_.deserialize(buffer);
            this.startedObjectives.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus types 
export class AchievementObjective {
    constructor(id, maxValue) {
        this.id = id;
        this.maxValue = maxValue;
        this.protocolId = 404;
    }
    serialize(buffer) {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeVarInt(this.id);
        if (this.maxValue < 0) {
            Logger.error("Forbidden value (" + this.maxValue + ") on element maxValue.");
        }
        buffer.writeVarShort(this.maxValue);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhInt();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of AchievementObjective.id.");
        }
        this.maxValue = buffer.readVarUhShort();
        if (this.maxValue < 0) {
            Logger.error("Forbidden value (" + this.maxValue + ") on element of AchievementObjective.maxValue.");
        }
    }
}

// Generated by Noxus types 
export class AchievementRewardable {
    constructor(id, finishedlevel) {
        this.id = id;
        this.finishedlevel = finishedlevel;
        this.protocolId = 412;
    }
    serialize(buffer) {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeVarShort(this.id);
        if (this.finishedlevel < 0 || this.finishedlevel > 206) {
            Logger.error("Forbidden value (" + this.finishedlevel + ") on element finishedlevel.");
        }
        buffer.writeByte(this.finishedlevel);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of AchievementRewardable.id.");
        }
        this.finishedlevel = buffer.readUnsignedByte();
        if (this.finishedlevel < 0 || this.finishedlevel > 206) {
            Logger.error("Forbidden value (" + this.finishedlevel + ") on element of AchievementRewardable.finishedlevel.");
        }
    }
}

// Generated by Noxus types 
export class AchievementStartedObjective extends AchievementObjective {
    constructor(param1, param2, value) {
        super(param1, param2);
        this.value = value;
        this.protocolId = 402;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.value < 0) {
            Logger.error("Forbidden value (" + this.value + ") on element value.");
        }
        buffer.writeVarShort(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readVarUhShort();
        if (this.value < 0) {
            Logger.error("Forbidden value (" + this.value + ") on element of AchievementStartedObjective.value.");
        }
    }
}

// Generated by Noxus types 
export class FightDispellableEffectExtendedInformations {
    constructor(actionId, sourceId, effect) {
        this.actionId = actionId;
        this.sourceId = sourceId;
        this.effect = effect;
        this.protocolId = 208;
    }
    serialize(buffer) {
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        buffer.writeVarShort(this.actionId);
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        buffer.writeDouble(this.sourceId);
        buffer.writeShort(this.effect.protocolId);
        this.effect.serialize(buffer);
    }
    deserialize(buffer) {
        this.actionId = buffer.readVarUhShort();
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element of FightDispellableEffectExtendedInformations.actionId.");
        }
        this.sourceId = buffer.readDouble();
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element of FightDispellableEffectExtendedInformations.sourceId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.effect = ProtocolTypeManager.getInstance(AbstractFightDispellableEffect, _loc2_);
        this.effect.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class AbstractFightDispellableEffect {
    constructor(uid, targetId, turnDuration, dispelable, spellId, effectId, parentBoostUid) {
        this.uid = uid;
        this.targetId = targetId;
        this.turnDuration = turnDuration;
        this.dispelable = dispelable;
        this.spellId = spellId;
        this.effectId = effectId;
        this.parentBoostUid = parentBoostUid;
        this.protocolId = 206;
    }
    serialize(buffer) {
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element uid.");
        }
        buffer.writeVarInt(this.uid);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        buffer.writeDouble(this.targetId);
        buffer.writeShort(this.turnDuration);
        buffer.writeByte(this.dispelable);
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        buffer.writeVarShort(this.spellId);
        if (this.effectId < 0) {
            Logger.error("Forbidden value (" + this.effectId + ") on element effectId.");
        }
        buffer.writeVarInt(this.effectId);
        if (this.parentBoostUid < 0) {
            Logger.error("Forbidden value (" + this.parentBoostUid + ") on element parentBoostUid.");
        }
        buffer.writeVarInt(this.parentBoostUid);
    }
    deserialize(buffer) {
        this.uid = buffer.readVarUhInt();
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element of AbstractFightDispellableEffect.uid.");
        }
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of AbstractFightDispellableEffect.targetId.");
        }
        this.turnDuration = buffer.readShort();
        this.dispelable = buffer.readByte();
        if (this.dispelable < 0) {
            Logger.error("Forbidden value (" + this.dispelable + ") on element of AbstractFightDispellableEffect.dispelable.");
        }
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of AbstractFightDispellableEffect.spellId.");
        }
        this.effectId = buffer.readVarUhInt();
        if (this.effectId < 0) {
            Logger.error("Forbidden value (" + this.effectId + ") on element of AbstractFightDispellableEffect.effectId.");
        }
        this.parentBoostUid = buffer.readVarUhInt();
        if (this.parentBoostUid < 0) {
            Logger.error("Forbidden value (" + this.parentBoostUid + ") on element of AbstractFightDispellableEffect.parentBoostUid.");
        }
    }
}

// Generated by Noxus types 
export class FightTemporaryBoostEffect extends AbstractFightDispellableEffect {
    constructor(param1, param2, param3, param4, param5, param6, param7, delta) {
        super(param1, param2, param3, param4, param5, param6, param7);
        this.delta = delta;
        this.protocolId = 209;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.delta);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.delta = buffer.readShort();
    }
}

// Generated by Noxus types 
export class FightTemporaryBoostStateEffect extends FightTemporaryBoostEffect {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, stateId) {
        super(param1, param2, param3, param4, param5, param6, param7, param8);
        this.stateId = stateId;
        this.protocolId = 214;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.stateId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.stateId = buffer.readShort();
    }
}

// Generated by Noxus types 
export class FightTemporaryBoostWeaponDamagesEffect extends FightTemporaryBoostEffect {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, weaponTypeId) {
        super(param1, param2, param3, param4, param5, param6, param7, param8);
        this.weaponTypeId = weaponTypeId;
        this.protocolId = 211;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.weaponTypeId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.weaponTypeId = buffer.readShort();
    }
}

// Generated by Noxus types 
export class FightTemporarySpellBoostEffect extends FightTemporaryBoostEffect {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, boostedSpellId) {
        super(param1, param2, param3, param4, param5, param6, param7, param8);
        this.boostedSpellId = boostedSpellId;
        this.protocolId = 207;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.boostedSpellId < 0) {
            Logger.error("Forbidden value (" + this.boostedSpellId + ") on element boostedSpellId.");
        }
        buffer.writeVarShort(this.boostedSpellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.boostedSpellId = buffer.readVarUhShort();
        if (this.boostedSpellId < 0) {
            Logger.error("Forbidden value (" + this.boostedSpellId + ") on element of FightTemporarySpellBoostEffect.boostedSpellId.");
        }
    }
}

// Generated by Noxus types 
export class FightTemporarySpellImmunityEffect extends AbstractFightDispellableEffect {
    constructor(param1, param2, param3, param4, param5, param6, param7, immuneSpellId) {
        super(param1, param2, param3, param4, param5, param6, param7);
        this.immuneSpellId = immuneSpellId;
        this.protocolId = 366;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeInt(this.immuneSpellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.immuneSpellId = buffer.readInt();
    }
}

// Generated by Noxus types 
export class FightTriggeredEffect extends AbstractFightDispellableEffect {
    constructor(param1, param2, param3, param4, param5, param6, param7, param1, param2, param3, delay) {
        super(param1, param2, param3, param4, param5, param6, param7, param1, param2, param3);
        this.delay = delay;
        this.protocolId = 210;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeInt(this.buffer);
        buffer.writeInt(this.param2);
        buffer.writeInt(this.param3);
        buffer.writeShort(this.delay);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.buffer = buffer.readInt();
        this.param2 = buffer.readInt();
        this.param3 = buffer.readInt();
        this.delay = buffer.readShort();
    }
}

// Generated by Noxus types 
export class GameActionMark {
    constructor(markAuthorId, markTeamId, markSpellId, markSpellLevel, markId, markType, markimpactCell, cells, active) {
        this.markAuthorId = markAuthorId;
        this.markTeamId = markTeamId;
        this.markSpellId = markSpellId;
        this.markSpellLevel = markSpellLevel;
        this.markId = markId;
        this.markType = markType;
        this.markimpactCell = markimpactCell;
        this.cells = cells;
        this.active = active;
        this.protocolId = 351;
    }
    serialize(buffer) {
        if (this.markAuthorId < -9007199254740990 || this.markAuthorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.markAuthorId + ") on element markAuthorId.");
        }
        buffer.writeDouble(this.markAuthorId);
        buffer.writeByte(this.markTeamId);
        if (this.markSpellId < 0) {
            Logger.error("Forbidden value (" + this.markSpellId + ") on element markSpellId.");
        }
        buffer.writeInt(this.markSpellId);
        if (this.markSpellLevel < 1 || this.markSpellLevel > 200) {
            Logger.error("Forbidden value (" + this.markSpellLevel + ") on element markSpellLevel.");
        }
        buffer.writeShort(this.markSpellLevel);
        buffer.writeShort(this.markId);
        buffer.writeByte(this.markType);
        if (this.markimpactCell < -1 || this.markimpactCell > 559) {
            Logger.error("Forbidden value (" + this.markimpactCell + ") on element markimpactCell.");
        }
        buffer.writeShort(this.markimpactCell);
        buffer.writeShort(this.cells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cells.length) {
            this.cells[_loc2_].serialize(buffer);
            _loc2_++;
        }
        buffer.writeBoolean(this.active);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.markAuthorId = buffer.readDouble();
        if (this.markAuthorId < -9007199254740990 || this.markAuthorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.markAuthorId + ") on element of GameActionMark.markAuthorId.");
        }
        this.markTeamId = buffer.readByte();
        if (this.markTeamId < 0) {
            Logger.error("Forbidden value (" + this.markTeamId + ") on element of GameActionMark.markTeamId.");
        }
        this.markSpellId = buffer.readInt();
        if (this.markSpellId < 0) {
            Logger.error("Forbidden value (" + this.markSpellId + ") on element of GameActionMark.markSpellId.");
        }
        this.markSpellLevel = buffer.readShort();
        if (this.markSpellLevel < 1 || this.markSpellLevel > 200) {
            Logger.error("Forbidden value (" + this.markSpellLevel + ") on element of GameActionMark.markSpellLevel.");
        }
        this.markId = buffer.readShort();
        this.markType = buffer.readByte();
        this.markimpactCell = buffer.readShort();
        if (this.markimpactCell < -1 || this.markimpactCell > 559) {
            Logger.error("Forbidden value (" + this.markimpactCell + ") on element of GameActionMark.markimpactCell.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new Types.GameActionMarkedCell();
            _loc4_.deserialize(buffer);
            this.cells.push(_loc4_);
            _loc3_++;
        }
        this.active = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class GameActionMarkedCell {
    constructor(cellId, zoneSize, cellColor, cellsType) {
        this.cellId = cellId;
        this.zoneSize = zoneSize;
        this.cellColor = cellColor;
        this.cellsType = cellsType;
        this.protocolId = 85;
    }
    serialize(buffer) {
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        buffer.writeVarShort(this.cellId);
        buffer.writeByte(this.zoneSize);
        buffer.writeInt(this.cellColor);
        buffer.writeByte(this.cellsType);
    }
    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of GameActionMarkedCell.cellId.");
        }
        this.zoneSize = buffer.readByte();
        this.cellColor = buffer.readInt();
        this.cellsType = buffer.readByte();
    }
}

// Generated by Noxus types 
export class ServerSessionConstant {
    constructor(id) {
        this.id = id;
        this.protocolId = 430;
    }
    serialize(buffer) {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeVarShort(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of ServerSessionConstant.id.");
        }
    }
}

// Generated by Noxus types 
export class ServerSessionConstantInteger extends ServerSessionConstant {
    constructor(param1, value) {
        super(param1);
        this.value = value;
        this.protocolId = 433;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeInt(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readInt();
    }
}

// Generated by Noxus types 
export class ServerSessionConstantLong extends ServerSessionConstant {
    constructor(param1, value) {
        super(param1);
        this.value = value;
        this.protocolId = 429;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.value < -9007199254740990 || this.value > 9007199254740990) {
            Logger.error("Forbidden value (" + this.value + ") on element value.");
        }
        buffer.writeDouble(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readDouble();
        if (this.value < -9007199254740990 || this.value > 9007199254740990) {
            Logger.error("Forbidden value (" + this.value + ") on element of ServerSessionConstantLong.value.");
        }
    }
}

// Generated by Noxus types 
export class ServerSessionConstantString extends ServerSessionConstant {
    constructor(param1, value) {
        super(param1);
        this.value = value;
        this.protocolId = 436;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class AbstractCharacterInformation {
    constructor(id) {
        this.id = id;
        this.protocolId = 400;
    }
    serialize(buffer) {
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeVarLong(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of AbstractCharacterInformation.id.");
        }
    }
}

// Generated by Noxus types 
export class CharacterBasicMinimalInformations extends AbstractCharacterInformation {
    constructor(param1, name) {
        super(param1);
        this.name = name;
        this.protocolId = 503;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.name);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class CharacterMinimalAllianceInformations extends CharacterMinimalGuildInformations {
    constructor(param1, param2, param3, param4, param5, alliance) {
        super(param1, param2, param3, param4, param5);
        this.alliance = alliance;
        this.protocolId = 444;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.alliance.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.alliance = new BasicAllianceInformations();
        this.alliance.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class CharacterMinimalGuildInformations extends CharacterMinimalPlusLookInformations {
    constructor(param1, param2, param3, param4, guild) {
        super(param1, param2, param3, param4);
        this.guild = guild;
        this.protocolId = 445;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.guild.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.guild = new BasicGuildInformations();
        this.guild.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class CharacterMinimalInformations extends CharacterBasicMinimalInformations {
    constructor(param1, param2, level) {
        super(param1, param2);
        this.level = level;
        this.protocolId = 110;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.level < 1 || this.level > 206) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.level = buffer.readUnsignedByte();
        if (this.level < 1 || this.level > 206) {
            Logger.error("Forbidden value (" + this.level + ") on element of CharacterMinimalInformations.level.");
        }
    }
}

// Generated by Noxus types 
export class CharacterMinimalPlusLookAndGradeInformations extends CharacterMinimalPlusLookInformations {
    constructor(param1, param2, param3, param4, grade) {
        super(param1, param2, param3, param4);
        this.grade = grade;
        this.protocolId = 193;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.grade < 0) {
            Logger.error("Forbidden value (" + this.grade + ") on element grade.");
        }
        buffer.writeVarInt(this.grade);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.grade = buffer.readVarUhInt();
        if (this.grade < 0) {
            Logger.error("Forbidden value (" + this.grade + ") on element of CharacterMinimalPlusLookAndGradeInformations.grade.");
        }
    }
}

// Generated by Noxus types 
export class CharacterMinimalPlusLookInformations extends CharacterMinimalInformations {
    constructor(param1, param2, param3, entityLook) {
        super(param1, param2, param3);
        this.entityLook = entityLook;
        this.protocolId = 163;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.entityLook.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.entityLook = new EntityLook();
        this.entityLook.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class ActorAlignmentInformations {
    constructor(alignmentSide, alignmentValue, alignmentGrade, characterPower) {
        this.alignmentSide = alignmentSide;
        this.alignmentValue = alignmentValue;
        this.alignmentGrade = alignmentGrade;
        this.characterPower = characterPower;
        this.protocolId = 201;
    }
    serialize(buffer) {
        buffer.writeByte(this.alignmentSide);
        if (this.alignmentValue < 0) {
            Logger.error("Forbidden value (" + this.alignmentValue + ") on element alignmentValue.");
        }
        buffer.writeByte(this.alignmentValue);
        if (this.alignmentGrade < 0) {
            Logger.error("Forbidden value (" + this.alignmentGrade + ") on element alignmentGrade.");
        }
        buffer.writeByte(this.alignmentGrade);
        if (this.characterPower < -9007199254740990 || this.characterPower > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterPower + ") on element characterPower.");
        }
        buffer.writeDouble(this.characterPower);
    }
    deserialize(buffer) {
        this.alignmentSide = buffer.readByte();
        this.alignmentValue = buffer.readByte();
        if (this.alignmentValue < 0) {
            Logger.error("Forbidden value (" + this.alignmentValue + ") on element of ActorAlignmentInformations.alignmentValue.");
        }
        this.alignmentGrade = buffer.readByte();
        if (this.alignmentGrade < 0) {
            Logger.error("Forbidden value (" + this.alignmentGrade + ") on element of ActorAlignmentInformations.alignmentGrade.");
        }
        this.characterPower = buffer.readDouble();
        if (this.characterPower < -9007199254740990 || this.characterPower > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterPower + ") on element of ActorAlignmentInformations.characterPower.");
        }
    }
}

// Generated by Noxus types 
export class ActorExtendedAlignmentInformations extends ActorAlignmentInformations {
    constructor(param1, param2, param3, param4, honor, honorGradeFloor, honorNextGradeFloor, aggressable) {
        super(param1, param2, param3, param4);
        this.honor = honor;
        this.honorGradeFloor = honorGradeFloor;
        this.honorNextGradeFloor = honorNextGradeFloor;
        this.aggressable = aggressable;
        this.protocolId = 202;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.honor < 0 || this.honor > 20000) {
            Logger.error("Forbidden value (" + this.honor + ") on element honor.");
        }
        buffer.writeVarShort(this.honor);
        if (this.honorGradeFloor < 0 || this.honorGradeFloor > 20000) {
            Logger.error("Forbidden value (" + this.honorGradeFloor + ") on element honorGradeFloor.");
        }
        buffer.writeVarShort(this.honorGradeFloor);
        if (this.honorNextGradeFloor < 0 || this.honorNextGradeFloor > 20000) {
            Logger.error("Forbidden value (" + this.honorNextGradeFloor + ") on element honorNextGradeFloor.");
        }
        buffer.writeVarShort(this.honorNextGradeFloor);
        buffer.writeByte(this.aggressable);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.honor = buffer.readVarUhShort();
        if (this.honor < 0 || this.honor > 20000) {
            Logger.error("Forbidden value (" + this.honor + ") on element of ActorExtendedAlignmentInformations.honor.");
        }
        this.honorGradeFloor = buffer.readVarUhShort();
        if (this.honorGradeFloor < 0 || this.honorGradeFloor > 20000) {
            Logger.error("Forbidden value (" + this.honorGradeFloor + ") on element of ActorExtendedAlignmentInformations.honorGradeFloor.");
        }
        this.honorNextGradeFloor = buffer.readVarUhShort();
        if (this.honorNextGradeFloor < 0 || this.honorNextGradeFloor > 20000) {
            Logger.error("Forbidden value (" + this.honorNextGradeFloor + ") on element of ActorExtendedAlignmentInformations.honorNextGradeFloor.");
        }
        this.aggressable = buffer.readByte();
        if (this.aggressable < 0) {
            Logger.error("Forbidden value (" + this.aggressable + ") on element of ActorExtendedAlignmentInformations.aggressable.");
        }
    }
}

// Generated by Noxus types 
export class CharacterBaseCharacteristic {
    constructor(base, additionnal, objectsAndMountBonus, alignGiftBonus, contextModif) {
        this.base = base;
        this.additionnal = additionnal;
        this.objectsAndMountBonus = objectsAndMountBonus;
        this.alignGiftBonus = alignGiftBonus;
        this.contextModif = contextModif;
        this.protocolId = 4;
    }
    serialize(buffer) {
        buffer.writeVarShort(this.base);
        buffer.writeVarShort(this.additionnal);
        buffer.writeVarShort(this.objectsAndMountBonus);
        buffer.writeVarShort(this.alignGiftBonus);
        buffer.writeVarShort(this.contextModif);
    }
    deserialize(buffer) {
        this.base = buffer.readVarShort();
        this.additionnal = buffer.readVarShort();
        this.objectsAndMountBonus = buffer.readVarShort();
        this.alignGiftBonus = buffer.readVarShort();
        this.contextModif = buffer.readVarShort();
    }
}

// Generated by Noxus types 
export class CharacterCharacteristicsInformations {
    constructor(experience, experienceLevelFloor, experienceNextLevelFloor, experienceBonusLimit, kamas, statsPoints, additionnalPoints, spellsPoints, alignmentInfos, lifePoints, maxLifePoints, energyPoints, maxEnergyPoints, actionPointsCurrent, movementPointsCurrent, initiative, prospecting, actionPoints, movementPoints, strength, vitality, wisdom, chance, agility, intelligence, range, summonableCreaturesBoost, reflect, criticalHit, criticalHitWeapon, criticalMiss, healBonus, allDamagesBonus, weaponDamagesBonusPercent, damagesBonusPercent, trapBonus, trapBonusPercent, glyphBonusPercent, runeBonusPercent, permanentDamagePercent, tackleBlock, tackleEvade, PAAttack, PMAttack, pushDamageBonus, criticalDamageBonus, neutralDamageBonus, earthDamageBonus, waterDamageBonus, airDamageBonus, fireDamageBonus, dodgePALostProbability, dodgePMLostProbability, neutralElementResistPercent, earthElementResistPercent, waterElementResistPercent, airElementResistPercent, fireElementResistPercent, neutralElementReduction, earthElementReduction, waterElementReduction, airElementReduction, fireElementReduction, pushDamageReduction, criticalDamageReduction, pvpNeutralElementResistPercent, pvpEarthElementResistPercent, pvpWaterElementResistPercent, pvpAirElementResistPercent, pvpFireElementResistPercent, pvpNeutralElementReduction, pvpEarthElementReduction, pvpWaterElementReduction, pvpAirElementReduction, pvpFireElementReduction, spellModifications, probationTime) {
        this.experience = experience;
        this.experienceLevelFloor = experienceLevelFloor;
        this.experienceNextLevelFloor = experienceNextLevelFloor;
        this.experienceBonusLimit = experienceBonusLimit;
        this.kamas = kamas;
        this.statsPoints = statsPoints;
        this.additionnalPoints = additionnalPoints;
        this.spellsPoints = spellsPoints;
        this.alignmentInfos = alignmentInfos;
        this.lifePoints = lifePoints;
        this.maxLifePoints = maxLifePoints;
        this.energyPoints = energyPoints;
        this.maxEnergyPoints = maxEnergyPoints;
        this.actionPointsCurrent = actionPointsCurrent;
        this.movementPointsCurrent = movementPointsCurrent;
        this.initiative = initiative;
        this.prospecting = prospecting;
        this.actionPoints = actionPoints;
        this.movementPoints = movementPoints;
        this.strength = strength;
        this.vitality = vitality;
        this.wisdom = wisdom;
        this.chance = chance;
        this.agility = agility;
        this.intelligence = intelligence;
        this.range = range;
        this.summonableCreaturesBoost = summonableCreaturesBoost;
        this.reflect = reflect;
        this.criticalHit = criticalHit;
        this.criticalHitWeapon = criticalHitWeapon;
        this.criticalMiss = criticalMiss;
        this.healBonus = healBonus;
        this.allDamagesBonus = allDamagesBonus;
        this.weaponDamagesBonusPercent = weaponDamagesBonusPercent;
        this.damagesBonusPercent = damagesBonusPercent;
        this.trapBonus = trapBonus;
        this.trapBonusPercent = trapBonusPercent;
        this.glyphBonusPercent = glyphBonusPercent;
        this.runeBonusPercent = runeBonusPercent;
        this.permanentDamagePercent = permanentDamagePercent;
        this.tackleBlock = tackleBlock;
        this.tackleEvade = tackleEvade;
        this.PAAttack = PAAttack;
        this.PMAttack = PMAttack;
        this.pushDamageBonus = pushDamageBonus;
        this.criticalDamageBonus = criticalDamageBonus;
        this.neutralDamageBonus = neutralDamageBonus;
        this.earthDamageBonus = earthDamageBonus;
        this.waterDamageBonus = waterDamageBonus;
        this.airDamageBonus = airDamageBonus;
        this.fireDamageBonus = fireDamageBonus;
        this.dodgePALostProbability = dodgePALostProbability;
        this.dodgePMLostProbability = dodgePMLostProbability;
        this.neutralElementResistPercent = neutralElementResistPercent;
        this.earthElementResistPercent = earthElementResistPercent;
        this.waterElementResistPercent = waterElementResistPercent;
        this.airElementResistPercent = airElementResistPercent;
        this.fireElementResistPercent = fireElementResistPercent;
        this.neutralElementReduction = neutralElementReduction;
        this.earthElementReduction = earthElementReduction;
        this.waterElementReduction = waterElementReduction;
        this.airElementReduction = airElementReduction;
        this.fireElementReduction = fireElementReduction;
        this.pushDamageReduction = pushDamageReduction;
        this.criticalDamageReduction = criticalDamageReduction;
        this.pvpNeutralElementResistPercent = pvpNeutralElementResistPercent;
        this.pvpEarthElementResistPercent = pvpEarthElementResistPercent;
        this.pvpWaterElementResistPercent = pvpWaterElementResistPercent;
        this.pvpAirElementResistPercent = pvpAirElementResistPercent;
        this.pvpFireElementResistPercent = pvpFireElementResistPercent;
        this.pvpNeutralElementReduction = pvpNeutralElementReduction;
        this.pvpEarthElementReduction = pvpEarthElementReduction;
        this.pvpWaterElementReduction = pvpWaterElementReduction;
        this.pvpAirElementReduction = pvpAirElementReduction;
        this.pvpFireElementReduction = pvpFireElementReduction;
        this.spellModifications = spellModifications;
        this.probationTime = probationTime;
        this.protocolId = 8;
    }
    serialize(buffer) {
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element experience.");
        }
        buffer.writeVarLong(this.experience);
        if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceLevelFloor + ") on element experienceLevelFloor.");
        }
        buffer.writeVarLong(this.experienceLevelFloor);
        if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceNextLevelFloor + ") on element experienceNextLevelFloor.");
        }
        buffer.writeVarLong(this.experienceNextLevelFloor);
        if (this.experienceBonusLimit < 0 || this.experienceBonusLimit > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceBonusLimit + ") on element experienceBonusLimit.");
        }
        buffer.writeVarLong(this.experienceBonusLimit);
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        buffer.writeInt(this.kamas);
        if (this.statsPoints < 0) {
            Logger.error("Forbidden value (" + this.statsPoints + ") on element statsPoints.");
        }
        buffer.writeVarShort(this.statsPoints);
        if (this.additionnalPoints < 0) {
            Logger.error("Forbidden value (" + this.additionnalPoints + ") on element additionnalPoints.");
        }
        buffer.writeVarShort(this.additionnalPoints);
        if (this.spellsPoints < 0) {
            Logger.error("Forbidden value (" + this.spellsPoints + ") on element spellsPoints.");
        }
        buffer.writeVarShort(this.spellsPoints);
        this.alignmentInfos.serialize(buffer);
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        buffer.writeVarInt(this.maxLifePoints);
        if (this.energyPoints < 0) {
            Logger.error("Forbidden value (" + this.energyPoints + ") on element energyPoints.");
        }
        buffer.writeVarShort(this.energyPoints);
        if (this.maxEnergyPoints < 0) {
            Logger.error("Forbidden value (" + this.maxEnergyPoints + ") on element maxEnergyPoints.");
        }
        buffer.writeVarShort(this.maxEnergyPoints);
        buffer.writeVarShort(this.actionPointsCurrent);
        buffer.writeVarShort(this.movementPointsCurrent);
        this.initiative.serialize(buffer);
        this.prospecting.serialize(buffer);
        this.actionPoints.serialize(buffer);
        this.movementPoints.serialize(buffer);
        this.strength.serialize(buffer);
        this.vitality.serialize(buffer);
        this.wisdom.serialize(buffer);
        this.chance.serialize(buffer);
        this.agility.serialize(buffer);
        this.intelligence.serialize(buffer);
        this.range.serialize(buffer);
        this.summonableCreaturesBoost.serialize(buffer);
        this.reflect.serialize(buffer);
        this.criticalHit.serialize(buffer);
        if (this.criticalHitWeapon < 0) {
            Logger.error("Forbidden value (" + this.criticalHitWeapon + ") on element criticalHitWeapon.");
        }
        buffer.writeVarShort(this.criticalHitWeapon);
        this.criticalMiss.serialize(buffer);
        this.healBonus.serialize(buffer);
        this.allDamagesBonus.serialize(buffer);
        this.weaponDamagesBonusPercent.serialize(buffer);
        this.damagesBonusPercent.serialize(buffer);
        this.trapBonus.serialize(buffer);
        this.trapBonusPercent.serialize(buffer);
        this.glyphBonusPercent.serialize(buffer);
        this.runeBonusPercent.serialize(buffer);
        this.permanentDamagePercent.serialize(buffer);
        this.tackleBlock.serialize(buffer);
        this.tackleEvade.serialize(buffer);
        this.PAAttack.serialize(buffer);
        this.PMAttack.serialize(buffer);
        this.pushDamageBonus.serialize(buffer);
        this.criticalDamageBonus.serialize(buffer);
        this.neutralDamageBonus.serialize(buffer);
        this.earthDamageBonus.serialize(buffer);
        this.waterDamageBonus.serialize(buffer);
        this.airDamageBonus.serialize(buffer);
        this.fireDamageBonus.serialize(buffer);
        this.dodgePALostProbability.serialize(buffer);
        this.dodgePMLostProbability.serialize(buffer);
        this.neutralElementResistPercent.serialize(buffer);
        this.earthElementResistPercent.serialize(buffer);
        this.waterElementResistPercent.serialize(buffer);
        this.airElementResistPercent.serialize(buffer);
        this.fireElementResistPercent.serialize(buffer);
        this.neutralElementReduction.serialize(buffer);
        this.earthElementReduction.serialize(buffer);
        this.waterElementReduction.serialize(buffer);
        this.airElementReduction.serialize(buffer);
        this.fireElementReduction.serialize(buffer);
        this.pushDamageReduction.serialize(buffer);
        this.criticalDamageReduction.serialize(buffer);
        this.pvpNeutralElementResistPercent.serialize(buffer);
        this.pvpEarthElementResistPercent.serialize(buffer);
        this.pvpWaterElementResistPercent.serialize(buffer);
        this.pvpAirElementResistPercent.serialize(buffer);
        this.pvpFireElementResistPercent.serialize(buffer);
        this.pvpNeutralElementReduction.serialize(buffer);
        this.pvpEarthElementReduction.serialize(buffer);
        this.pvpWaterElementReduction.serialize(buffer);
        this.pvpAirElementReduction.serialize(buffer);
        this.pvpFireElementReduction.serialize(buffer);
        buffer.writeShort(this.spellModifications.length);
        var _loc2_ = 0;
        while (_loc2_ < this.spellModifications.length) {
            this.spellModifications[_loc2_].serialize(buffer);
            _loc2_++;
        }
        if (this.probationTime < 0) {
            Logger.error("Forbidden value (" + this.probationTime + ") on element probationTime.");
        }
        buffer.writeInt(this.probationTime);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element of CharacterCharacteristicsInformations.experience.");
        }
        this.experienceLevelFloor = buffer.readVarUhLong();
        if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceLevelFloor + ") on element of CharacterCharacteristicsInformations.experienceLevelFloor.");
        }
        this.experienceNextLevelFloor = buffer.readVarUhLong();
        if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceNextLevelFloor + ") on element of CharacterCharacteristicsInformations.experienceNextLevelFloor.");
        }
        this.experienceBonusLimit = buffer.readVarUhLong();
        if (this.experienceBonusLimit < 0 || this.experienceBonusLimit > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceBonusLimit + ") on element of CharacterCharacteristicsInformations.experienceBonusLimit.");
        }
        this.kamas = buffer.readInt();
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element of CharacterCharacteristicsInformations.kamas.");
        }
        this.statsPoints = buffer.readVarUhShort();
        if (this.statsPoints < 0) {
            Logger.error("Forbidden value (" + this.statsPoints + ") on element of CharacterCharacteristicsInformations.statsPoints.");
        }
        this.additionnalPoints = buffer.readVarUhShort();
        if (this.additionnalPoints < 0) {
            Logger.error("Forbidden value (" + this.additionnalPoints + ") on element of CharacterCharacteristicsInformations.additionnalPoints.");
        }
        this.spellsPoints = buffer.readVarUhShort();
        if (this.spellsPoints < 0) {
            Logger.error("Forbidden value (" + this.spellsPoints + ") on element of CharacterCharacteristicsInformations.spellsPoints.");
        }
        this.alignmentInfos = new ActorExtendedAlignmentInformations();
        this.alignmentInfos.deserialize(buffer);
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element of CharacterCharacteristicsInformations.lifePoints.");
        }
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element of CharacterCharacteristicsInformations.maxLifePoints.");
        }
        this.energyPoints = buffer.readVarUhShort();
        if (this.energyPoints < 0) {
            Logger.error("Forbidden value (" + this.energyPoints + ") on element of CharacterCharacteristicsInformations.energyPoints.");
        }
        this.maxEnergyPoints = buffer.readVarUhShort();
        if (this.maxEnergyPoints < 0) {
            Logger.error("Forbidden value (" + this.maxEnergyPoints + ") on element of CharacterCharacteristicsInformations.maxEnergyPoints.");
        }
        this.actionPointsCurrent = buffer.readVarShort();
        this.movementPointsCurrent = buffer.readVarShort();
        this.initiative = new Types.CharacterBaseCharacteristic();
        this.initiative.deserialize(buffer);
        this.prospecting = new Types.CharacterBaseCharacteristic();
        this.prospecting.deserialize(buffer);
        this.actionPoints = new Types.CharacterBaseCharacteristic();
        this.actionPoints.deserialize(buffer);
        this.movementPoints = new Types.CharacterBaseCharacteristic();
        this.movementPoints.deserialize(buffer);
        this.strength = new Types.CharacterBaseCharacteristic();
        this.strength.deserialize(buffer);
        this.vitality = new Types.CharacterBaseCharacteristic();
        this.vitality.deserialize(buffer);
        this.wisdom = new Types.CharacterBaseCharacteristic();
        this.wisdom.deserialize(buffer);
        this.chance = new Types.CharacterBaseCharacteristic();
        this.chance.deserialize(buffer);
        this.agility = new Types.CharacterBaseCharacteristic();
        this.agility.deserialize(buffer);
        this.intelligence = new Types.CharacterBaseCharacteristic();
        this.intelligence.deserialize(buffer);
        this.range = new Types.CharacterBaseCharacteristic();
        this.range.deserialize(buffer);
        this.summonableCreaturesBoost = new Types.CharacterBaseCharacteristic();
        this.summonableCreaturesBoost.deserialize(buffer);
        this.reflect = new Types.CharacterBaseCharacteristic();
        this.reflect.deserialize(buffer);
        this.criticalHit = new Types.CharacterBaseCharacteristic();
        this.criticalHit.deserialize(buffer);
        this.criticalHitWeapon = buffer.readVarUhShort();
        if (this.criticalHitWeapon < 0) {
            Logger.error("Forbidden value (" + this.criticalHitWeapon + ") on element of CharacterCharacteristicsInformations.criticalHitWeapon.");
        }
        this.criticalMiss = new Types.CharacterBaseCharacteristic();
        this.criticalMiss.deserialize(buffer);
        this.healBonus = new Types.CharacterBaseCharacteristic();
        this.healBonus.deserialize(buffer);
        this.allDamagesBonus = new Types.CharacterBaseCharacteristic();
        this.allDamagesBonus.deserialize(buffer);
        this.weaponDamagesBonusPercent = new Types.CharacterBaseCharacteristic();
        this.weaponDamagesBonusPercent.deserialize(buffer);
        this.damagesBonusPercent = new Types.CharacterBaseCharacteristic();
        this.damagesBonusPercent.deserialize(buffer);
        this.trapBonus = new Types.CharacterBaseCharacteristic();
        this.trapBonus.deserialize(buffer);
        this.trapBonusPercent = new Types.CharacterBaseCharacteristic();
        this.trapBonusPercent.deserialize(buffer);
        this.glyphBonusPercent = new Types.CharacterBaseCharacteristic();
        this.glyphBonusPercent.deserialize(buffer);
        this.runeBonusPercent = new Types.CharacterBaseCharacteristic();
        this.runeBonusPercent.deserialize(buffer);
        this.permanentDamagePercent = new Types.CharacterBaseCharacteristic();
        this.permanentDamagePercent.deserialize(buffer);
        this.tackleBlock = new Types.CharacterBaseCharacteristic();
        this.tackleBlock.deserialize(buffer);
        this.tackleEvade = new Types.CharacterBaseCharacteristic();
        this.tackleEvade.deserialize(buffer);
        this.PAAttack = new Types.CharacterBaseCharacteristic();
        this.PAAttack.deserialize(buffer);
        this.PMAttack = new Types.CharacterBaseCharacteristic();
        this.PMAttack.deserialize(buffer);
        this.pushDamageBonus = new Types.CharacterBaseCharacteristic();
        this.pushDamageBonus.deserialize(buffer);
        this.criticalDamageBonus = new Types.CharacterBaseCharacteristic();
        this.criticalDamageBonus.deserialize(buffer);
        this.neutralDamageBonus = new Types.CharacterBaseCharacteristic();
        this.neutralDamageBonus.deserialize(buffer);
        this.earthDamageBonus = new Types.CharacterBaseCharacteristic();
        this.earthDamageBonus.deserialize(buffer);
        this.waterDamageBonus = new Types.CharacterBaseCharacteristic();
        this.waterDamageBonus.deserialize(buffer);
        this.airDamageBonus = new Types.CharacterBaseCharacteristic();
        this.airDamageBonus.deserialize(buffer);
        this.fireDamageBonus = new Types.CharacterBaseCharacteristic();
        this.fireDamageBonus.deserialize(buffer);
        this.dodgePALostProbability = new Types.CharacterBaseCharacteristic();
        this.dodgePALostProbability.deserialize(buffer);
        this.dodgePMLostProbability = new Types.CharacterBaseCharacteristic();
        this.dodgePMLostProbability.deserialize(buffer);
        this.neutralElementResistPercent = new Types.CharacterBaseCharacteristic();
        this.neutralElementResistPercent.deserialize(buffer);
        this.earthElementResistPercent = new Types.CharacterBaseCharacteristic();
        this.earthElementResistPercent.deserialize(buffer);
        this.waterElementResistPercent = new Types.CharacterBaseCharacteristic();
        this.waterElementResistPercent.deserialize(buffer);
        this.airElementResistPercent = new Types.CharacterBaseCharacteristic();
        this.airElementResistPercent.deserialize(buffer);
        this.fireElementResistPercent = new Types.CharacterBaseCharacteristic();
        this.fireElementResistPercent.deserialize(buffer);
        this.neutralElementReduction = new Types.CharacterBaseCharacteristic();
        this.neutralElementReduction.deserialize(buffer);
        this.earthElementReduction = new Types.CharacterBaseCharacteristic();
        this.earthElementReduction.deserialize(buffer);
        this.waterElementReduction = new Types.CharacterBaseCharacteristic();
        this.waterElementReduction.deserialize(buffer);
        this.airElementReduction = new Types.CharacterBaseCharacteristic();
        this.airElementReduction.deserialize(buffer);
        this.fireElementReduction = new Types.CharacterBaseCharacteristic();
        this.fireElementReduction.deserialize(buffer);
        this.pushDamageReduction = new Types.CharacterBaseCharacteristic();
        this.pushDamageReduction.deserialize(buffer);
        this.criticalDamageReduction = new Types.CharacterBaseCharacteristic();
        this.criticalDamageReduction.deserialize(buffer);
        this.pvpNeutralElementResistPercent = new Types.CharacterBaseCharacteristic();
        this.pvpNeutralElementResistPercent.deserialize(buffer);
        this.pvpEarthElementResistPercent = new Types.CharacterBaseCharacteristic();
        this.pvpEarthElementResistPercent.deserialize(buffer);
        this.pvpWaterElementResistPercent = new Types.CharacterBaseCharacteristic();
        this.pvpWaterElementResistPercent.deserialize(buffer);
        this.pvpAirElementResistPercent = new Types.CharacterBaseCharacteristic();
        this.pvpAirElementResistPercent.deserialize(buffer);
        this.pvpFireElementResistPercent = new Types.CharacterBaseCharacteristic();
        this.pvpFireElementResistPercent.deserialize(buffer);
        this.pvpNeutralElementReduction = new Types.CharacterBaseCharacteristic();
        this.pvpNeutralElementReduction.deserialize(buffer);
        this.pvpEarthElementReduction = new Types.CharacterBaseCharacteristic();
        this.pvpEarthElementReduction.deserialize(buffer);
        this.pvpWaterElementReduction = new Types.CharacterBaseCharacteristic();
        this.pvpWaterElementReduction.deserialize(buffer);
        this.pvpAirElementReduction = new Types.CharacterBaseCharacteristic();
        this.pvpAirElementReduction.deserialize(buffer);
        this.pvpFireElementReduction = new Types.CharacterBaseCharacteristic();
        this.pvpFireElementReduction.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new Types.CharacterSpellModification();
            _loc4_.deserialize(buffer);
            this.spellModifications.push(_loc4_);
            _loc3_++;
        }
        this.probationTime = buffer.readInt();
        if (this.probationTime < 0) {
            Logger.error("Forbidden value (" + this.probationTime + ") on element of CharacterCharacteristicsInformations.probationTime.");
        }
    }
}

// Generated by Noxus types 
export class CharacterSpellModification {
    constructor(modificationType, spellId, value) {
        this.modificationType = modificationType;
        this.spellId = spellId;
        this.value = value;
        this.protocolId = 215;
    }
    serialize(buffer) {
        buffer.writeByte(this.modificationType);
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        buffer.writeVarShort(this.spellId);
        this.value.serialize(buffer);
    }
    deserialize(buffer) {
        this.modificationType = buffer.readByte();
        if (this.modificationType < 0) {
            Logger.error("Forbidden value (" + this.modificationType + ") on element of CharacterSpellModification.modificationType.");
        }
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of CharacterSpellModification.spellId.");
        }
        this.value = new Types.CharacterBaseCharacteristic();
        this.value.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class AbstractCharacterToRefurbishInformation extends AbstractCharacterInformation {
    constructor(param1, colors, cosmeticId) {
        super(param1);
        this.colors = colors;
        this.cosmeticId = cosmeticId;
        this.protocolId = 475;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.colors.length);
        var _loc2_ = 0;
        while (_loc2_ < this.colors.length) {
            buffer.writeInt(this.colors[_loc2_]);
            _loc2_++;
        }
        if (this.cosmeticId < 0) {
            Logger.error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
        }
        buffer.writeVarInt(this.cosmeticId);
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.colors.push(_loc4_);
            _loc3_++;
        }
        this.cosmeticId = buffer.readVarUhInt();
        if (this.cosmeticId < 0) {
            Logger.error("Forbidden value (" + this.cosmeticId + ") on element of AbstractCharacterToRefurbishInformation.cosmeticId.");
        }
    }
}

// Generated by Noxus types 
export class CharacterBaseInformations extends CharacterMinimalPlusLookInformations {
    constructor(param1, param2, param3, param4, breed, sex) {
        super(param1, param2, param3, param4);
        this.breed = breed;
        this.sex = sex;
        this.protocolId = 45;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.breed);
        buffer.writeBoolean(this.sex);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.breed = buffer.readByte();
        this.sex = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class CharacterHardcoreOrEpicInformations extends CharacterBaseInformations {
    constructor(param1, param2, param3, param4, param5, param6, deathState, deathCount, deathMaxLevel) {
        super(param1, param2, param3, param4, param5, param6);
        this.deathState = deathState;
        this.deathCount = deathCount;
        this.deathMaxLevel = deathMaxLevel;
        this.protocolId = 474;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.deathState);
        if (this.deathCount < 0) {
            Logger.error("Forbidden value (" + this.deathCount + ") on element deathCount.");
        }
        buffer.writeVarShort(this.deathCount);
        if (this.deathMaxLevel < 1 || this.deathMaxLevel > 206) {
            Logger.error("Forbidden value (" + this.deathMaxLevel + ") on element deathMaxLevel.");
        }
        buffer.writeByte(this.deathMaxLevel);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.deathState = buffer.readByte();
        if (this.deathState < 0) {
            Logger.error("Forbidden value (" + this.deathState + ") on element of CharacterHardcoreOrEpicInformations.deathState.");
        }
        this.deathCount = buffer.readVarUhShort();
        if (this.deathCount < 0) {
            Logger.error("Forbidden value (" + this.deathCount + ") on element of CharacterHardcoreOrEpicInformations.deathCount.");
        }
        this.deathMaxLevel = buffer.readUnsignedByte();
        if (this.deathMaxLevel < 1 || this.deathMaxLevel > 206) {
            Logger.error("Forbidden value (" + this.deathMaxLevel + ") on element of CharacterHardcoreOrEpicInformations.deathMaxLevel.");
        }
    }
}

// Generated by Noxus types 
export class CharacterRemodelingInformation extends AbstractCharacterInformation {
    constructor(param1, name, breed, sex, cosmeticId, colors) {
        super(param1);
        this.name = name;
        this.breed = breed;
        this.sex = sex;
        this.cosmeticId = cosmeticId;
        this.colors = colors;
        this.protocolId = 479;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.name);
        buffer.writeByte(this.breed);
        buffer.writeBoolean(this.sex);
        if (this.cosmeticId < 0) {
            Logger.error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
        }
        buffer.writeVarShort(this.cosmeticId);
        buffer.writeShort(this.colors.length);
        var _loc2_ = 0;
        while (_loc2_ < this.colors.length) {
            buffer.writeInt(this.colors[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        this.name = buffer.readUTF();
        this.breed = buffer.readByte();
        this.sex = buffer.readBoolean();
        this.cosmeticId = buffer.readVarUhShort();
        if (this.cosmeticId < 0) {
            Logger.error("Forbidden value (" + this.cosmeticId + ") on element of CharacterRemodelingInformation.cosmeticId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.colors.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class CharacterToRecolorInformation extends AbstractCharacterToRefurbishInformation {
    constructor(param1, param2, param3) {
        super(param1, param2, param3);
        this.protocolId = 212;
    }
    serialize(buffer) {
        super.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class CharacterToRelookInformation extends AbstractCharacterToRefurbishInformation {
    constructor(param1, param2, param3) {
        super(param1, param2, param3);
        this.protocolId = 399;
    }
    serialize(buffer) {
        super.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class CharacterToRemodelInformations extends CharacterRemodelingInformation {
    constructor(param1, param2, param3, param4, param5, param6, possibleChangeMask, mandatoryChangeMask) {
        super(param1, param2, param3, param4, param5, param6);
        this.possibleChangeMask = possibleChangeMask;
        this.mandatoryChangeMask = mandatoryChangeMask;
        this.protocolId = 477;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.possibleChangeMask < 0) {
            Logger.error("Forbidden value (" + this.possibleChangeMask + ") on element possibleChangeMask.");
        }
        buffer.writeByte(this.possibleChangeMask);
        if (this.mandatoryChangeMask < 0) {
            Logger.error("Forbidden value (" + this.mandatoryChangeMask + ") on element mandatoryChangeMask.");
        }
        buffer.writeByte(this.mandatoryChangeMask);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.possibleChangeMask = buffer.readByte();
        if (this.possibleChangeMask < 0) {
            Logger.error("Forbidden value (" + this.possibleChangeMask + ") on element of CharacterToRemodelInformations.possibleChangeMask.");
        }
        this.mandatoryChangeMask = buffer.readByte();
        if (this.mandatoryChangeMask < 0) {
            Logger.error("Forbidden value (" + this.mandatoryChangeMask + ") on element of CharacterToRemodelInformations.mandatoryChangeMask.");
        }
    }
}

// Generated by Noxus types 
export class RemodelingInformation {
    constructor(name, breed, sex, cosmeticId, colors) {
        this.name = name;
        this.breed = breed;
        this.sex = sex;
        this.cosmeticId = cosmeticId;
        this.colors = colors;
        this.protocolId = 480;
    }
    serialize(buffer) {
        buffer.writeUTF(this.name);
        buffer.writeByte(this.breed);
        buffer.writeBoolean(this.sex);
        if (this.cosmeticId < 0) {
            Logger.error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
        }
        buffer.writeVarShort(this.cosmeticId);
        buffer.writeShort(this.colors.length);
        var _loc2_ = 0;
        while (_loc2_ < this.colors.length) {
            buffer.writeInt(this.colors[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.name = buffer.readUTF();
        this.breed = buffer.readByte();
        this.sex = buffer.readBoolean();
        this.cosmeticId = buffer.readVarUhShort();
        if (this.cosmeticId < 0) {
            Logger.error("Forbidden value (" + this.cosmeticId + ") on element of RemodelingInformation.cosmeticId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.colors.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class ActorRestrictionsInformations {
    constructor(cantBeAggressed, cantBeChallenged, cantTrade, cantBeAttackedByMutant, cantRun, forceSlowWalk, cantMinimize, cantMove, cantAggress, cantChallenge, cantExchange, cantAttack, cantChat, cantBeMerchant, cantUseObject, cantUseTaxCollector, cantUseInteractive, cantSpeakToNPC, cantChangeZone, cantAttackMonster, cantWalk8Directions) {
        this.cantBeAggressed = cantBeAggressed;
        this.cantBeChallenged = cantBeChallenged;
        this.cantTrade = cantTrade;
        this.cantBeAttackedByMutant = cantBeAttackedByMutant;
        this.cantRun = cantRun;
        this.forceSlowWalk = forceSlowWalk;
        this.cantMinimize = cantMinimize;
        this.cantMove = cantMove;
        this.cantAggress = cantAggress;
        this.cantChallenge = cantChallenge;
        this.cantExchange = cantExchange;
        this.cantAttack = cantAttack;
        this.cantChat = cantChat;
        this.cantBeMerchant = cantBeMerchant;
        this.cantUseObject = cantUseObject;
        this.cantUseTaxCollector = cantUseTaxCollector;
        this.cantUseInteractive = cantUseInteractive;
        this.cantSpeakToNPC = cantSpeakToNPC;
        this.cantChangeZone = cantChangeZone;
        this.cantAttackMonster = cantAttackMonster;
        this.cantWalk8Directions = cantWalk8Directions;
        this.protocolId = 204;
    }
    serialize(buffer) {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.cantBeAggressed);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.cantBeChallenged);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 2, this.cantTrade);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 3, this.cantBeAttackedByMutant);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 4, this.cantRun);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 5, this.forceSlowWalk);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 6, this.cantMinimize);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 7, this.cantMove);
        buffer.writeByte(_loc2_);
        var _loc3_ = 0;
        _loc3_ = IO.BooleanByteWrapper.setFlag(_loc3_, 0, this.cantAggress);
        _loc3_ = IO.BooleanByteWrapper.setFlag(_loc3_, 1, this.cantChallenge);
        _loc3_ = IO.BooleanByteWrapper.setFlag(_loc3_, 2, this.cantExchange);
        _loc3_ = IO.BooleanByteWrapper.setFlag(_loc3_, 3, this.cantAttack);
        _loc3_ = IO.BooleanByteWrapper.setFlag(_loc3_, 4, this.cantChat);
        _loc3_ = IO.BooleanByteWrapper.setFlag(_loc3_, 5, this.cantBeMerchant);
        _loc3_ = IO.BooleanByteWrapper.setFlag(_loc3_, 6, this.cantUseObject);
        _loc3_ = IO.BooleanByteWrapper.setFlag(_loc3_, 7, this.cantUseTaxCollector);
        buffer.writeByte(_loc3_);
        var _loc4_ = 0;
        _loc4_ = IO.BooleanByteWrapper.setFlag(_loc4_, 0, this.cantUseInteractive);
        _loc4_ = IO.BooleanByteWrapper.setFlag(_loc4_, 1, this.cantSpeakToNPC);
        _loc4_ = IO.BooleanByteWrapper.setFlag(_loc4_, 2, this.cantChangeZone);
        _loc4_ = IO.BooleanByteWrapper.setFlag(_loc4_, 3, this.cantAttackMonster);
        _loc4_ = IO.BooleanByteWrapper.setFlag(_loc4_, 4, this.cantWalk8Directions);
        buffer.writeByte(_loc4_);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.cantBeAggressed = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.cantBeChallenged = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.cantTrade = IO.BooleanByteWrapper.getFlag(_loc2_, 2);
        this.cantBeAttackedByMutant = IO.BooleanByteWrapper.getFlag(_loc2_, 3);
        this.cantRun = IO.BooleanByteWrapper.getFlag(_loc2_, 4);
        this.forceSlowWalk = IO.BooleanByteWrapper.getFlag(_loc2_, 5);
        this.cantMinimize = IO.BooleanByteWrapper.getFlag(_loc2_, 6);
        this.cantMove = IO.BooleanByteWrapper.getFlag(_loc2_, 7);
        var _loc3_ = buffer.readByte();
        this.cantAggress = IO.BooleanByteWrapper.getFlag(_loc3_, 0);
        this.cantChallenge = IO.BooleanByteWrapper.getFlag(_loc3_, 1);
        this.cantExchange = IO.BooleanByteWrapper.getFlag(_loc3_, 2);
        this.cantAttack = IO.BooleanByteWrapper.getFlag(_loc3_, 3);
        this.cantChat = IO.BooleanByteWrapper.getFlag(_loc3_, 4);
        this.cantBeMerchant = IO.BooleanByteWrapper.getFlag(_loc3_, 5);
        this.cantUseObject = IO.BooleanByteWrapper.getFlag(_loc3_, 6);
        this.cantUseTaxCollector = IO.BooleanByteWrapper.getFlag(_loc3_, 7);
        var _loc4_ = buffer.readByte();
        this.cantUseInteractive = IO.BooleanByteWrapper.getFlag(_loc4_, 0);
        this.cantSpeakToNPC = IO.BooleanByteWrapper.getFlag(_loc4_, 1);
        this.cantChangeZone = IO.BooleanByteWrapper.getFlag(_loc4_, 2);
        this.cantAttackMonster = IO.BooleanByteWrapper.getFlag(_loc4_, 3);
        this.cantWalk8Directions = IO.BooleanByteWrapper.getFlag(_loc4_, 4);
    }
}

// Generated by Noxus types 
export class PlayerStatus {
    constructor(statusId) {
        this.statusId = statusId;
        this.protocolId = 415;
    }
    serialize(buffer) {
        buffer.writeByte(this.statusId);
    }
    deserialize(buffer) {
        this.statusId = buffer.readByte();
        if (this.statusId < 0) {
            Logger.error("Forbidden value (" + this.statusId + ") on element of PlayerStatus.statusId.");
        }
    }
}

// Generated by Noxus types 
export class PlayerStatusExtended extends PlayerStatus {
    constructor(param1, message) {
        super(param1);
        this.message = message;
        this.protocolId = 414;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.message);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.message = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class ActorOrientation {
    constructor(id, direction) {
        this.id = id;
        this.direction = direction;
        this.protocolId = 353;
    }
    serialize(buffer) {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeDouble(this.id);
        buffer.writeByte(this.direction);
    }
    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of ActorOrientation.id.");
        }
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            Logger.error("Forbidden value (" + this.direction + ") on element of ActorOrientation.direction.");
        }
    }
}

// Generated by Noxus types 
export class EntityDispositionInformations {
    constructor(cellId, direction) {
        this.cellId = cellId;
        this.direction = direction;
        this.protocolId = 60;
    }
    serialize(buffer) {
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        buffer.writeShort(this.cellId);
        buffer.writeByte(this.direction);
    }
    deserialize(buffer) {
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of EntityDispositionInformations.cellId.");
        }
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            Logger.error("Forbidden value (" + this.direction + ") on element of EntityDispositionInformations.direction.");
        }
    }
}

// Generated by Noxus types 
export class EntityMovementInformations {
    constructor(id, steps) {
        this.id = id;
        this.steps = steps;
        this.protocolId = 63;
    }
    serialize(buffer) {
        buffer.writeInt(this.id);
        buffer.writeShort(this.steps.length);
        var _loc2_ = 0;
        while (_loc2_ < this.steps.length) {
            buffer.writeByte(this.steps[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.id = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.steps.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class FightEntityDispositionInformations extends EntityDispositionInformations {
    constructor(param1, param2, carryingCharacterId) {
        super(param1, param2);
        this.carryingCharacterId = carryingCharacterId;
        this.protocolId = 217;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.carryingCharacterId < -9007199254740990 || this.carryingCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.carryingCharacterId + ") on element carryingCharacterId.");
        }
        buffer.writeDouble(this.carryingCharacterId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.carryingCharacterId = buffer.readDouble();
        if (this.carryingCharacterId < -9007199254740990 || this.carryingCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.carryingCharacterId + ") on element of FightEntityDispositionInformations.carryingCharacterId.");
        }
    }
}

// Generated by Noxus types 
export class GameContextActorInformations {
    constructor(contextualId, look, disposition) {
        this.contextualId = contextualId;
        this.look = look;
        this.disposition = disposition;
        this.protocolId = 150;
    }
    serialize(buffer) {
        if (this.contextualId < -9007199254740990 || this.contextualId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.contextualId + ") on element contextualId.");
        }
        buffer.writeDouble(this.contextualId);
        this.look.serialize(buffer);
        buffer.writeShort(this.disposition.protocolId);
        this.disposition.serialize(buffer);
    }
    deserialize(buffer) {
        this.contextualId = buffer.readDouble();
        if (this.contextualId < -9007199254740990 || this.contextualId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.contextualId + ") on element of GameContextActorInformations.contextualId.");
        }
        this.look = new EntityLook();
        this.look.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.disposition = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.EntityDispositionInformations, _loc2_);
        this.disposition.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class GameRolePlayTaxCollectorInformations extends GameRolePlayActorInformations {
    constructor(param1, param2, param3, identification, guildLevel, taxCollectorAttack) {
        super(param1, param2, param3);
        this.identification = identification;
        this.guildLevel = guildLevel;
        this.taxCollectorAttack = taxCollectorAttack;
        this.protocolId = 148;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.identification.protocolId);
        this.identification.serialize(buffer);
        if (this.guildLevel < 0 || this.guildLevel > 255) {
            Logger.error("Forbidden value (" + this.guildLevel + ") on element guildLevel.");
        }
        buffer.writeByte(this.guildLevel);
        buffer.writeInt(this.taxCollectorAttack);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.identification = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.TaxCollectorStaticInformations, _loc2_);
        this.identification.deserialize(buffer);
        this.guildLevel = buffer.readUnsignedByte();
        if (this.guildLevel < 0 || this.guildLevel > 255) {
            Logger.error("Forbidden value (" + this.guildLevel + ") on element of GameRolePlayTaxCollectorInformations.guildLevel.");
        }
        this.taxCollectorAttack = buffer.readInt();
    }
}

// Generated by Noxus types 
export class IdentifiedEntityDispositionInformations extends EntityDispositionInformations {
    constructor(param1, param2, id) {
        super(param1, param2);
        this.id = id;
        this.protocolId = 107;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeDouble(this.id);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of IdentifiedEntityDispositionInformations.id.");
        }
    }
}

// Generated by Noxus types 
export class MapCoordinates {
    constructor(worldX, worldY) {
        this.worldX = worldX;
        this.worldY = worldY;
        this.protocolId = 174;
    }
    serialize(buffer) {
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
    }
    deserialize(buffer) {
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of MapCoordinates.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of MapCoordinates.worldY.");
        }
    }
}

// Generated by Noxus types 
export class MapCoordinatesAndId extends MapCoordinates {
    constructor(param1, param2, mapId) {
        super(param1, param2);
        this.mapId = mapId;
        this.protocolId = 392;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeInt(this.mapId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.mapId = buffer.readInt();
    }
}

// Generated by Noxus types 
export class MapCoordinatesExtended extends MapCoordinatesAndId {
    constructor(param1, param2, param3, subAreaId) {
        super(param1, param2, param3);
        this.subAreaId = subAreaId;
        this.protocolId = 176;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of MapCoordinatesExtended.subAreaId.");
        }
    }
}

// Generated by Noxus types 
export class TaxCollectorStaticExtendedInformations extends TaxCollectorStaticInformations {
    constructor(param1, param2, param3, allianceIdentity) {
        super(param1, param2, param3);
        this.allianceIdentity = allianceIdentity;
        this.protocolId = 440;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.allianceIdentity.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceIdentity = new AllianceInformations();
        this.allianceIdentity.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class TaxCollectorStaticInformations {
    constructor(firstNameId, lastNameId, guildIdentity) {
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.guildIdentity = guildIdentity;
        this.protocolId = 147;
    }
    serialize(buffer) {
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        buffer.writeVarShort(this.lastNameId);
        this.guildIdentity.serialize(buffer);
    }
    deserialize(buffer) {
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorStaticInformations.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorStaticInformations.lastNameId.");
        }
        this.guildIdentity = new GuildInformations();
        this.guildIdentity.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class AbstractFightTeamInformations {
    constructor(teamId, leaderId, teamSide, teamTypeId, nbWaves) {
        this.teamId = teamId;
        this.leaderId = leaderId;
        this.teamSide = teamSide;
        this.teamTypeId = teamTypeId;
        this.nbWaves = nbWaves;
        this.protocolId = 116;
    }
    serialize(buffer) {
        buffer.writeByte(this.teamId);
        if (this.leaderId < -9007199254740990 || this.leaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leaderId + ") on element leaderId.");
        }
        buffer.writeDouble(this.leaderId);
        buffer.writeByte(this.teamSide);
        buffer.writeByte(this.teamTypeId);
        if (this.nbWaves < 0) {
            Logger.error("Forbidden value (" + this.nbWaves + ") on element nbWaves.");
        }
        buffer.writeByte(this.nbWaves);
    }
    deserialize(buffer) {
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            Logger.error("Forbidden value (" + this.teamId + ") on element of AbstractFightTeamInformations.teamId.");
        }
        this.leaderId = buffer.readDouble();
        if (this.leaderId < -9007199254740990 || this.leaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leaderId + ") on element of AbstractFightTeamInformations.leaderId.");
        }
        this.teamSide = buffer.readByte();
        this.teamTypeId = buffer.readByte();
        if (this.teamTypeId < 0) {
            Logger.error("Forbidden value (" + this.teamTypeId + ") on element of AbstractFightTeamInformations.teamTypeId.");
        }
        this.nbWaves = buffer.readByte();
        if (this.nbWaves < 0) {
            Logger.error("Forbidden value (" + this.nbWaves + ") on element of AbstractFightTeamInformations.nbWaves.");
        }
    }
}

// Generated by Noxus types 
export class FightAllianceTeamInformations extends FightTeamInformations {
    constructor(param1, param2, param3, param4, param5, param6, relation) {
        super(param1, param2, param3, param4, param5, param6);
        this.relation = relation;
        this.protocolId = 439;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.relation);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.relation = buffer.readByte();
        if (this.relation < 0) {
            Logger.error("Forbidden value (" + this.relation + ") on element of FightAllianceTeamInformations.relation.");
        }
    }
}

// Generated by Noxus types 
export class FightCommonInformations {
    constructor(fightId, fightType, fightTeams, fightTeamsPositions, fightTeamsOptions) {
        this.fightId = fightId;
        this.fightType = fightType;
        this.fightTeams = fightTeams;
        this.fightTeamsPositions = fightTeamsPositions;
        this.fightTeamsOptions = fightTeamsOptions;
        this.protocolId = 43;
    }
    serialize(buffer) {
        buffer.writeInt(this.fightId);
        buffer.writeByte(this.fightType);
        buffer.writeShort(this.fightTeams.length);
        var _loc2_ = 0;
        while (_loc2_ < this.fightTeams.length) {
            this.fightTeams[_loc2_].serialize(buffer);
            this.fightTeams[_loc2_].serialize(buffer);
            _loc2_++;
        }
        buffer.writeShort(this.fightTeamsPositions.length);
        var _loc3_ = 0;
        while (_loc3_ < this.fightTeamsPositions.length) {
            if (this.fightTeamsPositions[_loc3_] < 0 || this.fightTeamsPositions[_loc3_] > 559) {
                Logger.error("Forbidden value (" + this.fightTeamsPositions[_loc3_] + ") on element 4 (starting at 1) of fightTeamsPositions.");
            }
            buffer.writeVarShort(this.fightTeamsPositions[_loc3_]);
            _loc3_++;
        }
        buffer.writeShort(this.fightTeamsOptions.length);
        var _loc4_ = 0;
        while (_loc4_ < this.fightTeamsOptions.length) {
            this.fightTeamsOptions[_loc4_].serialize(buffer);
            _loc4_++;
        }
    }
    deserialize(buffer) {
        var _loc8_ = 0;
        var _loc9_ = null;
        var _loc10_ = 0;
        var _loc11_ = null;
        this.fightId = buffer.readInt();
        this.fightType = buffer.readByte();
        if (this.fightType < 0) {
            Logger.error("Forbidden value (" + this.fightType + ") on element of FightCommonInformations.fightType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = buffer.readUnsignedShort();
            _loc9_ = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.fight.FightTeamInformations, _loc8_);
            _loc9_.deserialize(buffer);
            this.fightTeams.push(_loc9_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc10_ = buffer.readVarUhShort();
            if (_loc10_ < 0 || _loc10_ > 559) {
                Logger.error("Forbidden value (" + _loc10_ + ") on elements of fightTeamsPositions.");
            }
            this.fightTeamsPositions.push(_loc10_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc11_ = new Types.FightOptionsInformations();
            _loc11_.deserialize(buffer);
            this.fightTeamsOptions.push(_loc11_);
            _loc7_++;
        }
    }
}

// Generated by Noxus types 
export class FightExternalInformations {
    constructor(fightId, fightType, fightStart, fightSpectatorLocked, fightTeams, fightTeamsOptions) {
        this.fightId = fightId;
        this.fightType = fightType;
        this.fightStart = fightStart;
        this.fightSpectatorLocked = fightSpectatorLocked;
        this.fightTeams = fightTeams;
        this.fightTeamsOptions = fightTeamsOptions;
        this.protocolId = 117;
    }
    serialize(buffer) {
        buffer.writeInt(this.fightId);
        buffer.writeByte(this.fightType);
        if (this.fightStart < 0) {
            Logger.error("Forbidden value (" + this.fightStart + ") on element fightStart.");
        }
        buffer.writeInt(this.fightStart);
        buffer.writeBoolean(this.fightSpectatorLocked);
        var _loc2_ = 0;
        while (_loc2_ < 2) {
            this.fightTeams[_loc2_].serialize(buffer);
            _loc2_++;
        }
        var _loc3_ = 0;
        while (_loc3_ < 2) {
            this.fightTeamsOptions[_loc3_].serialize(buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.fightType = buffer.readByte();
        if (this.fightType < 0) {
            Logger.error("Forbidden value (" + this.fightType + ") on element of FightExternalInformations.fightType.");
        }
        this.fightStart = buffer.readInt();
        if (this.fightStart < 0) {
            Logger.error("Forbidden value (" + this.fightStart + ") on element of FightExternalInformations.fightStart.");
        }
        this.fightSpectatorLocked = buffer.readBoolean();
        var _loc2_ = 0;
        while (_loc2_ < 2) {
            this.fightTeams[_loc2_] = new Types.FightTeamLightInformations();
            this.fightTeams[_loc2_].deserialize(buffer);
            _loc2_++;
        }
        var _loc3_ = 0;
        while (_loc3_ < 2) {
            this.fightTeamsOptions[_loc3_] = new Types.FightOptionsInformations();
            this.fightTeamsOptions[_loc3_].deserialize(buffer);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class FightLoot {
    constructor(objects, kamas) {
        this.objects = objects;
        this.kamas = kamas;
        this.protocolId = 41;
    }
    serialize(buffer) {
        buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            if (this.objects[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.objects[_loc2_] + ") on element 1 (starting at 1) of objects.");
            }
            buffer.writeVarShort(this.objects[_loc2_]);
            _loc2_++;
        }
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        buffer.writeVarInt(this.kamas);
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of objects.");
            }
            this.objects.push(_loc4_);
            _loc3_++;
        }
        this.kamas = buffer.readVarUhInt();
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element of FightLoot.kamas.");
        }
    }
}

// Generated by Noxus types 
export class FightOptionsInformations {
    constructor(isSecret, isRestrictedToPartyOnly, isClosed, isAskingForHelp) {
        this.isSecret = isSecret;
        this.isRestrictedToPartyOnly = isRestrictedToPartyOnly;
        this.isClosed = isClosed;
        this.isAskingForHelp = isAskingForHelp;
        this.protocolId = 20;
    }
    serialize(buffer) {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.isSecret);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.isRestrictedToPartyOnly);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 2, this.isClosed);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 3, this.isAskingForHelp);
        buffer.writeByte(_loc2_);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.isSecret = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.isRestrictedToPartyOnly = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.isClosed = IO.BooleanByteWrapper.getFlag(_loc2_, 2);
        this.isAskingForHelp = IO.BooleanByteWrapper.getFlag(_loc2_, 3);
    }
}

// Generated by Noxus types 
export class FightResultAdditionalData {
    constructor() {
        this.protocolId = 191;
    }
    serialize(buffer) {
    }
    deserialize(buffer) {
    }
}

// Generated by Noxus types 
export class FightResultExperienceData extends FightResultAdditionalData {
    constructor(experience, showExperience, experienceLevelFloor, showExperienceLevelFloor, experienceNextLevelFloor, showExperienceNextLevelFloor, experienceFightDelta, showExperienceFightDelta, experienceForGuild, showExperienceForGuild, experienceForMount, showExperienceForMount, isIncarnationExperience, rerollExperienceMul) {
        super();
        this.experience = experience;
        this.showExperience = showExperience;
        this.experienceLevelFloor = experienceLevelFloor;
        this.showExperienceLevelFloor = showExperienceLevelFloor;
        this.experienceNextLevelFloor = experienceNextLevelFloor;
        this.showExperienceNextLevelFloor = showExperienceNextLevelFloor;
        this.experienceFightDelta = experienceFightDelta;
        this.showExperienceFightDelta = showExperienceFightDelta;
        this.experienceForGuild = experienceForGuild;
        this.showExperienceForGuild = showExperienceForGuild;
        this.experienceForMount = experienceForMount;
        this.showExperienceForMount = showExperienceForMount;
        this.isIncarnationExperience = isIncarnationExperience;
        this.rerollExperienceMul = rerollExperienceMul;
        this.protocolId = 192;
    }
    serialize(buffer) {
        super.serialize(buffer);
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.showExperience);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.showExperienceLevelFloor);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 2, this.showExperienceNextLevelFloor);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 3, this.showExperienceFightDelta);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 4, this.showExperienceForGuild);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 5, this.showExperienceForMount);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 6, this.isIncarnationExperience);
        buffer.writeByte(_loc2_);
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element experience.");
        }
        buffer.writeVarLong(this.experience);
        if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceLevelFloor + ") on element experienceLevelFloor.");
        }
        buffer.writeVarLong(this.experienceLevelFloor);
        if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceNextLevelFloor + ") on element experienceNextLevelFloor.");
        }
        buffer.writeVarLong(this.experienceNextLevelFloor);
        if (this.experienceFightDelta < 0 || this.experienceFightDelta > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceFightDelta + ") on element experienceFightDelta.");
        }
        buffer.writeVarLong(this.experienceFightDelta);
        if (this.experienceForGuild < 0 || this.experienceForGuild > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceForGuild + ") on element experienceForGuild.");
        }
        buffer.writeVarLong(this.experienceForGuild);
        if (this.experienceForMount < 0 || this.experienceForMount > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceForMount + ") on element experienceForMount.");
        }
        buffer.writeVarLong(this.experienceForMount);
        if (this.rerollExperienceMul < 0) {
            Logger.error("Forbidden value (" + this.rerollExperienceMul + ") on element rerollExperienceMul.");
        }
        buffer.writeByte(this.rerollExperienceMul);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readByte();
        this.showExperience = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.showExperienceLevelFloor = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.showExperienceNextLevelFloor = IO.BooleanByteWrapper.getFlag(_loc2_, 2);
        this.showExperienceFightDelta = IO.BooleanByteWrapper.getFlag(_loc2_, 3);
        this.showExperienceForGuild = IO.BooleanByteWrapper.getFlag(_loc2_, 4);
        this.showExperienceForMount = IO.BooleanByteWrapper.getFlag(_loc2_, 5);
        this.isIncarnationExperience = IO.BooleanByteWrapper.getFlag(_loc2_, 6);
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element of FightResultExperienceData.experience.");
        }
        this.experienceLevelFloor = buffer.readVarUhLong();
        if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceLevelFloor + ") on element of FightResultExperienceData.experienceLevelFloor.");
        }
        this.experienceNextLevelFloor = buffer.readVarUhLong();
        if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceNextLevelFloor + ") on element of FightResultExperienceData.experienceNextLevelFloor.");
        }
        this.experienceFightDelta = buffer.readVarUhLong();
        if (this.experienceFightDelta < 0 || this.experienceFightDelta > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceFightDelta + ") on element of FightResultExperienceData.experienceFightDelta.");
        }
        this.experienceForGuild = buffer.readVarUhLong();
        if (this.experienceForGuild < 0 || this.experienceForGuild > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceForGuild + ") on element of FightResultExperienceData.experienceForGuild.");
        }
        this.experienceForMount = buffer.readVarUhLong();
        if (this.experienceForMount < 0 || this.experienceForMount > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceForMount + ") on element of FightResultExperienceData.experienceForMount.");
        }
        this.rerollExperienceMul = buffer.readByte();
        if (this.rerollExperienceMul < 0) {
            Logger.error("Forbidden value (" + this.rerollExperienceMul + ") on element of FightResultExperienceData.rerollExperienceMul.");
        }
    }
}

// Generated by Noxus types 
export class FightResultFighterListEntry extends FightResultListEntry {
    constructor(param1, param2, param3, id, alive) {
        super(param1, param2, param3);
        this.id = id;
        this.alive = alive;
        this.protocolId = 189;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeDouble(this.id);
        buffer.writeBoolean(this.alive);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of FightResultFighterListEntry.id.");
        }
        this.alive = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class FightResultListEntry {
    constructor(outcome, wave, rewards) {
        this.outcome = outcome;
        this.wave = wave;
        this.rewards = rewards;
        this.protocolId = 16;
    }
    serialize(buffer) {
        buffer.writeVarShort(this.outcome);
        if (this.wave < 0) {
            Logger.error("Forbidden value (" + this.wave + ") on element wave.");
        }
        buffer.writeByte(this.wave);
        this.rewards.serialize(buffer);
    }
    deserialize(buffer) {
        this.outcome = buffer.readVarUhShort();
        if (this.outcome < 0) {
            Logger.error("Forbidden value (" + this.outcome + ") on element of FightResultListEntry.outcome.");
        }
        this.wave = buffer.readByte();
        if (this.wave < 0) {
            Logger.error("Forbidden value (" + this.wave + ") on element of FightResultListEntry.wave.");
        }
        this.rewards = new Types.FightLoot();
        this.rewards.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class FightResultMutantListEntry extends FightResultFighterListEntry {
    constructor(param1, param2, param3, param4, param5, level) {
        super(param1, param2, param3, param4, param5);
        this.level = level;
        this.protocolId = 216;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.level < 0) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeVarShort(this.level);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.level = buffer.readVarUhShort();
        if (this.level < 0) {
            Logger.error("Forbidden value (" + this.level + ") on element of FightResultMutantListEntry.level.");
        }
    }
}

// Generated by Noxus types 
export class FightResultPlayerListEntry extends FightResultFighterListEntry {
    constructor(param1, param2, param3, param4, param5, level, additional) {
        super(param1, param2, param3, param4, param5);
        this.level = level;
        this.additional = additional;
        this.protocolId = 24;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.level < 1 || this.level > 206) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
        buffer.writeShort(this.additional.length);
        var _loc2_ = 0;
        while (_loc2_ < this.additional.length) {
            this.additional[_loc2_].serialize(buffer);
            this.additional[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.level = buffer.readUnsignedByte();
        if (this.level < 1 || this.level > 206) {
            Logger.error("Forbidden value (" + this.level + ") on element of FightResultPlayerListEntry.level.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.fight.FightResultAdditionalData, _loc4_);
            _loc5_.deserialize(buffer);
            this.additional.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class FightResultPvpData extends FightResultAdditionalData {
    constructor(grade, minHonorForGrade, maxHonorForGrade, honor, honorDelta) {
        super();
        this.grade = grade;
        this.minHonorForGrade = minHonorForGrade;
        this.maxHonorForGrade = maxHonorForGrade;
        this.honor = honor;
        this.honorDelta = honorDelta;
        this.protocolId = 190;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.grade < 0 || this.grade > 255) {
            Logger.error("Forbidden value (" + this.grade + ") on element grade.");
        }
        buffer.writeByte(this.grade);
        if (this.minHonorForGrade < 0 || this.minHonorForGrade > 20000) {
            Logger.error("Forbidden value (" + this.minHonorForGrade + ") on element minHonorForGrade.");
        }
        buffer.writeVarShort(this.minHonorForGrade);
        if (this.maxHonorForGrade < 0 || this.maxHonorForGrade > 20000) {
            Logger.error("Forbidden value (" + this.maxHonorForGrade + ") on element maxHonorForGrade.");
        }
        buffer.writeVarShort(this.maxHonorForGrade);
        if (this.honor < 0 || this.honor > 20000) {
            Logger.error("Forbidden value (" + this.honor + ") on element honor.");
        }
        buffer.writeVarShort(this.honor);
        buffer.writeVarShort(this.honorDelta);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.grade = buffer.readUnsignedByte();
        if (this.grade < 0 || this.grade > 255) {
            Logger.error("Forbidden value (" + this.grade + ") on element of FightResultPvpData.grade.");
        }
        this.minHonorForGrade = buffer.readVarUhShort();
        if (this.minHonorForGrade < 0 || this.minHonorForGrade > 20000) {
            Logger.error("Forbidden value (" + this.minHonorForGrade + ") on element of FightResultPvpData.minHonorForGrade.");
        }
        this.maxHonorForGrade = buffer.readVarUhShort();
        if (this.maxHonorForGrade < 0 || this.maxHonorForGrade > 20000) {
            Logger.error("Forbidden value (" + this.maxHonorForGrade + ") on element of FightResultPvpData.maxHonorForGrade.");
        }
        this.honor = buffer.readVarUhShort();
        if (this.honor < 0 || this.honor > 20000) {
            Logger.error("Forbidden value (" + this.honor + ") on element of FightResultPvpData.honor.");
        }
        this.honorDelta = buffer.readVarShort();
    }
}

// Generated by Noxus types 
export class FightResultTaxCollectorListEntry extends FightResultFighterListEntry {
    constructor(param1, param2, param3, param4, param5, level, guildInfo, experienceForGuild) {
        super(param1, param2, param3, param4, param5);
        this.level = level;
        this.guildInfo = guildInfo;
        this.experienceForGuild = experienceForGuild;
        this.protocolId = 84;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.level < 1 || this.level > 200) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
        this.guildInfo.serialize(buffer);
        buffer.writeInt(this.experienceForGuild);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.level = buffer.readUnsignedByte();
        if (this.level < 1 || this.level > 200) {
            Logger.error("Forbidden value (" + this.level + ") on element of FightResultTaxCollectorListEntry.level.");
        }
        this.guildInfo = new BasicGuildInformations();
        this.guildInfo.deserialize(buffer);
        this.experienceForGuild = buffer.readInt();
    }
}

// Generated by Noxus types 
export class FightTeamInformations extends AbstractFightTeamInformations {
    constructor(param1, param2, param3, param4, param5, teamMembers) {
        super(param1, param2, param3, param4, param5);
        this.teamMembers = teamMembers;
        this.protocolId = 33;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.teamMembers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.teamMembers.length) {
            this.teamMembers[_loc2_].serialize(buffer);
            this.teamMembers[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.teamMembers.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class FightTeamLightInformations extends AbstractFightTeamInformations {
    constructor(param1, param2, param3, param4, param5, teamMembersCount, meanLevel, hasFriend, hasGuildMember, hasAllianceMember, hasGroupMember, hasMyTaxCollector) {
        super(param1, param2, param3, param4, param5);
        this.teamMembersCount = teamMembersCount;
        this.meanLevel = meanLevel;
        this.hasFriend = hasFriend;
        this.hasGuildMember = hasGuildMember;
        this.hasAllianceMember = hasAllianceMember;
        this.hasGroupMember = hasGroupMember;
        this.hasMyTaxCollector = hasMyTaxCollector;
        this.protocolId = 115;
    }
    serialize(buffer) {
        super.serialize(buffer);
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.hasFriend);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.hasGuildMember);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 2, this.hasAllianceMember);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 3, this.hasGroupMember);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 4, this.hasMyTaxCollector);
        buffer.writeByte(_loc2_);
        if (this.teamMembersCount < 0) {
            Logger.error("Forbidden value (" + this.teamMembersCount + ") on element teamMembersCount.");
        }
        buffer.writeByte(this.teamMembersCount);
        if (this.meanLevel < 0) {
            Logger.error("Forbidden value (" + this.meanLevel + ") on element meanLevel.");
        }
        buffer.writeVarInt(this.meanLevel);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readByte();
        this.hasFriend = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.hasGuildMember = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.hasAllianceMember = IO.BooleanByteWrapper.getFlag(_loc2_, 2);
        this.hasGroupMember = IO.BooleanByteWrapper.getFlag(_loc2_, 3);
        this.hasMyTaxCollector = IO.BooleanByteWrapper.getFlag(_loc2_, 4);
        this.teamMembersCount = buffer.readByte();
        if (this.teamMembersCount < 0) {
            Logger.error("Forbidden value (" + this.teamMembersCount + ") on element of FightTeamLightInformations.teamMembersCount.");
        }
        this.meanLevel = buffer.readVarUhInt();
        if (this.meanLevel < 0) {
            Logger.error("Forbidden value (" + this.meanLevel + ") on element of FightTeamLightInformations.meanLevel.");
        }
    }
}

// Generated by Noxus types 
export class FightTeamMemberCharacterInformations extends FightTeamMemberInformations {
    constructor(param1, name, level) {
        super(param1);
        this.name = name;
        this.level = level;
        this.protocolId = 13;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.name);
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element of FightTeamMemberCharacterInformations.level.");
        }
    }
}

// Generated by Noxus types 
export class FightTeamMemberCompanionInformations extends FightTeamMemberInformations {
    constructor(param1, companionId, level, masterId) {
        super(param1);
        this.companionId = companionId;
        this.level = level;
        this.masterId = masterId;
        this.protocolId = 451;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.companionId < 0) {
            Logger.error("Forbidden value (" + this.companionId + ") on element companionId.");
        }
        buffer.writeByte(this.companionId);
        if (this.level < 1 || this.level > 200) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.masterId + ") on element masterId.");
        }
        buffer.writeDouble(this.masterId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.companionId = buffer.readByte();
        if (this.companionId < 0) {
            Logger.error("Forbidden value (" + this.companionId + ") on element of FightTeamMemberCompanionInformations.companionId.");
        }
        this.level = buffer.readUnsignedByte();
        if (this.level < 1 || this.level > 200) {
            Logger.error("Forbidden value (" + this.level + ") on element of FightTeamMemberCompanionInformations.level.");
        }
        this.masterId = buffer.readDouble();
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.masterId + ") on element of FightTeamMemberCompanionInformations.masterId.");
        }
    }
}

// Generated by Noxus types 
export class FightTeamMemberInformations {
    constructor(id) {
        this.id = id;
        this.protocolId = 44;
    }
    serialize(buffer) {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeDouble(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of FightTeamMemberInformations.id.");
        }
    }
}

// Generated by Noxus types 
export class FightTeamMemberMonsterInformations extends FightTeamMemberInformations {
    constructor(param1, monsterId, grade) {
        super(param1);
        this.monsterId = monsterId;
        this.grade = grade;
        this.protocolId = 6;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeInt(this.monsterId);
        if (this.grade < 0) {
            Logger.error("Forbidden value (" + this.grade + ") on element grade.");
        }
        buffer.writeByte(this.grade);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.monsterId = buffer.readInt();
        this.grade = buffer.readByte();
        if (this.grade < 0) {
            Logger.error("Forbidden value (" + this.grade + ") on element of FightTeamMemberMonsterInformations.grade.");
        }
    }
}

// Generated by Noxus types 
export class FightTeamMemberTaxCollectorInformations extends FightTeamMemberInformations {
    constructor(param1, firstNameId, lastNameId, level, guildId, uid) {
        super(param1);
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.level = level;
        this.guildId = guildId;
        this.uid = uid;
        this.protocolId = 177;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        buffer.writeVarShort(this.lastNameId);
        if (this.level < 1 || this.level > 200) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        buffer.writeVarInt(this.guildId);
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element uid.");
        }
        buffer.writeVarInt(this.uid);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element of FightTeamMemberTaxCollectorInformations.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element of FightTeamMemberTaxCollectorInformations.lastNameId.");
        }
        this.level = buffer.readUnsignedByte();
        if (this.level < 1 || this.level > 200) {
            Logger.error("Forbidden value (" + this.level + ") on element of FightTeamMemberTaxCollectorInformations.level.");
        }
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element of FightTeamMemberTaxCollectorInformations.guildId.");
        }
        this.uid = buffer.readVarUhInt();
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element of FightTeamMemberTaxCollectorInformations.uid.");
        }
    }
}

// Generated by Noxus types 
export class FightTeamMemberWithAllianceCharacterInformations extends FightTeamMemberCharacterInformations {
    constructor(param1, param2, param3, allianceInfos) {
        super(param1, param2, param3);
        this.allianceInfos = allianceInfos;
        this.protocolId = 426;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.allianceInfos.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceInfos = new BasicAllianceInformations();
        this.allianceInfos.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class GameFightAIInformations extends GameFightFighterInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8) {
        super(param1, param2, param3, param4, param5, param6, param7, param8);
        this.protocolId = 151;
    }
    serialize(buffer) {
        super.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class GameFightCharacterInformations extends GameFightFighterNamedInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, level, alignmentInfos, breed, sex) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
        this.level = level;
        this.alignmentInfos = alignmentInfos;
        this.breed = breed;
        this.sex = sex;
        this.protocolId = 46;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
        this.alignmentInfos.serialize(buffer);
        buffer.writeByte(this.breed);
        buffer.writeBoolean(this.sex);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element of GameFightCharacterInformations.level.");
        }
        this.alignmentInfos = new ActorAlignmentInformations();
        this.alignmentInfos.deserialize(buffer);
        this.breed = buffer.readByte();
        this.sex = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class GameFightCompanionInformations extends GameFightFighterInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, companionGenericId, level, masterId) {
        super(param1, param2, param3, param4, param5, param6, param7, param8);
        this.companionGenericId = companionGenericId;
        this.level = level;
        this.masterId = masterId;
        this.protocolId = 450;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.companionGenericId < 0) {
            Logger.error("Forbidden value (" + this.companionGenericId + ") on element companionGenericId.");
        }
        buffer.writeByte(this.companionGenericId);
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.masterId + ") on element masterId.");
        }
        buffer.writeDouble(this.masterId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.companionGenericId = buffer.readByte();
        if (this.companionGenericId < 0) {
            Logger.error("Forbidden value (" + this.companionGenericId + ") on element of GameFightCompanionInformations.companionGenericId.");
        }
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element of GameFightCompanionInformations.level.");
        }
        this.masterId = buffer.readDouble();
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.masterId + ") on element of GameFightCompanionInformations.masterId.");
        }
    }
}

// Generated by Noxus types 
export class GameFightFighterCompanionLightInformations extends GameFightFighterLightInformations {
    constructor(param1, param2, param3, param4, param5, param6, companionId, masterId) {
        super(param1, param2, param3, param4, param5, param6);
        this.companionId = companionId;
        this.masterId = masterId;
        this.protocolId = 454;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.companionId < 0) {
            Logger.error("Forbidden value (" + this.companionId + ") on element companionId.");
        }
        buffer.writeByte(this.companionId);
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.masterId + ") on element masterId.");
        }
        buffer.writeDouble(this.masterId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.companionId = buffer.readByte();
        if (this.companionId < 0) {
            Logger.error("Forbidden value (" + this.companionId + ") on element of GameFightFighterCompanionLightInformations.companionId.");
        }
        this.masterId = buffer.readDouble();
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.masterId + ") on element of GameFightFighterCompanionLightInformations.masterId.");
        }
    }
}

// Generated by Noxus types 
export class GameFightFighterInformations extends GameContextActorInformations {
    constructor(param1, param2, param3, teamId, wave, alive, stats, previousPositions) {
        super(param1, param2, param3);
        this.teamId = teamId;
        this.wave = wave;
        this.alive = alive;
        this.stats = stats;
        this.previousPositions = previousPositions;
        this.protocolId = 143;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.teamId);
        if (this.wave < 0) {
            Logger.error("Forbidden value (" + this.wave + ") on element wave.");
        }
        buffer.writeByte(this.wave);
        buffer.writeBoolean(this.alive);
        buffer.writeShort(this.stats.protocolId);
        this.stats.serialize(buffer);
        buffer.writeShort(this.previousPositions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.previousPositions.length) {
            if (this.previousPositions[_loc2_] < 0 || this.previousPositions[_loc2_] > 559) {
                Logger.error("Forbidden value (" + this.previousPositions[_loc2_] + ") on element 5 (starting at 1) of previousPositions.");
            }
            buffer.writeVarShort(this.previousPositions[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc5_ = 0;
        super.deserialize(buffer);
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            Logger.error("Forbidden value (" + this.teamId + ") on element of GameFightFighterInformations.teamId.");
        }
        this.wave = buffer.readByte();
        if (this.wave < 0) {
            Logger.error("Forbidden value (" + this.wave + ") on element of GameFightFighterInformations.wave.");
        }
        this.alive = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        this.stats = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.fight.GameFightMinimalStats, _loc2_);
        this.stats.deserialize(buffer);
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc5_ = buffer.readVarUhShort();
            if (_loc5_ < 0 || _loc5_ > 559) {
                Logger.error("Forbidden value (" + _loc5_ + ") on elements of previousPositions.");
            }
            this.previousPositions.push(_loc5_);
            _loc4_++;
        }
    }
}

// Generated by Noxus types 
export class GameFightFighterLightInformations {
    constructor(id, wave, level, breed, sex, alive) {
        this.id = id;
        this.wave = wave;
        this.level = level;
        this.breed = breed;
        this.sex = sex;
        this.alive = alive;
        this.protocolId = 413;
    }
    serialize(buffer) {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.sex);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.alive);
        buffer.writeByte(_loc2_);
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeDouble(this.id);
        if (this.wave < 0) {
            Logger.error("Forbidden value (" + this.wave + ") on element wave.");
        }
        buffer.writeByte(this.wave);
        if (this.level < 0) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeVarShort(this.level);
        buffer.writeByte(this.breed);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.sex = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.alive = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of GameFightFighterLightInformations.id.");
        }
        this.wave = buffer.readByte();
        if (this.wave < 0) {
            Logger.error("Forbidden value (" + this.wave + ") on element of GameFightFighterLightInformations.wave.");
        }
        this.level = buffer.readVarUhShort();
        if (this.level < 0) {
            Logger.error("Forbidden value (" + this.level + ") on element of GameFightFighterLightInformations.level.");
        }
        this.breed = buffer.readByte();
    }
}

// Generated by Noxus types 
export class GameFightFighterMonsterLightInformations extends GameFightFighterLightInformations {
    constructor(param1, param2, param3, param4, param5, param6, creatureGenericId) {
        super(param1, param2, param3, param4, param5, param6);
        this.creatureGenericId = creatureGenericId;
        this.protocolId = 455;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.creatureGenericId < 0) {
            Logger.error("Forbidden value (" + this.creatureGenericId + ") on element creatureGenericId.");
        }
        buffer.writeVarShort(this.creatureGenericId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.creatureGenericId = buffer.readVarUhShort();
        if (this.creatureGenericId < 0) {
            Logger.error("Forbidden value (" + this.creatureGenericId + ") on element of GameFightFighterMonsterLightInformations.creatureGenericId.");
        }
    }
}

// Generated by Noxus types 
export class GameFightFighterNamedInformations extends GameFightFighterInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, name, status) {
        super(param1, param2, param3, param4, param5, param6, param7, param8);
        this.name = name;
        this.status = status;
        this.protocolId = 158;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.name);
        this.status.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
        this.status = new PlayerStatus();
        this.status.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class GameFightFighterNamedLightInformations extends GameFightFighterLightInformations {
    constructor(param1, param2, param3, param4, param5, param6, name) {
        super(param1, param2, param3, param4, param5, param6);
        this.name = name;
        this.protocolId = 456;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.name);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class GameFightFighterTaxCollectorLightInformations extends GameFightFighterLightInformations {
    constructor(param1, param2, param3, param4, param5, param6, firstNameId, lastNameId) {
        super(param1, param2, param3, param4, param5, param6);
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.protocolId = 457;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        buffer.writeVarShort(this.lastNameId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element of GameFightFighterTaxCollectorLightInformations.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element of GameFightFighterTaxCollectorLightInformations.lastNameId.");
        }
    }
}

// Generated by Noxus types 
export class GameFightMinimalStats {
    constructor(lifePoints, maxLifePoints, baseMaxLifePoints, permanentDamagePercent, shieldPoints, actionPoints, maxActionPoints, movementPoints, maxMovementPoints, summoner, summoned, neutralElementResistPercent, earthElementResistPercent, waterElementResistPercent, airElementResistPercent, fireElementResistPercent, neutralElementReduction, earthElementReduction, waterElementReduction, airElementReduction, fireElementReduction, criticalDamageFixedResist, pushDamageFixedResist, pvpNeutralElementResistPercent, pvpEarthElementResistPercent, pvpWaterElementResistPercent, pvpAirElementResistPercent, pvpFireElementResistPercent, pvpNeutralElementReduction, pvpEarthElementReduction, pvpWaterElementReduction, pvpAirElementReduction, pvpFireElementReduction, dodgePALostProbability, dodgePMLostProbability, tackleBlock, tackleEvade, fixedDamageReflection, invisibilityState) {
        this.lifePoints = lifePoints;
        this.maxLifePoints = maxLifePoints;
        this.baseMaxLifePoints = baseMaxLifePoints;
        this.permanentDamagePercent = permanentDamagePercent;
        this.shieldPoints = shieldPoints;
        this.actionPoints = actionPoints;
        this.maxActionPoints = maxActionPoints;
        this.movementPoints = movementPoints;
        this.maxMovementPoints = maxMovementPoints;
        this.summoner = summoner;
        this.summoned = summoned;
        this.neutralElementResistPercent = neutralElementResistPercent;
        this.earthElementResistPercent = earthElementResistPercent;
        this.waterElementResistPercent = waterElementResistPercent;
        this.airElementResistPercent = airElementResistPercent;
        this.fireElementResistPercent = fireElementResistPercent;
        this.neutralElementReduction = neutralElementReduction;
        this.earthElementReduction = earthElementReduction;
        this.waterElementReduction = waterElementReduction;
        this.airElementReduction = airElementReduction;
        this.fireElementReduction = fireElementReduction;
        this.criticalDamageFixedResist = criticalDamageFixedResist;
        this.pushDamageFixedResist = pushDamageFixedResist;
        this.pvpNeutralElementResistPercent = pvpNeutralElementResistPercent;
        this.pvpEarthElementResistPercent = pvpEarthElementResistPercent;
        this.pvpWaterElementResistPercent = pvpWaterElementResistPercent;
        this.pvpAirElementResistPercent = pvpAirElementResistPercent;
        this.pvpFireElementResistPercent = pvpFireElementResistPercent;
        this.pvpNeutralElementReduction = pvpNeutralElementReduction;
        this.pvpEarthElementReduction = pvpEarthElementReduction;
        this.pvpWaterElementReduction = pvpWaterElementReduction;
        this.pvpAirElementReduction = pvpAirElementReduction;
        this.pvpFireElementReduction = pvpFireElementReduction;
        this.dodgePALostProbability = dodgePALostProbability;
        this.dodgePMLostProbability = dodgePMLostProbability;
        this.tackleBlock = tackleBlock;
        this.tackleEvade = tackleEvade;
        this.fixedDamageReflection = fixedDamageReflection;
        this.invisibilityState = invisibilityState;
        this.protocolId = 31;
    }
    serialize(buffer) {
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        buffer.writeVarInt(this.maxLifePoints);
        if (this.baseMaxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.baseMaxLifePoints + ") on element baseMaxLifePoints.");
        }
        buffer.writeVarInt(this.baseMaxLifePoints);
        if (this.permanentDamagePercent < 0) {
            Logger.error("Forbidden value (" + this.permanentDamagePercent + ") on element permanentDamagePercent.");
        }
        buffer.writeVarInt(this.permanentDamagePercent);
        if (this.shieldPoints < 0) {
            Logger.error("Forbidden value (" + this.shieldPoints + ") on element shieldPoints.");
        }
        buffer.writeVarInt(this.shieldPoints);
        buffer.writeVarShort(this.actionPoints);
        buffer.writeVarShort(this.maxActionPoints);
        buffer.writeVarShort(this.movementPoints);
        buffer.writeVarShort(this.maxMovementPoints);
        if (this.summoner < -9007199254740990 || this.summoner > 9007199254740990) {
            Logger.error("Forbidden value (" + this.summoner + ") on element summoner.");
        }
        buffer.writeDouble(this.summoner);
        buffer.writeBoolean(this.summoned);
        buffer.writeVarShort(this.neutralElementResistPercent);
        buffer.writeVarShort(this.earthElementResistPercent);
        buffer.writeVarShort(this.waterElementResistPercent);
        buffer.writeVarShort(this.airElementResistPercent);
        buffer.writeVarShort(this.fireElementResistPercent);
        buffer.writeVarShort(this.neutralElementReduction);
        buffer.writeVarShort(this.earthElementReduction);
        buffer.writeVarShort(this.waterElementReduction);
        buffer.writeVarShort(this.airElementReduction);
        buffer.writeVarShort(this.fireElementReduction);
        buffer.writeVarShort(this.criticalDamageFixedResist);
        buffer.writeVarShort(this.pushDamageFixedResist);
        buffer.writeVarShort(this.pvpNeutralElementResistPercent);
        buffer.writeVarShort(this.pvpEarthElementResistPercent);
        buffer.writeVarShort(this.pvpWaterElementResistPercent);
        buffer.writeVarShort(this.pvpAirElementResistPercent);
        buffer.writeVarShort(this.pvpFireElementResistPercent);
        buffer.writeVarShort(this.pvpNeutralElementReduction);
        buffer.writeVarShort(this.pvpEarthElementReduction);
        buffer.writeVarShort(this.pvpWaterElementReduction);
        buffer.writeVarShort(this.pvpAirElementReduction);
        buffer.writeVarShort(this.pvpFireElementReduction);
        if (this.dodgePALostProbability < 0) {
            Logger.error("Forbidden value (" + this.dodgePALostProbability + ") on element dodgePALostProbability.");
        }
        buffer.writeVarShort(this.dodgePALostProbability);
        if (this.dodgePMLostProbability < 0) {
            Logger.error("Forbidden value (" + this.dodgePMLostProbability + ") on element dodgePMLostProbability.");
        }
        buffer.writeVarShort(this.dodgePMLostProbability);
        buffer.writeVarShort(this.tackleBlock);
        buffer.writeVarShort(this.tackleEvade);
        buffer.writeVarShort(this.fixedDamageReflection);
        buffer.writeByte(this.invisibilityState);
    }
    deserialize(buffer) {
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element of GameFightMinimalStats.lifePoints.");
        }
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element of GameFightMinimalStats.maxLifePoints.");
        }
        this.baseMaxLifePoints = buffer.readVarUhInt();
        if (this.baseMaxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.baseMaxLifePoints + ") on element of GameFightMinimalStats.baseMaxLifePoints.");
        }
        this.permanentDamagePercent = buffer.readVarUhInt();
        if (this.permanentDamagePercent < 0) {
            Logger.error("Forbidden value (" + this.permanentDamagePercent + ") on element of GameFightMinimalStats.permanentDamagePercent.");
        }
        this.shieldPoints = buffer.readVarUhInt();
        if (this.shieldPoints < 0) {
            Logger.error("Forbidden value (" + this.shieldPoints + ") on element of GameFightMinimalStats.shieldPoints.");
        }
        this.actionPoints = buffer.readVarShort();
        this.maxActionPoints = buffer.readVarShort();
        this.movementPoints = buffer.readVarShort();
        this.maxMovementPoints = buffer.readVarShort();
        this.summoner = buffer.readDouble();
        if (this.summoner < -9007199254740990 || this.summoner > 9007199254740990) {
            Logger.error("Forbidden value (" + this.summoner + ") on element of GameFightMinimalStats.summoner.");
        }
        this.summoned = buffer.readBoolean();
        this.neutralElementResistPercent = buffer.readVarShort();
        this.earthElementResistPercent = buffer.readVarShort();
        this.waterElementResistPercent = buffer.readVarShort();
        this.airElementResistPercent = buffer.readVarShort();
        this.fireElementResistPercent = buffer.readVarShort();
        this.neutralElementReduction = buffer.readVarShort();
        this.earthElementReduction = buffer.readVarShort();
        this.waterElementReduction = buffer.readVarShort();
        this.airElementReduction = buffer.readVarShort();
        this.fireElementReduction = buffer.readVarShort();
        this.criticalDamageFixedResist = buffer.readVarShort();
        this.pushDamageFixedResist = buffer.readVarShort();
        this.pvpNeutralElementResistPercent = buffer.readVarShort();
        this.pvpEarthElementResistPercent = buffer.readVarShort();
        this.pvpWaterElementResistPercent = buffer.readVarShort();
        this.pvpAirElementResistPercent = buffer.readVarShort();
        this.pvpFireElementResistPercent = buffer.readVarShort();
        this.pvpNeutralElementReduction = buffer.readVarShort();
        this.pvpEarthElementReduction = buffer.readVarShort();
        this.pvpWaterElementReduction = buffer.readVarShort();
        this.pvpAirElementReduction = buffer.readVarShort();
        this.pvpFireElementReduction = buffer.readVarShort();
        this.dodgePALostProbability = buffer.readVarUhShort();
        if (this.dodgePALostProbability < 0) {
            Logger.error("Forbidden value (" + this.dodgePALostProbability + ") on element of GameFightMinimalStats.dodgePALostProbability.");
        }
        this.dodgePMLostProbability = buffer.readVarUhShort();
        if (this.dodgePMLostProbability < 0) {
            Logger.error("Forbidden value (" + this.dodgePMLostProbability + ") on element of GameFightMinimalStats.dodgePMLostProbability.");
        }
        this.tackleBlock = buffer.readVarShort();
        this.tackleEvade = buffer.readVarShort();
        this.fixedDamageReflection = buffer.readVarShort();
        this.invisibilityState = buffer.readByte();
        if (this.invisibilityState < 0) {
            Logger.error("Forbidden value (" + this.invisibilityState + ") on element of GameFightMinimalStats.invisibilityState.");
        }
    }
}

// Generated by Noxus types 
export class GameFightMinimalStatsPreparation extends GameFightMinimalStats {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39, initiative) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23, param24, param25, param26, param27, param28, param29, param30, param31, param32, param33, param34, param35, param36, param37, param38, param39);
        this.initiative = initiative;
        this.protocolId = 360;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.initiative < 0) {
            Logger.error("Forbidden value (" + this.initiative + ") on element initiative.");
        }
        buffer.writeVarInt(this.initiative);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.initiative = buffer.readVarUhInt();
        if (this.initiative < 0) {
            Logger.error("Forbidden value (" + this.initiative + ") on element of GameFightMinimalStatsPreparation.initiative.");
        }
    }
}

// Generated by Noxus types 
export class GameFightMonsterInformations extends GameFightAIInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, creatureGenericId, creatureGrade) {
        super(param1, param2, param3, param4, param5, param6, param7, param8);
        this.creatureGenericId = creatureGenericId;
        this.creatureGrade = creatureGrade;
        this.protocolId = 29;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.creatureGenericId < 0) {
            Logger.error("Forbidden value (" + this.creatureGenericId + ") on element creatureGenericId.");
        }
        buffer.writeVarShort(this.creatureGenericId);
        if (this.creatureGrade < 0) {
            Logger.error("Forbidden value (" + this.creatureGrade + ") on element creatureGrade.");
        }
        buffer.writeByte(this.creatureGrade);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.creatureGenericId = buffer.readVarUhShort();
        if (this.creatureGenericId < 0) {
            Logger.error("Forbidden value (" + this.creatureGenericId + ") on element of GameFightMonsterInformations.creatureGenericId.");
        }
        this.creatureGrade = buffer.readByte();
        if (this.creatureGrade < 0) {
            Logger.error("Forbidden value (" + this.creatureGrade + ") on element of GameFightMonsterInformations.creatureGrade.");
        }
    }
}

// Generated by Noxus types 
export class GameFightMonsterWithAlignmentInformations extends GameFightMonsterInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, alignmentInfos) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
        this.alignmentInfos = alignmentInfos;
        this.protocolId = 203;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.alignmentInfos.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.alignmentInfos = new ActorAlignmentInformations();
        this.alignmentInfos.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class GameFightMutantInformations extends GameFightFighterNamedInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, powerLevel) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
        this.powerLevel = powerLevel;
        this.protocolId = 50;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.powerLevel < 0) {
            Logger.error("Forbidden value (" + this.powerLevel + ") on element powerLevel.");
        }
        buffer.writeByte(this.powerLevel);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.powerLevel = buffer.readByte();
        if (this.powerLevel < 0) {
            Logger.error("Forbidden value (" + this.powerLevel + ") on element of GameFightMutantInformations.powerLevel.");
        }
    }
}

// Generated by Noxus types 
export class GameFightResumeSlaveInfo {
    constructor(slaveId, spellCooldowns, summonCount, bombCount) {
        this.slaveId = slaveId;
        this.spellCooldowns = spellCooldowns;
        this.summonCount = summonCount;
        this.bombCount = bombCount;
        this.protocolId = 364;
    }
    serialize(buffer) {
        if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.slaveId + ") on element slaveId.");
        }
        buffer.writeDouble(this.slaveId);
        buffer.writeShort(this.spellCooldowns.length);
        var _loc2_ = 0;
        while (_loc2_ < this.spellCooldowns.length) {
            this.spellCooldowns[_loc2_].serialize(buffer);
            _loc2_++;
        }
        if (this.summonCount < 0) {
            Logger.error("Forbidden value (" + this.summonCount + ") on element summonCount.");
        }
        buffer.writeByte(this.summonCount);
        if (this.bombCount < 0) {
            Logger.error("Forbidden value (" + this.bombCount + ") on element bombCount.");
        }
        buffer.writeByte(this.bombCount);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.slaveId = buffer.readDouble();
        if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.slaveId + ") on element of GameFightResumeSlaveInfo.slaveId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new Types.GameFightSpellCooldown();
            _loc4_.deserialize(buffer);
            this.spellCooldowns.push(_loc4_);
            _loc3_++;
        }
        this.summonCount = buffer.readByte();
        if (this.summonCount < 0) {
            Logger.error("Forbidden value (" + this.summonCount + ") on element of GameFightResumeSlaveInfo.summonCount.");
        }
        this.bombCount = buffer.readByte();
        if (this.bombCount < 0) {
            Logger.error("Forbidden value (" + this.bombCount + ") on element of GameFightResumeSlaveInfo.bombCount.");
        }
    }
}

// Generated by Noxus types 
export class GameFightSpellCooldown {
    constructor(spellId, cooldown) {
        this.spellId = spellId;
        this.cooldown = cooldown;
        this.protocolId = 205;
    }
    serialize(buffer) {
        buffer.writeInt(this.spellId);
        if (this.cooldown < 0) {
            Logger.error("Forbidden value (" + this.cooldown + ") on element cooldown.");
        }
        buffer.writeByte(this.cooldown);
    }
    deserialize(buffer) {
        this.spellId = buffer.readInt();
        this.cooldown = buffer.readByte();
        if (this.cooldown < 0) {
            Logger.error("Forbidden value (" + this.cooldown + ") on element of GameFightSpellCooldown.cooldown.");
        }
    }
}

// Generated by Noxus types 
export class GameFightTaxCollectorInformations extends GameFightAIInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, firstNameId, lastNameId, level) {
        super(param1, param2, param3, param4, param5, param6, param7, param8);
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.level = level;
        this.protocolId = 48;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        buffer.writeVarShort(this.lastNameId);
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element of GameFightTaxCollectorInformations.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element of GameFightTaxCollectorInformations.lastNameId.");
        }
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element of GameFightTaxCollectorInformations.level.");
        }
    }
}

// Generated by Noxus types 
export class AllianceInformations extends BasicNamedAllianceInformations {
    constructor(param1, param2, param3, allianceEmblem) {
        super(param1, param2, param3);
        this.allianceEmblem = allianceEmblem;
        this.protocolId = 417;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.allianceEmblem.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceEmblem = new GuildEmblem();
        this.allianceEmblem.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class AlternativeMonstersInGroupLightInformations {
    constructor(playerCount, monsters) {
        this.playerCount = playerCount;
        this.monsters = monsters;
        this.protocolId = 394;
    }
    serialize(buffer) {
        buffer.writeInt(this.playerCount);
        buffer.writeShort(this.monsters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.monsters.length) {
            this.monsters[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.playerCount = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new Types.MonsterInGroupLightInformations();
            _loc4_.deserialize(buffer);
            this.monsters.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class AtlasPointsInformations {
    constructor(type, coords) {
        this.type = type;
        this.coords = coords;
        this.protocolId = 175;
    }
    serialize(buffer) {
        buffer.writeByte(this.type);
        buffer.writeShort(this.coords.length);
        var _loc2_ = 0;
        while (_loc2_ < this.coords.length) {
            this.coords[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of AtlasPointsInformations.type.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MapCoordinatesExtended();
            _loc4_.deserialize(buffer);
            this.coords.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class BasicAllianceInformations extends AbstractSocialGroupInfos {
    constructor(allianceId, allianceTag) {
        super();
        this.allianceId = allianceId;
        this.allianceTag = allianceTag;
        this.protocolId = 419;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        buffer.writeVarInt(this.allianceId);
        buffer.writeUTF(this.allianceTag);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element of BasicAllianceInformations.allianceId.");
        }
        this.allianceTag = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class BasicGuildInformations extends AbstractSocialGroupInfos {
    constructor(guildId, guildName, guildLevel) {
        super();
        this.guildId = guildId;
        this.guildName = guildName;
        this.guildLevel = guildLevel;
        this.protocolId = 365;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        buffer.writeVarInt(this.guildId);
        buffer.writeUTF(this.guildName);
        if (this.guildLevel < 0 || this.guildLevel > 200) {
            Logger.error("Forbidden value (" + this.guildLevel + ") on element guildLevel.");
        }
        buffer.writeByte(this.guildLevel);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element of BasicGuildInformations.guildId.");
        }
        this.guildName = buffer.readUTF();
        this.guildLevel = buffer.readUnsignedByte();
        if (this.guildLevel < 0 || this.guildLevel > 200) {
            Logger.error("Forbidden value (" + this.guildLevel + ") on element of BasicGuildInformations.guildLevel.");
        }
    }
}

// Generated by Noxus types 
export class BasicNamedAllianceInformations extends BasicAllianceInformations {
    constructor(param1, param2, allianceName) {
        super(param1, param2);
        this.allianceName = allianceName;
        this.protocolId = 418;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.allianceName);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceName = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class GameRolePlayActorInformations extends GameContextActorInformations {
    constructor(param1, param2, param3) {
        super(param1, param2, param3);
        this.protocolId = 141;
    }
    serialize(buffer) {
        super.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class GameRolePlayCharacterInformations extends GameRolePlayHumanoidInformations {
    constructor(param1, param2, param3, param4, param5, param6, alignmentInfos) {
        super(param1, param2, param3, param4, param5, param6);
        this.alignmentInfos = alignmentInfos;
        this.protocolId = 36;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.alignmentInfos.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.alignmentInfos = new ActorAlignmentInformations();
        this.alignmentInfos.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class GameRolePlayGroupMonsterInformations extends GameRolePlayActorInformations {
    constructor(param1, param2, param3, staticInfos, creationTime, ageBonusRate, lootShare, alignmentSide, keyRingBonus, hasHardcoreDrop, hasAVARewardToken) {
        super(param1, param2, param3);
        this.staticInfos = staticInfos;
        this.creationTime = creationTime;
        this.ageBonusRate = ageBonusRate;
        this.lootShare = lootShare;
        this.alignmentSide = alignmentSide;
        this.keyRingBonus = keyRingBonus;
        this.hasHardcoreDrop = hasHardcoreDrop;
        this.hasAVARewardToken = hasAVARewardToken;
        this.protocolId = 160;
    }
    serialize(buffer) {
        super.serialize(buffer);
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.keyRingBonus);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.hasHardcoreDrop);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 2, this.hasAVARewardToken);
        buffer.writeByte(_loc2_);
        buffer.writeShort(this.staticInfos.protocolId);
        this.staticInfos.serialize(buffer);
        if (this.creationTime < 0 || this.creationTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.creationTime + ") on element creationTime.");
        }
        buffer.writeDouble(this.creationTime);
        if (this.ageBonusRate < 0) {
            Logger.error("Forbidden value (" + this.ageBonusRate + ") on element ageBonusRate.");
        }
        buffer.writeInt(this.ageBonusRate);
        if (this.lootShare < -1 || this.lootShare > 8) {
            Logger.error("Forbidden value (" + this.lootShare + ") on element lootShare.");
        }
        buffer.writeByte(this.lootShare);
        buffer.writeByte(this.alignmentSide);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readByte();
        this.keyRingBonus = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.hasHardcoreDrop = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.hasAVARewardToken = IO.BooleanByteWrapper.getFlag(_loc2_, 2);
        var _loc3_ = buffer.readUnsignedShort();
        this.staticInfos = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.roleplay.GroupMonsterStaticInformations, _loc3_);
        this.staticInfos.deserialize(buffer);
        this.creationTime = buffer.readDouble();
        if (this.creationTime < 0 || this.creationTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.creationTime + ") on element of GameRolePlayGroupMonsterInformations.creationTime.");
        }
        this.ageBonusRate = buffer.readInt();
        if (this.ageBonusRate < 0) {
            Logger.error("Forbidden value (" + this.ageBonusRate + ") on element of GameRolePlayGroupMonsterInformations.ageBonusRate.");
        }
        this.lootShare = buffer.readByte();
        if (this.lootShare < -1 || this.lootShare > 8) {
            Logger.error("Forbidden value (" + this.lootShare + ") on element of GameRolePlayGroupMonsterInformations.lootShare.");
        }
        this.alignmentSide = buffer.readByte();
    }
}

// Generated by Noxus types 
export class GameRolePlayGroupMonsterWaveInformations extends GameRolePlayGroupMonsterInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, nbWaves, alternatives) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
        this.nbWaves = nbWaves;
        this.alternatives = alternatives;
        this.protocolId = 464;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.nbWaves < 0) {
            Logger.error("Forbidden value (" + this.nbWaves + ") on element nbWaves.");
        }
        buffer.writeByte(this.nbWaves);
        buffer.writeShort(this.alternatives.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alternatives.length) {
            this.alternatives[_loc2_].serialize(buffer);
            this.alternatives[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.nbWaves = buffer.readByte();
        if (this.nbWaves < 0) {
            Logger.error("Forbidden value (" + this.nbWaves + ") on element of GameRolePlayGroupMonsterWaveInformations.nbWaves.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.roleplay.GroupMonsterStaticInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.alternatives.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class GameRolePlayHumanoidInformations extends GameRolePlayNamedActorInformations {
    constructor(param1, param2, param3, param4, humanoidInfo, accountId) {
        super(param1, param2, param3, param4);
        this.humanoidInfo = humanoidInfo;
        this.accountId = accountId;
        this.protocolId = 159;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.humanoidInfo.protocolId);
        this.humanoidInfo.serialize(buffer);
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        buffer.writeInt(this.accountId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.humanoidInfo = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.roleplay.HumanInformations, _loc2_);
        this.humanoidInfo.deserialize(buffer);
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of GameRolePlayHumanoidInformations.accountId.");
        }
    }
}

// Generated by Noxus types 
export class GameRolePlayMerchantInformations extends GameRolePlayNamedActorInformations {
    constructor(param1, param2, param3, param4, sellType, options) {
        super(param1, param2, param3, param4);
        this.sellType = sellType;
        this.options = options;
        this.protocolId = 129;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.sellType < 0) {
            Logger.error("Forbidden value (" + this.sellType + ") on element sellType.");
        }
        buffer.writeByte(this.sellType);
        buffer.writeShort(this.options.length);
        var _loc2_ = 0;
        while (_loc2_ < this.options.length) {
            this.options[_loc2_].serialize(buffer);
            this.options[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.sellType = buffer.readByte();
        if (this.sellType < 0) {
            Logger.error("Forbidden value (" + this.sellType + ") on element of GameRolePlayMerchantInformations.sellType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.roleplay.HumanOption, _loc4_);
            _loc5_.deserialize(buffer);
            this.options.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class GameRolePlayMountInformations extends GameRolePlayNamedActorInformations {
    constructor(param1, param2, param3, param4, ownerName, level) {
        super(param1, param2, param3, param4);
        this.ownerName = ownerName;
        this.level = level;
        this.protocolId = 180;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.ownerName);
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.ownerName = buffer.readUTF();
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element of GameRolePlayMountInformations.level.");
        }
    }
}

// Generated by Noxus types 
export class GameRolePlayMutantInformations extends GameRolePlayHumanoidInformations {
    constructor(param1, param2, param3, param4, param5, param6, monsterId, powerLevel) {
        super(param1, param2, param3, param4, param5, param6);
        this.monsterId = monsterId;
        this.powerLevel = powerLevel;
        this.protocolId = 3;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.monsterId < 0) {
            Logger.error("Forbidden value (" + this.monsterId + ") on element monsterId.");
        }
        buffer.writeVarShort(this.monsterId);
        buffer.writeByte(this.powerLevel);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.monsterId = buffer.readVarUhShort();
        if (this.monsterId < 0) {
            Logger.error("Forbidden value (" + this.monsterId + ") on element of GameRolePlayMutantInformations.monsterId.");
        }
        this.powerLevel = buffer.readByte();
    }
}

// Generated by Noxus types 
export class GameRolePlayNamedActorInformations extends GameRolePlayActorInformations {
    constructor(param1, param2, param3, name) {
        super(param1, param2, param3);
        this.name = name;
        this.protocolId = 154;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.name);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class GameRolePlayNpcInformations extends GameRolePlayActorInformations {
    constructor(param1, param2, param3, npcId, sex, specialArtworkId) {
        super(param1, param2, param3);
        this.npcId = npcId;
        this.sex = sex;
        this.specialArtworkId = specialArtworkId;
        this.protocolId = 156;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.npcId < 0) {
            Logger.error("Forbidden value (" + this.npcId + ") on element npcId.");
        }
        buffer.writeVarShort(this.npcId);
        buffer.writeBoolean(this.sex);
        if (this.specialArtworkId < 0) {
            Logger.error("Forbidden value (" + this.specialArtworkId + ") on element specialArtworkId.");
        }
        buffer.writeVarShort(this.specialArtworkId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.npcId = buffer.readVarUhShort();
        if (this.npcId < 0) {
            Logger.error("Forbidden value (" + this.npcId + ") on element of GameRolePlayNpcInformations.npcId.");
        }
        this.sex = buffer.readBoolean();
        this.specialArtworkId = buffer.readVarUhShort();
        if (this.specialArtworkId < 0) {
            Logger.error("Forbidden value (" + this.specialArtworkId + ") on element of GameRolePlayNpcInformations.specialArtworkId.");
        }
    }
}

// Generated by Noxus types 
export class GameRolePlayNpcWithQuestInformations extends GameRolePlayNpcInformations {
    constructor(param1, param2, param3, param4, param5, param6, questFlag) {
        super(param1, param2, param3, param4, param5, param6);
        this.questFlag = questFlag;
        this.protocolId = 383;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.questFlag.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.questFlag = new GameRolePlayNpcQuestFlag();
        this.questFlag.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class GameRolePlayPortalInformations extends GameRolePlayActorInformations {
    constructor(param1, param2, param3, portal) {
        super(param1, param2, param3);
        this.portal = portal;
        this.protocolId = 467;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.portal.protocolId);
        this.portal.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.portal = ProtocolTypeManager.getInstance(PortalInformation, _loc2_);
        this.portal.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class GameRolePlayPrismInformations extends GameRolePlayActorInformations {
    constructor(param1, param2, param3, prism) {
        super(param1, param2, param3);
        this.prism = prism;
        this.protocolId = 161;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.prism.protocolId);
        this.prism.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.prism = ProtocolTypeManager.getInstance(PrismInformation, _loc2_);
        this.prism.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class GameRolePlayTreasureHintInformations extends GameRolePlayActorInformations {
    constructor(param1, param2, param3, npcId) {
        super(param1, param2, param3);
        this.npcId = npcId;
        this.protocolId = 471;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.npcId < 0) {
            Logger.error("Forbidden value (" + this.npcId + ") on element npcId.");
        }
        buffer.writeVarShort(this.npcId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.npcId = buffer.readVarUhShort();
        if (this.npcId < 0) {
            Logger.error("Forbidden value (" + this.npcId + ") on element of GameRolePlayTreasureHintInformations.npcId.");
        }
    }
}

// Generated by Noxus types 
export class GroupMonsterStaticInformations {
    constructor(mainCreatureLightInfos, underlings) {
        this.mainCreatureLightInfos = mainCreatureLightInfos;
        this.underlings = underlings;
        this.protocolId = 140;
    }
    serialize(buffer) {
        this.mainCreatureLightInfos.serialize(buffer);
        buffer.writeShort(this.underlings.length);
        var _loc2_ = 0;
        while (_loc2_ < this.underlings.length) {
            this.underlings[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.mainCreatureLightInfos = new Types.MonsterInGroupLightInformations();
        this.mainCreatureLightInfos.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new Types.MonsterInGroupInformations();
            _loc4_.deserialize(buffer);
            this.underlings.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class GroupMonsterStaticInformationsWithAlternatives extends GroupMonsterStaticInformations {
    constructor(param1, param2, alternatives) {
        super(param1, param2);
        this.alternatives = alternatives;
        this.protocolId = 396;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.alternatives.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alternatives.length) {
            this.alternatives[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new Types.AlternativeMonstersInGroupLightInformations();
            _loc4_.deserialize(buffer);
            this.alternatives.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class GuildInAllianceInformations extends GuildInformations {
    constructor(param1, param2, param3, param4, nbMembers) {
        super(param1, param2, param3, param4);
        this.nbMembers = nbMembers;
        this.protocolId = 420;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.nbMembers < 1 || this.nbMembers > 240) {
            Logger.error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
        }
        buffer.writeByte(this.nbMembers);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.nbMembers = buffer.readUnsignedByte();
        if (this.nbMembers < 1 || this.nbMembers > 240) {
            Logger.error("Forbidden value (" + this.nbMembers + ") on element of GuildInAllianceInformations.nbMembers.");
        }
    }
}

// Generated by Noxus types 
export class GuildInformations extends BasicGuildInformations {
    constructor(param1, param2, param3, guildEmblem) {
        super(param1, param2, param3);
        this.guildEmblem = guildEmblem;
        this.protocolId = 127;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.guildEmblem.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.guildEmblem = new GuildEmblem();
        this.guildEmblem.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class HumanInformations {
    constructor(restrictions, sex, options) {
        this.restrictions = restrictions;
        this.sex = sex;
        this.options = options;
        this.protocolId = 157;
    }
    serialize(buffer) {
        this.restrictions.serialize(buffer);
        buffer.writeBoolean(this.sex);
        buffer.writeShort(this.options.length);
        var _loc2_ = 0;
        while (_loc2_ < this.options.length) {
            this.options[_loc2_].serialize(buffer);
            this.options[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.restrictions = new ActorRestrictionsInformations();
        this.restrictions.deserialize(buffer);
        this.sex = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.roleplay.HumanOption, _loc4_);
            _loc5_.deserialize(buffer);
            this.options.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class HumanOption {
    constructor() {
        this.protocolId = 406;
    }
    serialize(buffer) {
    }
    deserialize(buffer) {
    }
}

// Generated by Noxus types 
export class HumanOptionAlliance extends HumanOption {
    constructor(allianceInformations, aggressable) {
        super();
        this.allianceInformations = allianceInformations;
        this.aggressable = aggressable;
        this.protocolId = 425;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.allianceInformations.serialize(buffer);
        buffer.writeByte(this.aggressable);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceInformations = new Types.AllianceInformations();
        this.allianceInformations.deserialize(buffer);
        this.aggressable = buffer.readByte();
        if (this.aggressable < 0) {
            Logger.error("Forbidden value (" + this.aggressable + ") on element of HumanOptionAlliance.aggressable.");
        }
    }
}

// Generated by Noxus types 
export class HumanOptionEmote extends HumanOption {
    constructor(emoteId, emoteStartTime) {
        super();
        this.emoteId = emoteId;
        this.emoteStartTime = emoteStartTime;
        this.protocolId = 407;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        buffer.writeByte(this.emoteId);
        if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.emoteStartTime + ") on element emoteStartTime.");
        }
        buffer.writeDouble(this.emoteStartTime);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element of HumanOptionEmote.emoteId.");
        }
        this.emoteStartTime = buffer.readDouble();
        if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.emoteStartTime + ") on element of HumanOptionEmote.emoteStartTime.");
        }
    }
}

// Generated by Noxus types 
export class HumanOptionFollowers extends HumanOption {
    constructor(followingCharactersLook) {
        super();
        this.followingCharactersLook = followingCharactersLook;
        this.protocolId = 410;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.followingCharactersLook.length);
        var _loc2_ = 0;
        while (_loc2_ < this.followingCharactersLook.length) {
            this.followingCharactersLook[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new IndexedEntityLook();
            _loc4_.deserialize(buffer);
            this.followingCharactersLook.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class HumanOptionGuild extends HumanOption {
    constructor(guildInformations) {
        super();
        this.guildInformations = guildInformations;
        this.protocolId = 409;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.guildInformations.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.guildInformations = new Types.GuildInformations();
        this.guildInformations.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class HumanOptionObjectUse extends HumanOption {
    constructor(delayTypeId, delayEndTime, objectGID) {
        super();
        this.delayTypeId = delayTypeId;
        this.delayEndTime = delayEndTime;
        this.objectGID = objectGID;
        this.protocolId = 449;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.delayTypeId);
        if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.delayEndTime + ") on element delayEndTime.");
        }
        buffer.writeDouble(this.delayEndTime);
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        buffer.writeVarShort(this.objectGID);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.delayTypeId = buffer.readByte();
        if (this.delayTypeId < 0) {
            Logger.error("Forbidden value (" + this.delayTypeId + ") on element of HumanOptionObjectUse.delayTypeId.");
        }
        this.delayEndTime = buffer.readDouble();
        if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.delayEndTime + ") on element of HumanOptionObjectUse.delayEndTime.");
        }
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element of HumanOptionObjectUse.objectGID.");
        }
    }
}

// Generated by Noxus types 
export class HumanOptionOrnament extends HumanOption {
    constructor(ornamentId) {
        super();
        this.ornamentId = ornamentId;
        this.protocolId = 411;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.ornamentId < 0) {
            Logger.error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
        }
        buffer.writeVarShort(this.ornamentId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.ornamentId = buffer.readVarUhShort();
        if (this.ornamentId < 0) {
            Logger.error("Forbidden value (" + this.ornamentId + ") on element of HumanOptionOrnament.ornamentId.");
        }
    }
}

// Generated by Noxus types 
export class HumanOptionSkillUse extends HumanOption {
    constructor(elementId, skillId, skillEndTime) {
        super();
        this.elementId = elementId;
        this.skillId = skillId;
        this.skillEndTime = skillEndTime;
        this.protocolId = 495;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.elementId < 0) {
            Logger.error("Forbidden value (" + this.elementId + ") on element elementId.");
        }
        buffer.writeVarInt(this.elementId);
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        buffer.writeVarShort(this.skillId);
        if (this.skillEndTime < -9007199254740990 || this.skillEndTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.skillEndTime + ") on element skillEndTime.");
        }
        buffer.writeDouble(this.skillEndTime);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.elementId = buffer.readVarUhInt();
        if (this.elementId < 0) {
            Logger.error("Forbidden value (" + this.elementId + ") on element of HumanOptionSkillUse.elementId.");
        }
        this.skillId = buffer.readVarUhShort();
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element of HumanOptionSkillUse.skillId.");
        }
        this.skillEndTime = buffer.readDouble();
        if (this.skillEndTime < -9007199254740990 || this.skillEndTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.skillEndTime + ") on element of HumanOptionSkillUse.skillEndTime.");
        }
    }
}

// Generated by Noxus types 
export class HumanOptionTitle extends HumanOption {
    constructor(titleId, titleParam) {
        super();
        this.titleId = titleId;
        this.titleParam = titleParam;
        this.protocolId = 408;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.titleId < 0) {
            Logger.error("Forbidden value (" + this.titleId + ") on element titleId.");
        }
        buffer.writeVarShort(this.titleId);
        buffer.writeUTF(this.titleParam);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.titleId = buffer.readVarUhShort();
        if (this.titleId < 0) {
            Logger.error("Forbidden value (" + this.titleId + ") on element of HumanOptionTitle.titleId.");
        }
        this.titleParam = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class MonsterBoosts {
    constructor(id, xpBoost, dropBoost) {
        this.id = id;
        this.xpBoost = xpBoost;
        this.dropBoost = dropBoost;
        this.protocolId = 497;
    }
    serialize(buffer) {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeVarInt(this.id);
        if (this.xpBoost < 0) {
            Logger.error("Forbidden value (" + this.xpBoost + ") on element xpBoost.");
        }
        buffer.writeVarShort(this.xpBoost);
        if (this.dropBoost < 0) {
            Logger.error("Forbidden value (" + this.dropBoost + ") on element dropBoost.");
        }
        buffer.writeVarShort(this.dropBoost);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhInt();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of MonsterBoosts.id.");
        }
        this.xpBoost = buffer.readVarUhShort();
        if (this.xpBoost < 0) {
            Logger.error("Forbidden value (" + this.xpBoost + ") on element of MonsterBoosts.xpBoost.");
        }
        this.dropBoost = buffer.readVarUhShort();
        if (this.dropBoost < 0) {
            Logger.error("Forbidden value (" + this.dropBoost + ") on element of MonsterBoosts.dropBoost.");
        }
    }
}

// Generated by Noxus types 
export class MonsterInGroupInformations extends MonsterInGroupLightInformations {
    constructor(param1, param2, look) {
        super(param1, param2);
        this.look = look;
        this.protocolId = 144;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.look.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.look = new EntityLook();
        this.look.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class MonsterInGroupLightInformations {
    constructor(creatureGenericId, grade) {
        this.creatureGenericId = creatureGenericId;
        this.grade = grade;
        this.protocolId = 395;
    }
    serialize(buffer) {
        buffer.writeInt(this.creatureGenericId);
        if (this.grade < 0) {
            Logger.error("Forbidden value (" + this.grade + ") on element grade.");
        }
        buffer.writeByte(this.grade);
    }
    deserialize(buffer) {
        this.creatureGenericId = buffer.readInt();
        this.grade = buffer.readByte();
        if (this.grade < 0) {
            Logger.error("Forbidden value (" + this.grade + ") on element of MonsterInGroupLightInformations.grade.");
        }
    }
}

// Generated by Noxus types 
export class ObjectItemInRolePlay {
    constructor(cellId, objectGID) {
        this.cellId = cellId;
        this.objectGID = objectGID;
        this.protocolId = 198;
    }
    serialize(buffer) {
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        buffer.writeVarShort(this.cellId);
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        buffer.writeVarShort(this.objectGID);
    }
    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of ObjectItemInRolePlay.cellId.");
        }
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element of ObjectItemInRolePlay.objectGID.");
        }
    }
}

// Generated by Noxus types 
export class ArenaRankInfos {
    constructor(rank, bestRank, victoryCount, fightcount) {
        this.rank = rank;
        this.bestRank = bestRank;
        this.victoryCount = victoryCount;
        this.fightcount = fightcount;
        this.protocolId = 499;
    }
    serialize(buffer) {
        if (this.rank < 0 || this.rank > 20000) {
            Logger.error("Forbidden value (" + this.rank + ") on element rank.");
        }
        buffer.writeVarShort(this.rank);
        if (this.bestRank < 0 || this.bestRank > 20000) {
            Logger.error("Forbidden value (" + this.bestRank + ") on element bestRank.");
        }
        buffer.writeVarShort(this.bestRank);
        if (this.victoryCount < 0) {
            Logger.error("Forbidden value (" + this.victoryCount + ") on element victoryCount.");
        }
        buffer.writeVarShort(this.victoryCount);
        if (this.fightcount < 0) {
            Logger.error("Forbidden value (" + this.fightcount + ") on element fightcount.");
        }
        buffer.writeVarShort(this.fightcount);
    }
    deserialize(buffer) {
        this.rank = buffer.readVarUhShort();
        if (this.rank < 0 || this.rank > 20000) {
            Logger.error("Forbidden value (" + this.rank + ") on element of ArenaRankInfos.rank.");
        }
        this.bestRank = buffer.readVarUhShort();
        if (this.bestRank < 0 || this.bestRank > 20000) {
            Logger.error("Forbidden value (" + this.bestRank + ") on element of ArenaRankInfos.bestRank.");
        }
        this.victoryCount = buffer.readVarUhShort();
        if (this.victoryCount < 0) {
            Logger.error("Forbidden value (" + this.victoryCount + ") on element of ArenaRankInfos.victoryCount.");
        }
        this.fightcount = buffer.readVarUhShort();
        if (this.fightcount < 0) {
            Logger.error("Forbidden value (" + this.fightcount + ") on element of ArenaRankInfos.fightcount.");
        }
    }
}

// Generated by Noxus types 
export class DecraftedItemStackInfo {
    constructor(objectUID, bonusMin, bonusMax, runesId, runesQty) {
        this.objectUID = objectUID;
        this.bonusMin = bonusMin;
        this.bonusMax = bonusMax;
        this.runesId = runesId;
        this.runesQty = runesQty;
        this.protocolId = 481;
    }
    serialize(buffer) {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        buffer.writeVarInt(this.objectUID);
        buffer.writeFloat(this.bonusMin);
        buffer.writeFloat(this.bonusMax);
        buffer.writeShort(this.runesId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.runesId.length) {
            if (this.runesId[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.runesId[_loc2_] + ") on element 4 (starting at 1) of runesId.");
            }
            buffer.writeVarShort(this.runesId[_loc2_]);
            _loc2_++;
        }
        buffer.writeShort(this.runesQty.length);
        var _loc3_ = 0;
        while (_loc3_ < this.runesQty.length) {
            if (this.runesQty[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.runesQty[_loc3_] + ") on element 5 (starting at 1) of runesQty.");
            }
            buffer.writeVarInt(this.runesQty[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of DecraftedItemStackInfo.objectUID.");
        }
        this.bonusMin = buffer.readFloat();
        this.bonusMax = buffer.readFloat();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of runesId.");
            }
            this.runesId.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhInt();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of runesQty.");
            }
            this.runesQty.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus types 
export class JobBookSubscription {
    constructor(jobId, subscribed) {
        this.jobId = jobId;
        this.subscribed = subscribed;
        this.protocolId = 500;
    }
    serialize(buffer) {
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        buffer.writeByte(this.jobId);
        buffer.writeBoolean(this.subscribed);
    }
    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element of JobBookSubscription.jobId.");
        }
        this.subscribed = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class JobCrafterDirectoryEntryJobInfo {
    constructor(jobId, jobLevel, free, minLevel) {
        this.jobId = jobId;
        this.jobLevel = jobLevel;
        this.free = free;
        this.minLevel = minLevel;
        this.protocolId = 195;
    }
    serialize(buffer) {
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        buffer.writeByte(this.jobId);
        if (this.jobLevel < 1 || this.jobLevel > 200) {
            Logger.error("Forbidden value (" + this.jobLevel + ") on element jobLevel.");
        }
        buffer.writeByte(this.jobLevel);
        buffer.writeBoolean(this.free);
        if (this.minLevel < 0 || this.minLevel > 255) {
            Logger.error("Forbidden value (" + this.minLevel + ") on element minLevel.");
        }
        buffer.writeByte(this.minLevel);
    }
    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryEntryJobInfo.jobId.");
        }
        this.jobLevel = buffer.readUnsignedByte();
        if (this.jobLevel < 1 || this.jobLevel > 200) {
            Logger.error("Forbidden value (" + this.jobLevel + ") on element of JobCrafterDirectoryEntryJobInfo.jobLevel.");
        }
        this.free = buffer.readBoolean();
        this.minLevel = buffer.readUnsignedByte();
        if (this.minLevel < 0 || this.minLevel > 255) {
            Logger.error("Forbidden value (" + this.minLevel + ") on element of JobCrafterDirectoryEntryJobInfo.minLevel.");
        }
    }
}

// Generated by Noxus types 
export class JobCrafterDirectoryEntryPlayerInfo {
    constructor(playerId, playerName, alignmentSide, breed, sex, isInWorkshop, worldX, worldY, mapId, subAreaId, status) {
        this.playerId = playerId;
        this.playerName = playerName;
        this.alignmentSide = alignmentSide;
        this.breed = breed;
        this.sex = sex;
        this.isInWorkshop = isInWorkshop;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.status = status;
        this.protocolId = 194;
    }
    serialize(buffer) {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        buffer.writeVarLong(this.playerId);
        buffer.writeUTF(this.playerName);
        buffer.writeByte(this.alignmentSide);
        buffer.writeByte(this.breed);
        buffer.writeBoolean(this.sex);
        buffer.writeBoolean(this.isInWorkshop);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
        buffer.writeShort(this.status.protocolId);
        this.status.serialize(buffer);
    }
    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryEntryPlayerInfo.playerId.");
        }
        this.playerName = buffer.readUTF();
        this.alignmentSide = buffer.readByte();
        this.breed = buffer.readByte();
        if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Huppermage) {
            Logger.error("Forbidden value (" + this.breed + ") on element of JobCrafterDirectoryEntryPlayerInfo.breed.");
        }
        this.sex = buffer.readBoolean();
        this.isInWorkshop = buffer.readBoolean();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of JobCrafterDirectoryEntryPlayerInfo.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of JobCrafterDirectoryEntryPlayerInfo.worldY.");
        }
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of JobCrafterDirectoryEntryPlayerInfo.subAreaId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class JobCrafterDirectoryListEntry {
    constructor(playerInfo, jobInfo) {
        this.playerInfo = playerInfo;
        this.jobInfo = jobInfo;
        this.protocolId = 196;
    }
    serialize(buffer) {
        this.playerInfo.serialize(buffer);
        this.jobInfo.serialize(buffer);
    }
    deserialize(buffer) {
        this.playerInfo = new Types.JobCrafterDirectoryEntryPlayerInfo();
        this.playerInfo.deserialize(buffer);
        this.jobInfo = new Types.JobCrafterDirectoryEntryJobInfo();
        this.jobInfo.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class JobCrafterDirectorySettings {
    constructor(jobId, minLevel, free) {
        this.jobId = jobId;
        this.minLevel = minLevel;
        this.free = free;
        this.protocolId = 97;
    }
    serialize(buffer) {
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        buffer.writeByte(this.jobId);
        if (this.minLevel < 0 || this.minLevel > 255) {
            Logger.error("Forbidden value (" + this.minLevel + ") on element minLevel.");
        }
        buffer.writeByte(this.minLevel);
        buffer.writeBoolean(this.free);
    }
    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectorySettings.jobId.");
        }
        this.minLevel = buffer.readUnsignedByte();
        if (this.minLevel < 0 || this.minLevel > 255) {
            Logger.error("Forbidden value (" + this.minLevel + ") on element of JobCrafterDirectorySettings.minLevel.");
        }
        this.free = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class JobDescription {
    constructor(jobId, skills) {
        this.jobId = jobId;
        this.skills = skills;
        this.protocolId = 101;
    }
    serialize(buffer) {
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        buffer.writeByte(this.jobId);
        buffer.writeShort(this.skills.length);
        var _loc2_ = 0;
        while (_loc2_ < this.skills.length) {
            this.skills[_loc2_].serialize(buffer);
            this.skills[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element of JobDescription.jobId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(SkillActionDescription, _loc4_);
            _loc5_.deserialize(buffer);
            this.skills.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class JobExperience {
    constructor(jobId, jobLevel, jobXP, jobXpLevelFloor, jobXpNextLevelFloor) {
        this.jobId = jobId;
        this.jobLevel = jobLevel;
        this.jobXP = jobXP;
        this.jobXpLevelFloor = jobXpLevelFloor;
        this.jobXpNextLevelFloor = jobXpNextLevelFloor;
        this.protocolId = 98;
    }
    serialize(buffer) {
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        buffer.writeByte(this.jobId);
        if (this.jobLevel < 0 || this.jobLevel > 255) {
            Logger.error("Forbidden value (" + this.jobLevel + ") on element jobLevel.");
        }
        buffer.writeByte(this.jobLevel);
        if (this.jobXP < 0 || this.jobXP > 9007199254740990) {
            Logger.error("Forbidden value (" + this.jobXP + ") on element jobXP.");
        }
        buffer.writeVarLong(this.jobXP);
        if (this.jobXpLevelFloor < 0 || this.jobXpLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.jobXpLevelFloor + ") on element jobXpLevelFloor.");
        }
        buffer.writeVarLong(this.jobXpLevelFloor);
        if (this.jobXpNextLevelFloor < 0 || this.jobXpNextLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.jobXpNextLevelFloor + ") on element jobXpNextLevelFloor.");
        }
        buffer.writeVarLong(this.jobXpNextLevelFloor);
    }
    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element of JobExperience.jobId.");
        }
        this.jobLevel = buffer.readUnsignedByte();
        if (this.jobLevel < 0 || this.jobLevel > 255) {
            Logger.error("Forbidden value (" + this.jobLevel + ") on element of JobExperience.jobLevel.");
        }
        this.jobXP = buffer.readVarUhLong();
        if (this.jobXP < 0 || this.jobXP > 9007199254740990) {
            Logger.error("Forbidden value (" + this.jobXP + ") on element of JobExperience.jobXP.");
        }
        this.jobXpLevelFloor = buffer.readVarUhLong();
        if (this.jobXpLevelFloor < 0 || this.jobXpLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.jobXpLevelFloor + ") on element of JobExperience.jobXpLevelFloor.");
        }
        this.jobXpNextLevelFloor = buffer.readVarUhLong();
        if (this.jobXpNextLevelFloor < 0 || this.jobXpNextLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.jobXpNextLevelFloor + ") on element of JobExperience.jobXpNextLevelFloor.");
        }
    }
}

// Generated by Noxus types 
export class DungeonPartyFinderPlayer {
    constructor(playerId, playerName, breed, sex, level) {
        this.playerId = playerId;
        this.playerName = playerName;
        this.breed = breed;
        this.sex = sex;
        this.level = level;
        this.protocolId = 373;
    }
    serialize(buffer) {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        buffer.writeVarLong(this.playerId);
        buffer.writeUTF(this.playerName);
        buffer.writeByte(this.breed);
        buffer.writeBoolean(this.sex);
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
    }
    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of DungeonPartyFinderPlayer.playerId.");
        }
        this.playerName = buffer.readUTF();
        this.breed = buffer.readByte();
        if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Huppermage) {
            Logger.error("Forbidden value (" + this.breed + ") on element of DungeonPartyFinderPlayer.breed.");
        }
        this.sex = buffer.readBoolean();
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element of DungeonPartyFinderPlayer.level.");
        }
    }
}

// Generated by Noxus types 
export class NamedPartyTeam {
    constructor(teamId, partyName) {
        this.teamId = teamId;
        this.partyName = partyName;
        this.protocolId = 469;
    }
    serialize(buffer) {
        buffer.writeByte(this.teamId);
        buffer.writeUTF(this.partyName);
    }
    deserialize(buffer) {
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            Logger.error("Forbidden value (" + this.teamId + ") on element of NamedPartyTeam.teamId.");
        }
        this.partyName = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class NamedPartyTeamWithOutcome {
    constructor(team, outcome) {
        this.team = team;
        this.outcome = outcome;
        this.protocolId = 470;
    }
    serialize(buffer) {
        this.team.serialize(buffer);
        buffer.writeVarShort(this.outcome);
    }
    deserialize(buffer) {
        this.team = new Types.NamedPartyTeam();
        this.team.deserialize(buffer);
        this.outcome = buffer.readVarUhShort();
        if (this.outcome < 0) {
            Logger.error("Forbidden value (" + this.outcome + ") on element of NamedPartyTeamWithOutcome.outcome.");
        }
    }
}

// Generated by Noxus types 
export class PartyGuestInformations {
    constructor(guestId, hostId, name, guestLook, breed, sex, status, companions) {
        this.guestId = guestId;
        this.hostId = hostId;
        this.name = name;
        this.guestLook = guestLook;
        this.breed = breed;
        this.sex = sex;
        this.status = status;
        this.companions = companions;
        this.protocolId = 374;
    }
    serialize(buffer) {
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        buffer.writeVarLong(this.guestId);
        if (this.hostId < 0 || this.hostId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.hostId + ") on element hostId.");
        }
        buffer.writeVarLong(this.hostId);
        buffer.writeUTF(this.name);
        this.guestLook.serialize(buffer);
        buffer.writeByte(this.breed);
        buffer.writeBoolean(this.sex);
        buffer.writeShort(this.status.protocolId);
        this.status.serialize(buffer);
        buffer.writeShort(this.companions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.companions.length) {
            this.companions[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc5_ = null;
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element of PartyGuestInformations.guestId.");
        }
        this.hostId = buffer.readVarUhLong();
        if (this.hostId < 0 || this.hostId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.hostId + ") on element of PartyGuestInformations.hostId.");
        }
        this.name = buffer.readUTF();
        this.guestLook = new EntityLook();
        this.guestLook.deserialize(buffer);
        this.breed = buffer.readByte();
        this.sex = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc5_ = new PartyCompanionBaseInformations();
            _loc5_.deserialize(buffer);
            this.companions.push(_loc5_);
            _loc4_++;
        }
    }
}

// Generated by Noxus types 
export class PartyInvitationMemberInformations extends CharacterBaseInformations {
    constructor(param1, param2, param3, param4, param5, param6, worldX, worldY, mapId, subAreaId, companions) {
        super(param1, param2, param3, param4, param5, param6);
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.companions = companions;
        this.protocolId = 376;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
        buffer.writeShort(this.companions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.companions.length) {
            this.companions[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of PartyInvitationMemberInformations.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of PartyInvitationMemberInformations.worldY.");
        }
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PartyInvitationMemberInformations.subAreaId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PartyCompanionBaseInformations();
            _loc4_.deserialize(buffer);
            this.companions.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class PartyMemberArenaInformations extends PartyMemberInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, rank) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18);
        this.rank = rank;
        this.protocolId = 391;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.rank < 0 || this.rank > 20000) {
            Logger.error("Forbidden value (" + this.rank + ") on element rank.");
        }
        buffer.writeVarShort(this.rank);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.rank = buffer.readVarUhShort();
        if (this.rank < 0 || this.rank > 20000) {
            Logger.error("Forbidden value (" + this.rank + ") on element of PartyMemberArenaInformations.rank.");
        }
    }
}

// Generated by Noxus types 
export class PartyMemberGeoPosition {
    constructor(memberId, worldX, worldY, mapId, subAreaId) {
        this.memberId = memberId;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.protocolId = 378;
    }
    serialize(buffer) {
        if (this.memberId < 0) {
            Logger.error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        buffer.writeInt(this.memberId);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
    }
    deserialize(buffer) {
        this.memberId = buffer.readInt();
        if (this.memberId < 0) {
            Logger.error("Forbidden value (" + this.memberId + ") on element of PartyMemberGeoPosition.memberId.");
        }
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of PartyMemberGeoPosition.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of PartyMemberGeoPosition.worldY.");
        }
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PartyMemberGeoPosition.subAreaId.");
        }
    }
}

// Generated by Noxus types 
export class PartyMemberInformations extends CharacterBaseInformations {
    constructor(param1, param2, param3, param4, param5, param6, lifePoints, maxLifePoints, prospecting, regenRate, initiative, alignmentSide, worldX, worldY, mapId, subAreaId, status, companions) {
        super(param1, param2, param3, param4, param5, param6);
        this.lifePoints = lifePoints;
        this.maxLifePoints = maxLifePoints;
        this.prospecting = prospecting;
        this.regenRate = regenRate;
        this.initiative = initiative;
        this.alignmentSide = alignmentSide;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.status = status;
        this.companions = companions;
        this.protocolId = 90;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        buffer.writeVarInt(this.maxLifePoints);
        if (this.prospecting < 0) {
            Logger.error("Forbidden value (" + this.prospecting + ") on element prospecting.");
        }
        buffer.writeVarShort(this.prospecting);
        if (this.regenRate < 0 || this.regenRate > 255) {
            Logger.error("Forbidden value (" + this.regenRate + ") on element regenRate.");
        }
        buffer.writeByte(this.regenRate);
        if (this.initiative < 0) {
            Logger.error("Forbidden value (" + this.initiative + ") on element initiative.");
        }
        buffer.writeVarShort(this.initiative);
        buffer.writeByte(this.alignmentSide);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
        buffer.writeShort(this.status.protocolId);
        this.status.serialize(buffer);
        buffer.writeShort(this.companions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.companions.length) {
            this.companions[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc5_ = null;
        super.deserialize(buffer);
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element of PartyMemberInformations.lifePoints.");
        }
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element of PartyMemberInformations.maxLifePoints.");
        }
        this.prospecting = buffer.readVarUhShort();
        if (this.prospecting < 0) {
            Logger.error("Forbidden value (" + this.prospecting + ") on element of PartyMemberInformations.prospecting.");
        }
        this.regenRate = buffer.readUnsignedByte();
        if (this.regenRate < 0 || this.regenRate > 255) {
            Logger.error("Forbidden value (" + this.regenRate + ") on element of PartyMemberInformations.regenRate.");
        }
        this.initiative = buffer.readVarUhShort();
        if (this.initiative < 0) {
            Logger.error("Forbidden value (" + this.initiative + ") on element of PartyMemberInformations.initiative.");
        }
        this.alignmentSide = buffer.readByte();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of PartyMemberInformations.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of PartyMemberInformations.worldY.");
        }
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PartyMemberInformations.subAreaId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc5_ = new PartyCompanionMemberInformations();
            _loc5_.deserialize(buffer);
            this.companions.push(_loc5_);
            _loc4_++;
        }
    }
}

// Generated by Noxus types 
export class PartyCompanionBaseInformations {
    constructor(indexId, companionGenericId, entityLook) {
        this.indexId = indexId;
        this.companionGenericId = companionGenericId;
        this.entityLook = entityLook;
        this.protocolId = 453;
    }
    serialize(buffer) {
        if (this.indexId < 0) {
            Logger.error("Forbidden value (" + this.indexId + ") on element indexId.");
        }
        buffer.writeByte(this.indexId);
        if (this.companionGenericId < 0) {
            Logger.error("Forbidden value (" + this.companionGenericId + ") on element companionGenericId.");
        }
        buffer.writeByte(this.companionGenericId);
        this.entityLook.serialize(buffer);
    }
    deserialize(buffer) {
        this.indexId = buffer.readByte();
        if (this.indexId < 0) {
            Logger.error("Forbidden value (" + this.indexId + ") on element of PartyCompanionBaseInformations.indexId.");
        }
        this.companionGenericId = buffer.readByte();
        if (this.companionGenericId < 0) {
            Logger.error("Forbidden value (" + this.companionGenericId + ") on element of PartyCompanionBaseInformations.companionGenericId.");
        }
        this.entityLook = new EntityLook();
        this.entityLook.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class PartyCompanionMemberInformations extends PartyCompanionBaseInformations {
    constructor(param1, param2, param3, initiative, lifePoints, maxLifePoints, prospecting, regenRate) {
        super(param1, param2, param3);
        this.initiative = initiative;
        this.lifePoints = lifePoints;
        this.maxLifePoints = maxLifePoints;
        this.prospecting = prospecting;
        this.regenRate = regenRate;
        this.protocolId = 452;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.initiative < 0) {
            Logger.error("Forbidden value (" + this.initiative + ") on element initiative.");
        }
        buffer.writeVarShort(this.initiative);
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        buffer.writeVarInt(this.maxLifePoints);
        if (this.prospecting < 0) {
            Logger.error("Forbidden value (" + this.prospecting + ") on element prospecting.");
        }
        buffer.writeVarShort(this.prospecting);
        if (this.regenRate < 0 || this.regenRate > 255) {
            Logger.error("Forbidden value (" + this.regenRate + ") on element regenRate.");
        }
        buffer.writeByte(this.regenRate);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.initiative = buffer.readVarUhShort();
        if (this.initiative < 0) {
            Logger.error("Forbidden value (" + this.initiative + ") on element of PartyCompanionMemberInformations.initiative.");
        }
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element of PartyCompanionMemberInformations.lifePoints.");
        }
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element of PartyCompanionMemberInformations.maxLifePoints.");
        }
        this.prospecting = buffer.readVarUhShort();
        if (this.prospecting < 0) {
            Logger.error("Forbidden value (" + this.prospecting + ") on element of PartyCompanionMemberInformations.prospecting.");
        }
        this.regenRate = buffer.readUnsignedByte();
        if (this.regenRate < 0 || this.regenRate > 255) {
            Logger.error("Forbidden value (" + this.regenRate + ") on element of PartyCompanionMemberInformations.regenRate.");
        }
    }
}

// Generated by Noxus types 
export class GameRolePlayNpcQuestFlag {
    constructor(questsToValidId, questsToStartId) {
        this.questsToValidId = questsToValidId;
        this.questsToStartId = questsToStartId;
        this.protocolId = 384;
    }
    serialize(buffer) {
        buffer.writeShort(this.questsToValidId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.questsToValidId.length) {
            if (this.questsToValidId[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.questsToValidId[_loc2_] + ") on element 1 (starting at 1) of questsToValidId.");
            }
            buffer.writeVarShort(this.questsToValidId[_loc2_]);
            _loc2_++;
        }
        buffer.writeShort(this.questsToStartId.length);
        var _loc3_ = 0;
        while (_loc3_ < this.questsToStartId.length) {
            if (this.questsToStartId[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.questsToStartId[_loc3_] + ") on element 2 (starting at 1) of questsToStartId.");
            }
            buffer.writeVarShort(this.questsToStartId[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of questsToValidId.");
            }
            this.questsToValidId.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of questsToStartId.");
            }
            this.questsToStartId.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus types 
export class QuestActiveDetailedInformations extends QuestActiveInformations {
    constructor(param1, stepId, objectives) {
        super(param1);
        this.stepId = stepId;
        this.objectives = objectives;
        this.protocolId = 382;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.stepId < 0) {
            Logger.error("Forbidden value (" + this.stepId + ") on element stepId.");
        }
        buffer.writeVarShort(this.stepId);
        buffer.writeShort(this.objectives.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectives.length) {
            this.objectives[_loc2_].serialize(buffer);
            this.objectives[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.stepId = buffer.readVarUhShort();
        if (this.stepId < 0) {
            Logger.error("Forbidden value (" + this.stepId + ") on element of QuestActiveDetailedInformations.stepId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestObjectiveInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.objectives.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class QuestActiveInformations {
    constructor(questId) {
        this.questId = questId;
        this.protocolId = 381;
    }
    serialize(buffer) {
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element questId.");
        }
        buffer.writeVarShort(this.questId);
    }
    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element of QuestActiveInformations.questId.");
        }
    }
}

// Generated by Noxus types 
export class QuestObjectiveInformations {
    constructor(objectiveId, objectiveStatus, dialogParams) {
        this.objectiveId = objectiveId;
        this.objectiveStatus = objectiveStatus;
        this.dialogParams = dialogParams;
        this.protocolId = 385;
    }
    serialize(buffer) {
        if (this.objectiveId < 0) {
            Logger.error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
        }
        buffer.writeVarShort(this.objectiveId);
        buffer.writeBoolean(this.objectiveStatus);
        buffer.writeShort(this.dialogParams.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dialogParams.length) {
            buffer.writeUTF(this.dialogParams[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.objectiveId = buffer.readVarUhShort();
        if (this.objectiveId < 0) {
            Logger.error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveInformations.objectiveId.");
        }
        this.objectiveStatus = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.dialogParams.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class QuestObjectiveInformationsWithCompletion extends QuestObjectiveInformations {
    constructor(param1, param2, param3, curCompletion, maxCompletion) {
        super(param1, param2, param3);
        this.curCompletion = curCompletion;
        this.maxCompletion = maxCompletion;
        this.protocolId = 386;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.curCompletion < 0) {
            Logger.error("Forbidden value (" + this.curCompletion + ") on element curCompletion.");
        }
        buffer.writeVarShort(this.curCompletion);
        if (this.maxCompletion < 0) {
            Logger.error("Forbidden value (" + this.maxCompletion + ") on element maxCompletion.");
        }
        buffer.writeVarShort(this.maxCompletion);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.curCompletion = buffer.readVarUhShort();
        if (this.curCompletion < 0) {
            Logger.error("Forbidden value (" + this.curCompletion + ") on element of QuestObjectiveInformationsWithCompletion.curCompletion.");
        }
        this.maxCompletion = buffer.readVarUhShort();
        if (this.maxCompletion < 0) {
            Logger.error("Forbidden value (" + this.maxCompletion + ") on element of QuestObjectiveInformationsWithCompletion.maxCompletion.");
        }
    }
}

// Generated by Noxus types 
export class PortalInformation {
    constructor(portalId, areaId) {
        this.portalId = portalId;
        this.areaId = areaId;
        this.protocolId = 466;
    }
    serialize(buffer) {
        buffer.writeInt(this.portalId);
        buffer.writeShort(this.areaId);
    }
    deserialize(buffer) {
        this.portalId = buffer.readInt();
        this.areaId = buffer.readShort();
    }
}

// Generated by Noxus types 
export class TreasureHuntFlag {
    constructor(mapId, state) {
        this.mapId = mapId;
        this.state = state;
        this.protocolId = 473;
    }
    serialize(buffer) {
        buffer.writeInt(this.mapId);
        buffer.writeByte(this.state);
    }
    deserialize(buffer) {
        this.mapId = buffer.readInt();
        this.state = buffer.readByte();
        if (this.state < 0) {
            Logger.error("Forbidden value (" + this.state + ") on element of TreasureHuntFlag.state.");
        }
    }
}

// Generated by Noxus types 
export class TreasureHuntStep {
    constructor() {
        this.protocolId = 463;
    }
    serialize(buffer) {
    }
    deserialize(buffer) {
    }
}

// Generated by Noxus types 
export class TreasureHuntStepDig extends TreasureHuntStep {
    constructor() {
        super();
        this.protocolId = 465;
    }
    serialize(buffer) {
    }
    deserialize(buffer) {
    }
}

// Generated by Noxus types 
export class TreasureHuntStepFight extends TreasureHuntStep {
    constructor() {
        super();
        this.protocolId = 462;
    }
    serialize(buffer) {
    }
    deserialize(buffer) {
    }
}

// Generated by Noxus types 
export class TreasureHuntStepFollowDirection extends TreasureHuntStep {
    constructor(direction, mapCount) {
        super();
        this.direction = direction;
        this.mapCount = mapCount;
        this.protocolId = 468;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.direction);
        if (this.mapCount < 0) {
            Logger.error("Forbidden value (" + this.mapCount + ") on element mapCount.");
        }
        buffer.writeVarShort(this.mapCount);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            Logger.error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirection.direction.");
        }
        this.mapCount = buffer.readVarUhShort();
        if (this.mapCount < 0) {
            Logger.error("Forbidden value (" + this.mapCount + ") on element of TreasureHuntStepFollowDirection.mapCount.");
        }
    }
}

// Generated by Noxus types 
export class TreasureHuntStepFollowDirectionToHint extends TreasureHuntStep {
    constructor(direction, npcId) {
        super();
        this.direction = direction;
        this.npcId = npcId;
        this.protocolId = 472;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.direction);
        if (this.npcId < 0) {
            Logger.error("Forbidden value (" + this.npcId + ") on element npcId.");
        }
        buffer.writeVarShort(this.npcId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            Logger.error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirectionToHint.direction.");
        }
        this.npcId = buffer.readVarUhShort();
        if (this.npcId < 0) {
            Logger.error("Forbidden value (" + this.npcId + ") on element of TreasureHuntStepFollowDirectionToHint.npcId.");
        }
    }
}

// Generated by Noxus types 
export class TreasureHuntStepFollowDirectionToPOI extends TreasureHuntStep {
    constructor(direction, poiLabelId) {
        super();
        this.direction = direction;
        this.poiLabelId = poiLabelId;
        this.protocolId = 461;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.direction);
        if (this.poiLabelId < 0) {
            Logger.error("Forbidden value (" + this.poiLabelId + ") on element poiLabelId.");
        }
        buffer.writeVarShort(this.poiLabelId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            Logger.error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirectionToPOI.direction.");
        }
        this.poiLabelId = buffer.readVarUhShort();
        if (this.poiLabelId < 0) {
            Logger.error("Forbidden value (" + this.poiLabelId + ") on element of TreasureHuntStepFollowDirectionToPOI.poiLabelId.");
        }
    }
}

// Generated by Noxus types 
export class DareCriteria {
    constructor(type, params) {
        this.type = type;
        this.params = params;
        this.protocolId = 501;
    }
    serialize(buffer) {
        buffer.writeByte(this.type);
        buffer.writeShort(this.params.length);
        var _loc2_ = 0;
        while (_loc2_ < this.params.length) {
            buffer.writeInt(this.params[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of DareCriteria.type.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.params.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class DareInformations {
    constructor(dareId, creator, subscriptionFee, jackpot, maxCountWinners, endDate, isPrivate, guildId, allianceId, criterions, startDate) {
        this.dareId = dareId;
        this.creator = creator;
        this.subscriptionFee = subscriptionFee;
        this.jackpot = jackpot;
        this.maxCountWinners = maxCountWinners;
        this.endDate = endDate;
        this.isPrivate = isPrivate;
        this.guildId = guildId;
        this.allianceId = allianceId;
        this.criterions = criterions;
        this.startDate = startDate;
        this.protocolId = 502;
    }
    serialize(buffer) {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        buffer.writeDouble(this.dareId);
        this.creator.serialize(buffer);
        if (this.subscriptionFee < 0) {
            Logger.error("Forbidden value (" + this.subscriptionFee + ") on element subscriptionFee.");
        }
        buffer.writeInt(this.subscriptionFee);
        if (this.jackpot < 0) {
            Logger.error("Forbidden value (" + this.jackpot + ") on element jackpot.");
        }
        buffer.writeInt(this.jackpot);
        if (this.maxCountWinners < 0 || this.maxCountWinners > 65535) {
            Logger.error("Forbidden value (" + this.maxCountWinners + ") on element maxCountWinners.");
        }
        buffer.writeShort(this.maxCountWinners);
        if (this.endDate < 0 || this.endDate > 9007199254740990) {
            Logger.error("Forbidden value (" + this.endDate + ") on element endDate.");
        }
        buffer.writeDouble(this.endDate);
        buffer.writeBoolean(this.isPrivate);
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        buffer.writeVarInt(this.guildId);
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        buffer.writeVarInt(this.allianceId);
        buffer.writeShort(this.criterions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.criterions.length) {
            this.criterions[_loc2_].serialize(buffer);
            _loc2_++;
        }
        if (this.startDate < 0 || this.startDate > 9007199254740990) {
            Logger.error("Forbidden value (" + this.startDate + ") on element startDate.");
        }
        buffer.writeDouble(this.startDate);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element of DareInformations.dareId.");
        }
        this.creator = new CharacterBasicMinimalInformations();
        this.creator.deserialize(buffer);
        this.subscriptionFee = buffer.readInt();
        if (this.subscriptionFee < 0) {
            Logger.error("Forbidden value (" + this.subscriptionFee + ") on element of DareInformations.subscriptionFee.");
        }
        this.jackpot = buffer.readInt();
        if (this.jackpot < 0) {
            Logger.error("Forbidden value (" + this.jackpot + ") on element of DareInformations.jackpot.");
        }
        this.maxCountWinners = buffer.readUnsignedShort();
        if (this.maxCountWinners < 0 || this.maxCountWinners > 65535) {
            Logger.error("Forbidden value (" + this.maxCountWinners + ") on element of DareInformations.maxCountWinners.");
        }
        this.endDate = buffer.readDouble();
        if (this.endDate < 0 || this.endDate > 9007199254740990) {
            Logger.error("Forbidden value (" + this.endDate + ") on element of DareInformations.endDate.");
        }
        this.isPrivate = buffer.readBoolean();
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element of DareInformations.guildId.");
        }
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element of DareInformations.allianceId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new Types.DareCriteria();
            _loc4_.deserialize(buffer);
            this.criterions.push(_loc4_);
            _loc3_++;
        }
        this.startDate = buffer.readDouble();
        if (this.startDate < 0 || this.startDate > 9007199254740990) {
            Logger.error("Forbidden value (" + this.startDate + ") on element of DareInformations.startDate.");
        }
    }
}

// Generated by Noxus types 
export class DareReward {
    constructor(type, monsterId, kamas, dareId) {
        this.type = type;
        this.monsterId = monsterId;
        this.kamas = kamas;
        this.dareId = dareId;
        this.protocolId = 505;
    }
    serialize(buffer) {
        buffer.writeByte(this.type);
        if (this.monsterId < 0) {
            Logger.error("Forbidden value (" + this.monsterId + ") on element monsterId.");
        }
        buffer.writeVarShort(this.monsterId);
        if (this.kamas < 0 || this.kamas > 4294967295) {
            Logger.error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        buffer.writeUnsignedInt(this.kamas);
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        buffer.writeDouble(this.dareId);
    }
    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of DareReward.type.");
        }
        this.monsterId = buffer.readVarUhShort();
        if (this.monsterId < 0) {
            Logger.error("Forbidden value (" + this.monsterId + ") on element of DareReward.monsterId.");
        }
        this.kamas = buffer.readUnsignedInt();
        if (this.kamas < 0 || this.kamas > 4294967295) {
            Logger.error("Forbidden value (" + this.kamas + ") on element of DareReward.kamas.");
        }
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element of DareReward.dareId.");
        }
    }
}

// Generated by Noxus types 
export class DareVersatileInformations {
    constructor(dareId, countEntrants, countWinners) {
        this.dareId = dareId;
        this.countEntrants = countEntrants;
        this.countWinners = countWinners;
        this.protocolId = 504;
    }
    serialize(buffer) {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        buffer.writeDouble(this.dareId);
        if (this.countEntrants < 0) {
            Logger.error("Forbidden value (" + this.countEntrants + ") on element countEntrants.");
        }
        buffer.writeInt(this.countEntrants);
        if (this.countWinners < 0) {
            Logger.error("Forbidden value (" + this.countWinners + ") on element countWinners.");
        }
        buffer.writeInt(this.countWinners);
    }
    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element of DareVersatileInformations.dareId.");
        }
        this.countEntrants = buffer.readInt();
        if (this.countEntrants < 0) {
            Logger.error("Forbidden value (" + this.countEntrants + ") on element of DareVersatileInformations.countEntrants.");
        }
        this.countWinners = buffer.readInt();
        if (this.countWinners < 0) {
            Logger.error("Forbidden value (" + this.countWinners + ") on element of DareVersatileInformations.countWinners.");
        }
    }
}

// Generated by Noxus types 
export class BidExchangerObjectInfo {
    constructor(objectUID, effects, prices) {
        this.objectUID = objectUID;
        this.effects = effects;
        this.prices = prices;
        this.protocolId = 122;
    }
    serialize(buffer) {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        buffer.writeVarInt(this.objectUID);
        buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.effects[_loc2_].serialize(buffer);
            this.effects[_loc2_].serialize(buffer);
            _loc2_++;
        }
        buffer.writeShort(this.prices.length);
        var _loc3_ = 0;
        while (_loc3_ < this.prices.length) {
            if (this.prices[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.prices[_loc3_] + ") on element 3 (starting at 1) of prices.");
            }
            buffer.writeInt(this.prices[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = 0;
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of BidExchangerObjectInfo.objectUID.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc6_);
            _loc7_.deserialize(buffer);
            this.effects.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readInt();
            if (_loc8_ < 0) {
                Logger.error("Forbidden value (" + _loc8_ + ") on elements of prices.");
            }
            this.prices.push(_loc8_);
            _loc5_++;
        }
    }
}

// Generated by Noxus types 
export class GoldItem extends Item {
    constructor(sum) {
        super();
        this.sum = sum;
        this.protocolId = 123;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.sum < 0) {
            Logger.error("Forbidden value (" + this.sum + ") on element sum.");
        }
        buffer.writeVarInt(this.sum);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.sum = buffer.readVarUhInt();
        if (this.sum < 0) {
            Logger.error("Forbidden value (" + this.sum + ") on element of GoldItem.sum.");
        }
    }
}

// Generated by Noxus types 
export class Item {
    constructor() {
        this.protocolId = 7;
    }
    serialize(buffer) {
    }
    deserialize(buffer) {
    }
}

// Generated by Noxus types 
export class ObjectItem extends Item {
    constructor(position, objectGID, effects, objectUID, quantity) {
        super();
        this.position = position;
        this.objectGID = objectGID;
        this.effects = effects;
        this.objectUID = objectUID;
        this.quantity = quantity;
        this.protocolId = 37;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.position);
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        buffer.writeVarShort(this.objectGID);
        buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.effects[_loc2_].serialize(buffer);
            this.effects[_loc2_].serialize(buffer);
            _loc2_++;
        }
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.position = buffer.readUnsignedByte();
        if (this.position < 0 || this.position > 255) {
            Logger.error("Forbidden value (" + this.position + ") on element of ObjectItem.position.");
        }
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element of ObjectItem.objectGID.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
            _loc5_.deserialize(buffer);
            this.effects.push(_loc5_);
            _loc3_++;
        }
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectItem.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectItem.quantity.");
        }
    }
}

// Generated by Noxus types 
export class ObjectItemGenericQuantity extends Item {
    constructor(objectGID, quantity) {
        super();
        this.objectGID = objectGID;
        this.quantity = quantity;
        this.protocolId = 483;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        buffer.writeVarShort(this.objectGID);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element of ObjectItemGenericQuantity.objectGID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectItemGenericQuantity.quantity.");
        }
    }
}

// Generated by Noxus types 
export class ObjectItemGenericQuantityPrice extends ObjectItemGenericQuantity {
    constructor(param1, param2, price) {
        super(param1, param2);
        this.price = price;
        this.protocolId = 494;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element price.");
        }
        buffer.writeVarInt(this.price);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.price = buffer.readVarUhInt();
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element of ObjectItemGenericQuantityPrice.price.");
        }
    }
}

// Generated by Noxus types 
export class ObjectItemInformationWithQuantity extends ObjectItemMinimalInformation {
    constructor(param1, param2, quantity) {
        super(param1, param2);
        this.quantity = quantity;
        this.protocolId = 387;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectItemInformationWithQuantity.quantity.");
        }
    }
}

// Generated by Noxus types 
export class ObjectItemMinimalInformation extends Item {
    constructor(objectGID, effects) {
        super();
        this.objectGID = objectGID;
        this.effects = effects;
        this.protocolId = 124;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        buffer.writeVarShort(this.objectGID);
        buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.effects[_loc2_].serialize(buffer);
            this.effects[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element of ObjectItemMinimalInformation.objectGID.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
            _loc5_.deserialize(buffer);
            this.effects.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class ObjectItemNotInContainer extends Item {
    constructor(objectGID, effects, objectUID, quantity) {
        super();
        this.objectGID = objectGID;
        this.effects = effects;
        this.objectUID = objectUID;
        this.quantity = quantity;
        this.protocolId = 134;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        buffer.writeVarShort(this.objectGID);
        buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.effects[_loc2_].serialize(buffer);
            this.effects[_loc2_].serialize(buffer);
            _loc2_++;
        }
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element of ObjectItemNotInContainer.objectGID.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
            _loc5_.deserialize(buffer);
            this.effects.push(_loc5_);
            _loc3_++;
        }
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectItemNotInContainer.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectItemNotInContainer.quantity.");
        }
    }
}

// Generated by Noxus types 
export class ObjectItemQuantity extends Item {
    constructor(objectUID, quantity) {
        super();
        this.objectUID = objectUID;
        this.quantity = quantity;
        this.protocolId = 119;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectItemQuantity.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectItemQuantity.quantity.");
        }
    }
}

// Generated by Noxus types 
export class ObjectItemToSell extends Item {
    constructor(objectGID, effects, objectUID, quantity, objectPrice) {
        super();
        this.objectGID = objectGID;
        this.effects = effects;
        this.objectUID = objectUID;
        this.quantity = quantity;
        this.objectPrice = objectPrice;
        this.protocolId = 120;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        buffer.writeVarShort(this.objectGID);
        buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.effects[_loc2_].serialize(buffer);
            this.effects[_loc2_].serialize(buffer);
            _loc2_++;
        }
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        buffer.writeVarInt(this.quantity);
        if (this.objectPrice < 0) {
            Logger.error("Forbidden value (" + this.objectPrice + ") on element objectPrice.");
        }
        buffer.writeVarInt(this.objectPrice);
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element of ObjectItemToSell.objectGID.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
            _loc5_.deserialize(buffer);
            this.effects.push(_loc5_);
            _loc3_++;
        }
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectItemToSell.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectItemToSell.quantity.");
        }
        this.objectPrice = buffer.readVarUhInt();
        if (this.objectPrice < 0) {
            Logger.error("Forbidden value (" + this.objectPrice + ") on element of ObjectItemToSell.objectPrice.");
        }
    }
}

// Generated by Noxus types 
export class ObjectItemToSellInBid extends ObjectItemToSell {
    constructor(param1, param2, param3, param4, param5, unsoldDelay) {
        super(param1, param2, param3, param4, param5);
        this.unsoldDelay = unsoldDelay;
        this.protocolId = 164;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.unsoldDelay < 0) {
            Logger.error("Forbidden value (" + this.unsoldDelay + ") on element unsoldDelay.");
        }
        buffer.writeInt(this.unsoldDelay);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.unsoldDelay = buffer.readInt();
        if (this.unsoldDelay < 0) {
            Logger.error("Forbidden value (" + this.unsoldDelay + ") on element of ObjectItemToSellInBid.unsoldDelay.");
        }
    }
}

// Generated by Noxus types 
export class ObjectItemToSellInHumanVendorShop extends Item {
    constructor(objectGID, effects, objectUID, quantity, objectPrice, publicPrice) {
        super();
        this.objectGID = objectGID;
        this.effects = effects;
        this.objectUID = objectUID;
        this.quantity = quantity;
        this.objectPrice = objectPrice;
        this.publicPrice = publicPrice;
        this.protocolId = 359;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        buffer.writeVarShort(this.objectGID);
        buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.effects[_loc2_].serialize(buffer);
            this.effects[_loc2_].serialize(buffer);
            _loc2_++;
        }
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        buffer.writeVarInt(this.quantity);
        if (this.objectPrice < 0) {
            Logger.error("Forbidden value (" + this.objectPrice + ") on element objectPrice.");
        }
        buffer.writeVarInt(this.objectPrice);
        if (this.publicPrice < 0) {
            Logger.error("Forbidden value (" + this.publicPrice + ") on element publicPrice.");
        }
        buffer.writeVarInt(this.publicPrice);
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element of ObjectItemToSellInHumanVendorShop.objectGID.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
            _loc5_.deserialize(buffer);
            this.effects.push(_loc5_);
            _loc3_++;
        }
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectItemToSellInHumanVendorShop.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectItemToSellInHumanVendorShop.quantity.");
        }
        this.objectPrice = buffer.readVarUhInt();
        if (this.objectPrice < 0) {
            Logger.error("Forbidden value (" + this.objectPrice + ") on element of ObjectItemToSellInHumanVendorShop.objectPrice.");
        }
        this.publicPrice = buffer.readVarUhInt();
        if (this.publicPrice < 0) {
            Logger.error("Forbidden value (" + this.publicPrice + ") on element of ObjectItemToSellInHumanVendorShop.publicPrice.");
        }
    }
}

// Generated by Noxus types 
export class ObjectItemToSellInNpcShop extends ObjectItemMinimalInformation {
    constructor(param1, param2, objectPrice, buyCriterion) {
        super(param1, param2);
        this.objectPrice = objectPrice;
        this.buyCriterion = buyCriterion;
        this.protocolId = 352;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.objectPrice < 0) {
            Logger.error("Forbidden value (" + this.objectPrice + ") on element objectPrice.");
        }
        buffer.writeVarInt(this.objectPrice);
        buffer.writeUTF(this.buyCriterion);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectPrice = buffer.readVarUhInt();
        if (this.objectPrice < 0) {
            Logger.error("Forbidden value (" + this.objectPrice + ") on element of ObjectItemToSellInNpcShop.objectPrice.");
        }
        this.buyCriterion = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class SellerBuyerDescriptor {
    constructor(quantities, types, taxPercentage, taxModificationPercentage, maxItemLevel, maxItemPerAccount, npcContextualId, unsoldDelay) {
        this.quantities = quantities;
        this.types = types;
        this.taxPercentage = taxPercentage;
        this.taxModificationPercentage = taxModificationPercentage;
        this.maxItemLevel = maxItemLevel;
        this.maxItemPerAccount = maxItemPerAccount;
        this.npcContextualId = npcContextualId;
        this.unsoldDelay = unsoldDelay;
        this.protocolId = 121;
    }
    serialize(buffer) {
        buffer.writeShort(this.quantities.length);
        var _loc2_ = 0;
        while (_loc2_ < this.quantities.length) {
            if (this.quantities[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.quantities[_loc2_] + ") on element 1 (starting at 1) of quantities.");
            }
            buffer.writeVarInt(this.quantities[_loc2_]);
            _loc2_++;
        }
        buffer.writeShort(this.types.length);
        var _loc3_ = 0;
        while (_loc3_ < this.types.length) {
            if (this.types[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.types[_loc3_] + ") on element 2 (starting at 1) of types.");
            }
            buffer.writeVarInt(this.types[_loc3_]);
            _loc3_++;
        }
        buffer.writeFloat(this.taxPercentage);
        buffer.writeFloat(this.taxModificationPercentage);
        if (this.maxItemLevel < 0 || this.maxItemLevel > 255) {
            Logger.error("Forbidden value (" + this.maxItemLevel + ") on element maxItemLevel.");
        }
        buffer.writeByte(this.maxItemLevel);
        if (this.maxItemPerAccount < 0) {
            Logger.error("Forbidden value (" + this.maxItemPerAccount + ") on element maxItemPerAccount.");
        }
        buffer.writeVarInt(this.maxItemPerAccount);
        buffer.writeInt(this.npcContextualId);
        if (this.unsoldDelay < 0) {
            Logger.error("Forbidden value (" + this.unsoldDelay + ") on element unsoldDelay.");
        }
        buffer.writeVarShort(this.unsoldDelay);
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhInt();
            if (_loc6_ < 0) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of quantities.");
            }
            this.quantities.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhInt();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of types.");
            }
            this.types.push(_loc7_);
            _loc5_++;
        }
        this.taxPercentage = buffer.readFloat();
        this.taxModificationPercentage = buffer.readFloat();
        this.maxItemLevel = buffer.readUnsignedByte();
        if (this.maxItemLevel < 0 || this.maxItemLevel > 255) {
            Logger.error("Forbidden value (" + this.maxItemLevel + ") on element of SellerBuyerDescriptor.maxItemLevel.");
        }
        this.maxItemPerAccount = buffer.readVarUhInt();
        if (this.maxItemPerAccount < 0) {
            Logger.error("Forbidden value (" + this.maxItemPerAccount + ") on element of SellerBuyerDescriptor.maxItemPerAccount.");
        }
        this.npcContextualId = buffer.readInt();
        this.unsoldDelay = buffer.readVarUhShort();
        if (this.unsoldDelay < 0) {
            Logger.error("Forbidden value (" + this.unsoldDelay + ") on element of SellerBuyerDescriptor.unsoldDelay.");
        }
    }
}

// Generated by Noxus types 
export class SpellItem extends Item {
    constructor(spellId, spellLevel) {
        super();
        this.spellId = spellId;
        this.spellLevel = spellLevel;
        this.protocolId = 49;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeInt(this.spellId);
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            Logger.error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
        }
        buffer.writeShort(this.spellLevel);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.spellId = buffer.readInt();
        this.spellLevel = buffer.readShort();
        if (this.spellLevel < 1 || this.spellLevel > 200) {
            Logger.error("Forbidden value (" + this.spellLevel + ") on element of SpellItem.spellLevel.");
        }
    }
}

// Generated by Noxus types 
export class ObjectEffect {
    constructor(actionId) {
        this.actionId = actionId;
        this.protocolId = 76;
    }
    serialize(buffer) {
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        buffer.writeVarShort(this.actionId);
    }
    deserialize(buffer) {
        this.actionId = buffer.readVarUhShort();
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element of ObjectEffect.actionId.");
        }
    }
}

// Generated by Noxus types 
export class ObjectEffectCreature extends ObjectEffect {
    constructor(param1, monsterFamilyId) {
        super(param1);
        this.monsterFamilyId = monsterFamilyId;
        this.protocolId = 71;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.monsterFamilyId < 0) {
            Logger.error("Forbidden value (" + this.monsterFamilyId + ") on element monsterFamilyId.");
        }
        buffer.writeVarShort(this.monsterFamilyId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.monsterFamilyId = buffer.readVarUhShort();
        if (this.monsterFamilyId < 0) {
            Logger.error("Forbidden value (" + this.monsterFamilyId + ") on element of ObjectEffectCreature.monsterFamilyId.");
        }
    }
}

// Generated by Noxus types 
export class ObjectEffectDate extends ObjectEffect {
    constructor(param1, year, month, day, hour, minute) {
        super(param1);
        this.year = year;
        this.month = month;
        this.day = day;
        this.hour = hour;
        this.minute = minute;
        this.protocolId = 72;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.year < 0) {
            Logger.error("Forbidden value (" + this.year + ") on element year.");
        }
        buffer.writeVarShort(this.year);
        if (this.month < 0) {
            Logger.error("Forbidden value (" + this.month + ") on element month.");
        }
        buffer.writeByte(this.month);
        if (this.day < 0) {
            Logger.error("Forbidden value (" + this.day + ") on element day.");
        }
        buffer.writeByte(this.day);
        if (this.hour < 0) {
            Logger.error("Forbidden value (" + this.hour + ") on element hour.");
        }
        buffer.writeByte(this.hour);
        if (this.minute < 0) {
            Logger.error("Forbidden value (" + this.minute + ") on element minute.");
        }
        buffer.writeByte(this.minute);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.year = buffer.readVarUhShort();
        if (this.year < 0) {
            Logger.error("Forbidden value (" + this.year + ") on element of ObjectEffectDate.year.");
        }
        this.month = buffer.readByte();
        if (this.month < 0) {
            Logger.error("Forbidden value (" + this.month + ") on element of ObjectEffectDate.month.");
        }
        this.day = buffer.readByte();
        if (this.day < 0) {
            Logger.error("Forbidden value (" + this.day + ") on element of ObjectEffectDate.day.");
        }
        this.hour = buffer.readByte();
        if (this.hour < 0) {
            Logger.error("Forbidden value (" + this.hour + ") on element of ObjectEffectDate.hour.");
        }
        this.minute = buffer.readByte();
        if (this.minute < 0) {
            Logger.error("Forbidden value (" + this.minute + ") on element of ObjectEffectDate.minute.");
        }
    }
}

// Generated by Noxus types 
export class ObjectEffectDice extends ObjectEffect {
    constructor(param1, diceNum, diceSide, diceConst) {
        super(param1);
        this.diceNum = diceNum;
        this.diceSide = diceSide;
        this.diceConst = diceConst;
        this.protocolId = 73;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.diceNum < 0) {
            Logger.error("Forbidden value (" + this.diceNum + ") on element diceNum.");
        }
        buffer.writeVarShort(this.diceNum);
        if (this.diceSide < 0) {
            Logger.error("Forbidden value (" + this.diceSide + ") on element diceSide.");
        }
        buffer.writeVarShort(this.diceSide);
        if (this.diceConst < 0) {
            Logger.error("Forbidden value (" + this.diceConst + ") on element diceConst.");
        }
        buffer.writeVarShort(this.diceConst);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.diceNum = buffer.readVarUhShort();
        if (this.diceNum < 0) {
            Logger.error("Forbidden value (" + this.diceNum + ") on element of ObjectEffectDice.diceNum.");
        }
        this.diceSide = buffer.readVarUhShort();
        if (this.diceSide < 0) {
            Logger.error("Forbidden value (" + this.diceSide + ") on element of ObjectEffectDice.diceSide.");
        }
        this.diceConst = buffer.readVarUhShort();
        if (this.diceConst < 0) {
            Logger.error("Forbidden value (" + this.diceConst + ") on element of ObjectEffectDice.diceConst.");
        }
    }
}

// Generated by Noxus types 
export class ObjectEffectDuration extends ObjectEffect {
    constructor(param1, days, hours, minutes) {
        super(param1);
        this.days = days;
        this.hours = hours;
        this.minutes = minutes;
        this.protocolId = 75;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.days < 0) {
            Logger.error("Forbidden value (" + this.days + ") on element days.");
        }
        buffer.writeVarShort(this.days);
        if (this.hours < 0) {
            Logger.error("Forbidden value (" + this.hours + ") on element hours.");
        }
        buffer.writeByte(this.hours);
        if (this.minutes < 0) {
            Logger.error("Forbidden value (" + this.minutes + ") on element minutes.");
        }
        buffer.writeByte(this.minutes);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.days = buffer.readVarUhShort();
        if (this.days < 0) {
            Logger.error("Forbidden value (" + this.days + ") on element of ObjectEffectDuration.days.");
        }
        this.hours = buffer.readByte();
        if (this.hours < 0) {
            Logger.error("Forbidden value (" + this.hours + ") on element of ObjectEffectDuration.hours.");
        }
        this.minutes = buffer.readByte();
        if (this.minutes < 0) {
            Logger.error("Forbidden value (" + this.minutes + ") on element of ObjectEffectDuration.minutes.");
        }
    }
}

// Generated by Noxus types 
export class ObjectEffectInteger extends ObjectEffect {
    constructor(param1, value) {
        super(param1);
        this.value = value;
        this.protocolId = 70;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.value < 0) {
            Logger.error("Forbidden value (" + this.value + ") on element value.");
        }
        buffer.writeVarShort(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readVarUhShort();
        if (this.value < 0) {
            Logger.error("Forbidden value (" + this.value + ") on element of ObjectEffectInteger.value.");
        }
    }
}

// Generated by Noxus types 
export class ObjectEffectLadder extends ObjectEffectCreature {
    constructor(param1, param2, monsterCount) {
        super(param1, param2);
        this.monsterCount = monsterCount;
        this.protocolId = 81;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.monsterCount < 0) {
            Logger.error("Forbidden value (" + this.monsterCount + ") on element monsterCount.");
        }
        buffer.writeVarInt(this.monsterCount);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.monsterCount = buffer.readVarUhInt();
        if (this.monsterCount < 0) {
            Logger.error("Forbidden value (" + this.monsterCount + ") on element of ObjectEffectLadder.monsterCount.");
        }
    }
}

// Generated by Noxus types 
export class ObjectEffectMinMax extends ObjectEffect {
    constructor(param1, min, max) {
        super(param1);
        this.min = min;
        this.max = max;
        this.protocolId = 82;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.min < 0) {
            Logger.error("Forbidden value (" + this.min + ") on element min.");
        }
        buffer.writeVarInt(this.min);
        if (this.max < 0) {
            Logger.error("Forbidden value (" + this.max + ") on element max.");
        }
        buffer.writeVarInt(this.max);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.min = buffer.readVarUhInt();
        if (this.min < 0) {
            Logger.error("Forbidden value (" + this.min + ") on element of ObjectEffectMinMax.min.");
        }
        this.max = buffer.readVarUhInt();
        if (this.max < 0) {
            Logger.error("Forbidden value (" + this.max + ") on element of ObjectEffectMinMax.max.");
        }
    }
}

// Generated by Noxus types 
export class ObjectEffectMount extends ObjectEffect {
    constructor(param1, mountId, date, modelId) {
        super(param1);
        this.mountId = mountId;
        this.date = date;
        this.modelId = modelId;
        this.protocolId = 179;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.mountId < 0) {
            Logger.error("Forbidden value (" + this.mountId + ") on element mountId.");
        }
        buffer.writeInt(this.mountId);
        if (this.date < -9007199254740990 || this.date > 9007199254740990) {
            Logger.error("Forbidden value (" + this.date + ") on element date.");
        }
        buffer.writeDouble(this.date);
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element modelId.");
        }
        buffer.writeVarShort(this.modelId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.mountId = buffer.readInt();
        if (this.mountId < 0) {
            Logger.error("Forbidden value (" + this.mountId + ") on element of ObjectEffectMount.mountId.");
        }
        this.date = buffer.readDouble();
        if (this.date < -9007199254740990 || this.date > 9007199254740990) {
            Logger.error("Forbidden value (" + this.date + ") on element of ObjectEffectMount.date.");
        }
        this.modelId = buffer.readVarUhShort();
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element of ObjectEffectMount.modelId.");
        }
    }
}

// Generated by Noxus types 
export class ObjectEffectString extends ObjectEffect {
    constructor(param1, value) {
        super(param1);
        this.value = value;
        this.protocolId = 74;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class ProtectedEntityWaitingForHelpInfo {
    constructor(timeLeftBeforeFight, waitTimeForPlacement, nbPositionForDefensors) {
        this.timeLeftBeforeFight = timeLeftBeforeFight;
        this.waitTimeForPlacement = waitTimeForPlacement;
        this.nbPositionForDefensors = nbPositionForDefensors;
        this.protocolId = 186;
    }
    serialize(buffer) {
        buffer.writeInt(this.timeLeftBeforeFight);
        buffer.writeInt(this.waitTimeForPlacement);
        if (this.nbPositionForDefensors < 0) {
            Logger.error("Forbidden value (" + this.nbPositionForDefensors + ") on element nbPositionForDefensors.");
        }
        buffer.writeByte(this.nbPositionForDefensors);
    }
    deserialize(buffer) {
        this.timeLeftBeforeFight = buffer.readInt();
        this.waitTimeForPlacement = buffer.readInt();
        this.nbPositionForDefensors = buffer.readByte();
        if (this.nbPositionForDefensors < 0) {
            Logger.error("Forbidden value (" + this.nbPositionForDefensors + ") on element of ProtectedEntityWaitingForHelpInfo.nbPositionForDefensors.");
        }
    }
}

// Generated by Noxus types 
export class FinishMoveInformations {
    constructor(finishMoveId, finishMoveState) {
        this.finishMoveId = finishMoveId;
        this.finishMoveState = finishMoveState;
        this.protocolId = 506;
    }
    serialize(buffer) {
        if (this.finishMoveId < 0) {
            Logger.error("Forbidden value (" + this.finishMoveId + ") on element finishMoveId.");
        }
        buffer.writeInt(this.finishMoveId);
        buffer.writeBoolean(this.finishMoveState);
    }
    deserialize(buffer) {
        this.finishMoveId = buffer.readInt();
        if (this.finishMoveId < 0) {
            Logger.error("Forbidden value (" + this.finishMoveId + ") on element of FinishMoveInformations.finishMoveId.");
        }
        this.finishMoveState = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class AbstractContactInformations {
    constructor(accountId, accountName) {
        this.accountId = accountId;
        this.accountName = accountName;
        this.protocolId = 380;
    }
    serialize(buffer) {
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        buffer.writeInt(this.accountId);
        buffer.writeUTF(this.accountName);
    }
    deserialize(buffer) {
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of AbstractContactInformations.accountId.");
        }
        this.accountName = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class FriendInformations extends AbstractContactInformations {
    constructor(param1, param2, playerState, lastConnection, achievementPoints) {
        super(param1, param2);
        this.playerState = playerState;
        this.lastConnection = lastConnection;
        this.achievementPoints = achievementPoints;
        this.protocolId = 78;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.playerState);
        if (this.lastConnection < 0) {
            Logger.error("Forbidden value (" + this.lastConnection + ") on element lastConnection.");
        }
        buffer.writeVarShort(this.lastConnection);
        buffer.writeInt(this.achievementPoints);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerState = buffer.readByte();
        if (this.playerState < 0) {
            Logger.error("Forbidden value (" + this.playerState + ") on element of FriendInformations.playerState.");
        }
        this.lastConnection = buffer.readVarUhShort();
        if (this.lastConnection < 0) {
            Logger.error("Forbidden value (" + this.lastConnection + ") on element of FriendInformations.lastConnection.");
        }
        this.achievementPoints = buffer.readInt();
    }
}

// Generated by Noxus types 
export class FriendOnlineInformations extends FriendInformations {
    constructor(param1, param2, param3, param4, param5, playerId, playerName, level, alignmentSide, breed, sex, guildInfo, moodSmileyId, status) {
        super(param1, param2, param3, param4, param5);
        this.playerId = playerId;
        this.playerName = playerName;
        this.level = level;
        this.alignmentSide = alignmentSide;
        this.breed = breed;
        this.sex = sex;
        this.guildInfo = guildInfo;
        this.moodSmileyId = moodSmileyId;
        this.status = status;
        this.protocolId = 92;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        buffer.writeVarLong(this.playerId);
        buffer.writeUTF(this.playerName);
        if (this.level < 0 || this.level > 206) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
        buffer.writeByte(this.alignmentSide);
        buffer.writeByte(this.breed);
        buffer.writeBoolean(this.sex);
        this.guildInfo.serialize(buffer);
        if (this.moodSmileyId < 0) {
            Logger.error("Forbidden value (" + this.moodSmileyId + ") on element moodSmileyId.");
        }
        buffer.writeVarShort(this.moodSmileyId);
        buffer.writeShort(this.status.protocolId);
        this.status.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of FriendOnlineInformations.playerId.");
        }
        this.playerName = buffer.readUTF();
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 206) {
            Logger.error("Forbidden value (" + this.level + ") on element of FriendOnlineInformations.level.");
        }
        this.alignmentSide = buffer.readByte();
        this.breed = buffer.readByte();
        if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Huppermage) {
            Logger.error("Forbidden value (" + this.breed + ") on element of FriendOnlineInformations.breed.");
        }
        this.sex = buffer.readBoolean();
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
        this.moodSmileyId = buffer.readVarUhShort();
        if (this.moodSmileyId < 0) {
            Logger.error("Forbidden value (" + this.moodSmileyId + ") on element of FriendOnlineInformations.moodSmileyId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class FriendSpouseInformations {
    constructor(spouseAccountId, spouseId, spouseName, spouseLevel, breed, sex, spouseEntityLook, guildInfo, alignmentSide) {
        this.spouseAccountId = spouseAccountId;
        this.spouseId = spouseId;
        this.spouseName = spouseName;
        this.spouseLevel = spouseLevel;
        this.breed = breed;
        this.sex = sex;
        this.spouseEntityLook = spouseEntityLook;
        this.guildInfo = guildInfo;
        this.alignmentSide = alignmentSide;
        this.protocolId = 77;
    }
    serialize(buffer) {
        if (this.spouseAccountId < 0) {
            Logger.error("Forbidden value (" + this.spouseAccountId + ") on element spouseAccountId.");
        }
        buffer.writeInt(this.spouseAccountId);
        if (this.spouseId < 0 || this.spouseId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.spouseId + ") on element spouseId.");
        }
        buffer.writeVarLong(this.spouseId);
        buffer.writeUTF(this.spouseName);
        if (this.spouseLevel < 1 || this.spouseLevel > 206) {
            Logger.error("Forbidden value (" + this.spouseLevel + ") on element spouseLevel.");
        }
        buffer.writeByte(this.spouseLevel);
        buffer.writeByte(this.breed);
        buffer.writeByte(this.sex);
        this.spouseEntityLook.serialize(buffer);
        this.guildInfo.serialize(buffer);
        buffer.writeByte(this.alignmentSide);
    }
    deserialize(buffer) {
        this.spouseAccountId = buffer.readInt();
        if (this.spouseAccountId < 0) {
            Logger.error("Forbidden value (" + this.spouseAccountId + ") on element of FriendSpouseInformations.spouseAccountId.");
        }
        this.spouseId = buffer.readVarUhLong();
        if (this.spouseId < 0 || this.spouseId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.spouseId + ") on element of FriendSpouseInformations.spouseId.");
        }
        this.spouseName = buffer.readUTF();
        this.spouseLevel = buffer.readUnsignedByte();
        if (this.spouseLevel < 1 || this.spouseLevel > 206) {
            Logger.error("Forbidden value (" + this.spouseLevel + ") on element of FriendSpouseInformations.spouseLevel.");
        }
        this.breed = buffer.readByte();
        this.sex = buffer.readByte();
        this.spouseEntityLook = new EntityLook();
        this.spouseEntityLook.deserialize(buffer);
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
        this.alignmentSide = buffer.readByte();
    }
}

// Generated by Noxus types 
export class FriendSpouseOnlineInformations extends FriendSpouseInformations {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, mapId, subAreaId, inFight, followSpouse) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9);
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.inFight = inFight;
        this.followSpouse = followSpouse;
        this.protocolId = 93;
    }
    serialize(buffer) {
        super.serialize(buffer);
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.inFight);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.followSpouse);
        buffer.writeByte(_loc2_);
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readByte();
        this.inFight = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.followSpouse = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element of FriendSpouseOnlineInformations.mapId.");
        }
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of FriendSpouseOnlineInformations.subAreaId.");
        }
    }
}

// Generated by Noxus types 
export class IgnoredInformations extends AbstractContactInformations {
    constructor(param1, param2) {
        super(param1, param2);
        this.protocolId = 106;
    }
    serialize(buffer) {
        super.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class IgnoredOnlineInformations extends IgnoredInformations {
    constructor(param1, param2, playerId, playerName, breed, sex) {
        super(param1, param2);
        this.playerId = playerId;
        this.playerName = playerName;
        this.breed = breed;
        this.sex = sex;
        this.protocolId = 105;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        buffer.writeVarLong(this.playerId);
        buffer.writeUTF(this.playerName);
        buffer.writeByte(this.breed);
        buffer.writeBoolean(this.sex);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of IgnoredOnlineInformations.playerId.");
        }
        this.playerName = buffer.readUTF();
        this.breed = buffer.readByte();
        if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Huppermage) {
            Logger.error("Forbidden value (" + this.breed + ") on element of IgnoredOnlineInformations.breed.");
        }
        this.sex = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class GuildEmblem {
    constructor(symbolShape, symbolColor, backgroundShape, backgroundColor) {
        this.symbolShape = symbolShape;
        this.symbolColor = symbolColor;
        this.backgroundShape = backgroundShape;
        this.backgroundColor = backgroundColor;
        this.protocolId = 87;
    }
    serialize(buffer) {
        if (this.symbolShape < 0) {
            Logger.error("Forbidden value (" + this.symbolShape + ") on element symbolShape.");
        }
        buffer.writeVarShort(this.symbolShape);
        buffer.writeInt(this.symbolColor);
        if (this.backgroundShape < 0) {
            Logger.error("Forbidden value (" + this.backgroundShape + ") on element backgroundShape.");
        }
        buffer.writeByte(this.backgroundShape);
        buffer.writeInt(this.backgroundColor);
    }
    deserialize(buffer) {
        this.symbolShape = buffer.readVarUhShort();
        if (this.symbolShape < 0) {
            Logger.error("Forbidden value (" + this.symbolShape + ") on element of GuildEmblem.symbolShape.");
        }
        this.symbolColor = buffer.readInt();
        this.backgroundShape = buffer.readByte();
        if (this.backgroundShape < 0) {
            Logger.error("Forbidden value (" + this.backgroundShape + ") on element of GuildEmblem.backgroundShape.");
        }
        this.backgroundColor = buffer.readInt();
    }
}

// Generated by Noxus types 
export class GuildMember extends CharacterMinimalInformations {
    constructor(param1, param2, param3, breed, sex, rank, givenExperience, experienceGivenPercent, rights, connected, alignmentSide, hoursSinceLastConnection, moodSmileyId, accountId, achievementPoints, status) {
        super(param1, param2, param3);
        this.breed = breed;
        this.sex = sex;
        this.rank = rank;
        this.givenExperience = givenExperience;
        this.experienceGivenPercent = experienceGivenPercent;
        this.rights = rights;
        this.connected = connected;
        this.alignmentSide = alignmentSide;
        this.hoursSinceLastConnection = hoursSinceLastConnection;
        this.moodSmileyId = moodSmileyId;
        this.accountId = accountId;
        this.achievementPoints = achievementPoints;
        this.status = status;
        this.protocolId = 88;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.breed);
        buffer.writeBoolean(this.sex);
        if (this.rank < 0) {
            Logger.error("Forbidden value (" + this.rank + ") on element rank.");
        }
        buffer.writeVarShort(this.rank);
        if (this.givenExperience < 0 || this.givenExperience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.givenExperience + ") on element givenExperience.");
        }
        buffer.writeVarLong(this.givenExperience);
        if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
            Logger.error("Forbidden value (" + this.experienceGivenPercent + ") on element experienceGivenPercent.");
        }
        buffer.writeByte(this.experienceGivenPercent);
        if (this.rights < 0) {
            Logger.error("Forbidden value (" + this.rights + ") on element rights.");
        }
        buffer.writeVarInt(this.rights);
        buffer.writeByte(this.connected);
        buffer.writeByte(this.alignmentSide);
        if (this.hoursSinceLastConnection < 0 || this.hoursSinceLastConnection > 65535) {
            Logger.error("Forbidden value (" + this.hoursSinceLastConnection + ") on element hoursSinceLastConnection.");
        }
        buffer.writeShort(this.hoursSinceLastConnection);
        if (this.moodSmileyId < 0) {
            Logger.error("Forbidden value (" + this.moodSmileyId + ") on element moodSmileyId.");
        }
        buffer.writeVarShort(this.moodSmileyId);
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        buffer.writeInt(this.accountId);
        buffer.writeInt(this.achievementPoints);
        buffer.writeShort(this.status.protocolId);
        this.status.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.breed = buffer.readByte();
        this.sex = buffer.readBoolean();
        this.rank = buffer.readVarUhShort();
        if (this.rank < 0) {
            Logger.error("Forbidden value (" + this.rank + ") on element of GuildMember.rank.");
        }
        this.givenExperience = buffer.readVarUhLong();
        if (this.givenExperience < 0 || this.givenExperience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.givenExperience + ") on element of GuildMember.givenExperience.");
        }
        this.experienceGivenPercent = buffer.readByte();
        if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
            Logger.error("Forbidden value (" + this.experienceGivenPercent + ") on element of GuildMember.experienceGivenPercent.");
        }
        this.rights = buffer.readVarUhInt();
        if (this.rights < 0) {
            Logger.error("Forbidden value (" + this.rights + ") on element of GuildMember.rights.");
        }
        this.connected = buffer.readByte();
        if (this.connected < 0) {
            Logger.error("Forbidden value (" + this.connected + ") on element of GuildMember.connected.");
        }
        this.alignmentSide = buffer.readByte();
        this.hoursSinceLastConnection = buffer.readUnsignedShort();
        if (this.hoursSinceLastConnection < 0 || this.hoursSinceLastConnection > 65535) {
            Logger.error("Forbidden value (" + this.hoursSinceLastConnection + ") on element of GuildMember.hoursSinceLastConnection.");
        }
        this.moodSmileyId = buffer.readVarUhShort();
        if (this.moodSmileyId < 0) {
            Logger.error("Forbidden value (" + this.moodSmileyId + ") on element of GuildMember.moodSmileyId.");
        }
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of GuildMember.accountId.");
        }
        this.achievementPoints = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class HavenBagFurnitureInformation {
    constructor(cellId, funitureId, orientation) {
        this.cellId = cellId;
        this.funitureId = funitureId;
        this.orientation = orientation;
        this.protocolId = 498;
    }
    serialize(buffer) {
        if (this.cellId < 0) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        buffer.writeVarShort(this.cellId);
        buffer.writeInt(this.funitureId);
        if (this.orientation < 0) {
            Logger.error("Forbidden value (" + this.orientation + ") on element orientation.");
        }
        buffer.writeByte(this.orientation);
    }
    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of HavenBagFurnitureInformation.cellId.");
        }
        this.funitureId = buffer.readInt();
        this.orientation = buffer.readByte();
        if (this.orientation < 0) {
            Logger.error("Forbidden value (" + this.orientation + ") on element of HavenBagFurnitureInformation.orientation.");
        }
    }
}

// Generated by Noxus types 
export class AdditionalTaxCollectorInformations {
    constructor(collectorCallerName, date) {
        this.collectorCallerName = collectorCallerName;
        this.date = date;
        this.protocolId = 165;
    }
    serialize(buffer) {
        buffer.writeUTF(this.collectorCallerName);
        if (this.date < 0) {
            Logger.error("Forbidden value (" + this.date + ") on element date.");
        }
        buffer.writeInt(this.date);
    }
    deserialize(buffer) {
        this.collectorCallerName = buffer.readUTF();
        this.date = buffer.readInt();
        if (this.date < 0) {
            Logger.error("Forbidden value (" + this.date + ") on element of AdditionalTaxCollectorInformations.date.");
        }
    }
}

// Generated by Noxus types 
export class TaxCollectorBasicInformations {
    constructor(firstNameId, lastNameId, worldX, worldY, mapId, subAreaId) {
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.protocolId = 96;
    }
    serialize(buffer) {
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        buffer.writeVarShort(this.lastNameId);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
    }
    deserialize(buffer) {
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorBasicInformations.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorBasicInformations.lastNameId.");
        }
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of TaxCollectorBasicInformations.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of TaxCollectorBasicInformations.worldY.");
        }
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorBasicInformations.subAreaId.");
        }
    }
}

// Generated by Noxus types 
export class TaxCollectorComplementaryInformations {
    constructor() {
        this.protocolId = 448;
    }
    serialize(buffer) {
    }
    deserialize(buffer) {
    }
}

// Generated by Noxus types 
export class TaxCollectorFightersInformation {
    constructor(collectorId, allyCharactersInformations, enemyCharactersInformations) {
        this.collectorId = collectorId;
        this.allyCharactersInformations = allyCharactersInformations;
        this.enemyCharactersInformations = enemyCharactersInformations;
        this.protocolId = 169;
    }
    serialize(buffer) {
        buffer.writeInt(this.collectorId);
        buffer.writeShort(this.allyCharactersInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.allyCharactersInformations.length) {
            this.allyCharactersInformations[_loc2_].serialize(buffer);
            this.allyCharactersInformations[_loc2_].serialize(buffer);
            _loc2_++;
        }
        buffer.writeShort(this.enemyCharactersInformations.length);
        var _loc3_ = 0;
        while (_loc3_ < this.enemyCharactersInformations.length) {
            this.enemyCharactersInformations[_loc3_].serialize(buffer);
            this.enemyCharactersInformations[_loc3_].serialize(buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = 0;
        var _loc9_ = null;
        this.collectorId = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc6_);
            _loc7_.deserialize(buffer);
            this.allyCharactersInformations.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readUnsignedShort();
            _loc9_ = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc8_);
            _loc9_.deserialize(buffer);
            this.enemyCharactersInformations.push(_loc9_);
            _loc5_++;
        }
    }
}

// Generated by Noxus types 
export class TaxCollectorGuildInformations extends TaxCollectorComplementaryInformations {
    constructor(guild) {
        super();
        this.guild = guild;
        this.protocolId = 446;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.guild.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.guild = new BasicGuildInformations();
        this.guild.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class TaxCollectorInformations {
    constructor(uniqueId, firtNameId, lastNameId, additionalInfos, worldX, worldY, subAreaId, state, look, complements) {
        this.uniqueId = uniqueId;
        this.firtNameId = firtNameId;
        this.lastNameId = lastNameId;
        this.additionalInfos = additionalInfos;
        this.worldX = worldX;
        this.worldY = worldY;
        this.subAreaId = subAreaId;
        this.state = state;
        this.look = look;
        this.complements = complements;
        this.protocolId = 167;
    }
    serialize(buffer) {
        buffer.writeInt(this.uniqueId);
        if (this.firtNameId < 0) {
            Logger.error("Forbidden value (" + this.firtNameId + ") on element firtNameId.");
        }
        buffer.writeVarShort(this.firtNameId);
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        buffer.writeVarShort(this.lastNameId);
        this.additionalInfos.serialize(buffer);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
        buffer.writeByte(this.state);
        this.look.serialize(buffer);
        buffer.writeShort(this.complements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.complements.length) {
            this.complements[_loc2_].serialize(buffer);
            this.complements[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.uniqueId = buffer.readInt();
        this.firtNameId = buffer.readVarUhShort();
        if (this.firtNameId < 0) {
            Logger.error("Forbidden value (" + this.firtNameId + ") on element of TaxCollectorInformations.firtNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorInformations.lastNameId.");
        }
        this.additionalInfos = new Types.AdditionalTaxCollectorInformations();
        this.additionalInfos.deserialize(buffer);
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of TaxCollectorInformations.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of TaxCollectorInformations.worldY.");
        }
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorInformations.subAreaId.");
        }
        this.state = buffer.readByte();
        if (this.state < 0) {
            Logger.error("Forbidden value (" + this.state + ") on element of TaxCollectorInformations.state.");
        }
        this.look = new EntityLook();
        this.look.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.guild.tax.TaxCollectorComplementaryInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.complements.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class TaxCollectorLootInformations extends TaxCollectorComplementaryInformations {
    constructor(kamas, experience, pods, itemsValue) {
        super();
        this.kamas = kamas;
        this.experience = experience;
        this.pods = pods;
        this.itemsValue = itemsValue;
        this.protocolId = 372;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        buffer.writeVarInt(this.kamas);
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element experience.");
        }
        buffer.writeVarLong(this.experience);
        if (this.pods < 0) {
            Logger.error("Forbidden value (" + this.pods + ") on element pods.");
        }
        buffer.writeVarInt(this.pods);
        if (this.itemsValue < 0) {
            Logger.error("Forbidden value (" + this.itemsValue + ") on element itemsValue.");
        }
        buffer.writeVarInt(this.itemsValue);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.kamas = buffer.readVarUhInt();
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element of TaxCollectorLootInformations.kamas.");
        }
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element of TaxCollectorLootInformations.experience.");
        }
        this.pods = buffer.readVarUhInt();
        if (this.pods < 0) {
            Logger.error("Forbidden value (" + this.pods + ") on element of TaxCollectorLootInformations.pods.");
        }
        this.itemsValue = buffer.readVarUhInt();
        if (this.itemsValue < 0) {
            Logger.error("Forbidden value (" + this.itemsValue + ") on element of TaxCollectorLootInformations.itemsValue.");
        }
    }
}

// Generated by Noxus types 
export class TaxCollectorMovement {
    constructor(movementType, basicInfos, playerId, playerName) {
        this.movementType = movementType;
        this.basicInfos = basicInfos;
        this.playerId = playerId;
        this.playerName = playerName;
        this.protocolId = 493;
    }
    serialize(buffer) {
        buffer.writeByte(this.movementType);
        this.basicInfos.serialize(buffer);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        buffer.writeVarLong(this.playerId);
        buffer.writeUTF(this.playerName);
    }
    deserialize(buffer) {
        this.movementType = buffer.readByte();
        if (this.movementType < 0) {
            Logger.error("Forbidden value (" + this.movementType + ") on element of TaxCollectorMovement.movementType.");
        }
        this.basicInfos = new Types.TaxCollectorBasicInformations();
        this.basicInfos.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of TaxCollectorMovement.playerId.");
        }
        this.playerName = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class TaxCollectorWaitingForHelpInformations extends TaxCollectorComplementaryInformations {
    constructor(waitingForHelpInfo) {
        super();
        this.waitingForHelpInfo = waitingForHelpInfo;
        this.protocolId = 447;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.waitingForHelpInfo.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
        this.waitingForHelpInfo.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class AccountHouseInformations {
    constructor(houseId, modelId, worldX, worldY, mapId, subAreaId) {
        this.houseId = houseId;
        this.modelId = modelId;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.protocolId = 390;
    }
    serialize(buffer) {
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        buffer.writeVarInt(this.houseId);
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element modelId.");
        }
        buffer.writeVarShort(this.modelId);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
    }
    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element of AccountHouseInformations.houseId.");
        }
        this.modelId = buffer.readVarUhShort();
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element of AccountHouseInformations.modelId.");
        }
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of AccountHouseInformations.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of AccountHouseInformations.worldY.");
        }
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of AccountHouseInformations.subAreaId.");
        }
    }
}

// Generated by Noxus types 
export class HouseInformations {
    constructor(houseId, doorsOnMap, ownerName, isOnSale, isSaleLocked, modelId) {
        this.houseId = houseId;
        this.doorsOnMap = doorsOnMap;
        this.ownerName = ownerName;
        this.isOnSale = isOnSale;
        this.isSaleLocked = isSaleLocked;
        this.modelId = modelId;
        this.protocolId = 111;
    }
    serialize(buffer) {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.isOnSale);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.isSaleLocked);
        buffer.writeByte(_loc2_);
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        buffer.writeVarInt(this.houseId);
        buffer.writeShort(this.doorsOnMap.length);
        var _loc3_ = 0;
        while (_loc3_ < this.doorsOnMap.length) {
            if (this.doorsOnMap[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.doorsOnMap[_loc3_] + ") on element 2 (starting at 1) of doorsOnMap.");
            }
            buffer.writeInt(this.doorsOnMap[_loc3_]);
            _loc3_++;
        }
        buffer.writeUTF(this.ownerName);
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element modelId.");
        }
        buffer.writeVarShort(this.modelId);
    }
    deserialize(buffer) {
        var _loc5_ = 0;
        var _loc2_ = buffer.readByte();
        this.isOnSale = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.isSaleLocked = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element of HouseInformations.houseId.");
        }
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc5_ = buffer.readInt();
            if (_loc5_ < 0) {
                Logger.error("Forbidden value (" + _loc5_ + ") on elements of doorsOnMap.");
            }
            this.doorsOnMap.push(_loc5_);
            _loc4_++;
        }
        this.ownerName = buffer.readUTF();
        this.modelId = buffer.readVarUhShort();
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element of HouseInformations.modelId.");
        }
    }
}

// Generated by Noxus types 
export class HouseInformationsExtended extends HouseInformations {
    constructor(param1, param2, param3, param4, param5, param6, guildInfo) {
        super(param1, param2, param3, param4, param5, param6);
        this.guildInfo = guildInfo;
        this.protocolId = 112;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.guildInfo.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class HouseInformationsForGuild {
    constructor(houseId, modelId, ownerName, worldX, worldY, mapId, subAreaId, skillListIds, guildshareParams) {
        this.houseId = houseId;
        this.modelId = modelId;
        this.ownerName = ownerName;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.skillListIds = skillListIds;
        this.guildshareParams = guildshareParams;
        this.protocolId = 170;
    }
    serialize(buffer) {
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        buffer.writeVarInt(this.houseId);
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element modelId.");
        }
        buffer.writeVarInt(this.modelId);
        buffer.writeUTF(this.ownerName);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
        buffer.writeShort(this.skillListIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.skillListIds.length) {
            buffer.writeInt(this.skillListIds[_loc2_]);
            _loc2_++;
        }
        if (this.guildshareParams < 0) {
            Logger.error("Forbidden value (" + this.guildshareParams + ") on element guildshareParams.");
        }
        buffer.writeVarInt(this.guildshareParams);
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element of HouseInformationsForGuild.houseId.");
        }
        this.modelId = buffer.readVarUhInt();
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element of HouseInformationsForGuild.modelId.");
        }
        this.ownerName = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of HouseInformationsForGuild.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of HouseInformationsForGuild.worldY.");
        }
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of HouseInformationsForGuild.subAreaId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.skillListIds.push(_loc4_);
            _loc3_++;
        }
        this.guildshareParams = buffer.readVarUhInt();
        if (this.guildshareParams < 0) {
            Logger.error("Forbidden value (" + this.guildshareParams + ") on element of HouseInformationsForGuild.guildshareParams.");
        }
    }
}

// Generated by Noxus types 
export class HouseInformationsForSell {
    constructor(modelId, ownerName, ownerConnected, worldX, worldY, subAreaId, nbRoom, nbChest, skillListIds, isLocked, price) {
        this.modelId = modelId;
        this.ownerName = ownerName;
        this.ownerConnected = ownerConnected;
        this.worldX = worldX;
        this.worldY = worldY;
        this.subAreaId = subAreaId;
        this.nbRoom = nbRoom;
        this.nbChest = nbChest;
        this.skillListIds = skillListIds;
        this.isLocked = isLocked;
        this.price = price;
        this.protocolId = 221;
    }
    serialize(buffer) {
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element modelId.");
        }
        buffer.writeVarInt(this.modelId);
        buffer.writeUTF(this.ownerName);
        buffer.writeBoolean(this.ownerConnected);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
        buffer.writeByte(this.nbRoom);
        buffer.writeByte(this.nbChest);
        buffer.writeShort(this.skillListIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.skillListIds.length) {
            buffer.writeInt(this.skillListIds[_loc2_]);
            _loc2_++;
        }
        buffer.writeBoolean(this.isLocked);
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element price.");
        }
        buffer.writeVarInt(this.price);
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.modelId = buffer.readVarUhInt();
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element of HouseInformationsForSell.modelId.");
        }
        this.ownerName = buffer.readUTF();
        this.ownerConnected = buffer.readBoolean();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of HouseInformationsForSell.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of HouseInformationsForSell.worldY.");
        }
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of HouseInformationsForSell.subAreaId.");
        }
        this.nbRoom = buffer.readByte();
        this.nbChest = buffer.readByte();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            this.skillListIds.push(_loc4_);
            _loc3_++;
        }
        this.isLocked = buffer.readBoolean();
        this.price = buffer.readVarUhInt();
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element of HouseInformationsForSell.price.");
        }
    }
}

// Generated by Noxus types 
export class HouseInformationsInside {
    constructor(houseId, modelId, ownerId, ownerName, worldX, worldY, price, isLocked) {
        this.houseId = houseId;
        this.modelId = modelId;
        this.ownerId = ownerId;
        this.ownerName = ownerName;
        this.worldX = worldX;
        this.worldY = worldY;
        this.price = price;
        this.isLocked = isLocked;
        this.protocolId = 218;
    }
    serialize(buffer) {
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        buffer.writeVarInt(this.houseId);
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element modelId.");
        }
        buffer.writeVarShort(this.modelId);
        buffer.writeInt(this.ownerId);
        buffer.writeUTF(this.ownerName);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element price.");
        }
        buffer.writeInt(this.price);
        buffer.writeBoolean(this.isLocked);
    }
    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element of HouseInformationsInside.houseId.");
        }
        this.modelId = buffer.readVarUhShort();
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element of HouseInformationsInside.modelId.");
        }
        this.ownerId = buffer.readInt();
        this.ownerName = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of HouseInformationsInside.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of HouseInformationsInside.worldY.");
        }
        this.price = buffer.readInt();
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element of HouseInformationsInside.price.");
        }
        this.isLocked = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class Idol {
    constructor(id, xpBonusPercent, dropBonusPercent) {
        this.id = id;
        this.xpBonusPercent = xpBonusPercent;
        this.dropBonusPercent = dropBonusPercent;
        this.protocolId = 489;
    }
    serialize(buffer) {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeVarShort(this.id);
        if (this.xpBonusPercent < 0) {
            Logger.error("Forbidden value (" + this.xpBonusPercent + ") on element xpBonusPercent.");
        }
        buffer.writeVarShort(this.xpBonusPercent);
        if (this.dropBonusPercent < 0) {
            Logger.error("Forbidden value (" + this.dropBonusPercent + ") on element dropBonusPercent.");
        }
        buffer.writeVarShort(this.dropBonusPercent);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of Idol.id.");
        }
        this.xpBonusPercent = buffer.readVarUhShort();
        if (this.xpBonusPercent < 0) {
            Logger.error("Forbidden value (" + this.xpBonusPercent + ") on element of Idol.xpBonusPercent.");
        }
        this.dropBonusPercent = buffer.readVarUhShort();
        if (this.dropBonusPercent < 0) {
            Logger.error("Forbidden value (" + this.dropBonusPercent + ") on element of Idol.dropBonusPercent.");
        }
    }
}

// Generated by Noxus types 
export class PartyIdol extends Idol {
    constructor(param1, param2, param3, ownersIds) {
        super(param1, param2, param3);
        this.ownersIds = ownersIds;
        this.protocolId = 490;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeShort(this.ownersIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ownersIds.length) {
            if (this.ownersIds[_loc2_] < 0 || this.ownersIds[_loc2_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.ownersIds[_loc2_] + ") on element 1 (starting at 1) of ownersIds.");
            }
            buffer.writeVarLong(this.ownersIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhLong();
            if (_loc4_ < 0 || _loc4_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of ownersIds.");
            }
            this.ownersIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class InteractiveElement {
    constructor(elementId, elementTypeId, enabledSkills, disabledSkills, onCurrentMap) {
        this.elementId = elementId;
        this.elementTypeId = elementTypeId;
        this.enabledSkills = enabledSkills;
        this.disabledSkills = disabledSkills;
        this.onCurrentMap = onCurrentMap;
        this.protocolId = 80;
    }
    serialize(buffer) {
        if (this.elementId < 0) {
            Logger.error("Forbidden value (" + this.elementId + ") on element elementId.");
        }
        buffer.writeInt(this.elementId);
        buffer.writeInt(this.elementTypeId);
        buffer.writeShort(this.enabledSkills.length);
        var _loc2_ = 0;
        while (_loc2_ < this.enabledSkills.length) {
            this.enabledSkills[_loc2_].serialize(buffer);
            this.enabledSkills[_loc2_].serialize(buffer);
            _loc2_++;
        }
        buffer.writeShort(this.disabledSkills.length);
        var _loc3_ = 0;
        while (_loc3_ < this.disabledSkills.length) {
            this.disabledSkills[_loc3_].serialize(buffer);
            this.disabledSkills[_loc3_].serialize(buffer);
            _loc3_++;
        }
        buffer.writeBoolean(this.onCurrentMap);
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = 0;
        var _loc9_ = null;
        this.elementId = buffer.readInt();
        if (this.elementId < 0) {
            Logger.error("Forbidden value (" + this.elementId + ") on element of InteractiveElement.elementId.");
        }
        this.elementTypeId = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.interactive.InteractiveElementSkill, _loc6_);
            _loc7_.deserialize(buffer);
            this.enabledSkills.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readUnsignedShort();
            _loc9_ = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.interactive.InteractiveElementSkill, _loc8_);
            _loc9_.deserialize(buffer);
            this.disabledSkills.push(_loc9_);
            _loc5_++;
        }
        this.onCurrentMap = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class InteractiveElementNamedSkill extends InteractiveElementSkill {
    constructor(param1, param2, nameId) {
        super(param1, param2);
        this.nameId = nameId;
        this.protocolId = 220;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.nameId < 0) {
            Logger.error("Forbidden value (" + this.nameId + ") on element nameId.");
        }
        buffer.writeVarInt(this.nameId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.nameId = buffer.readVarUhInt();
        if (this.nameId < 0) {
            Logger.error("Forbidden value (" + this.nameId + ") on element of InteractiveElementNamedSkill.nameId.");
        }
    }
}

// Generated by Noxus types 
export class InteractiveElementSkill {
    constructor(skillId, skillInstanceUid) {
        this.skillId = skillId;
        this.skillInstanceUid = skillInstanceUid;
        this.protocolId = 219;
    }
    serialize(buffer) {
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        buffer.writeVarInt(this.skillId);
        if (this.skillInstanceUid < 0) {
            Logger.error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
        }
        buffer.writeInt(this.skillInstanceUid);
    }
    deserialize(buffer) {
        this.skillId = buffer.readVarUhInt();
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element of InteractiveElementSkill.skillId.");
        }
        this.skillInstanceUid = buffer.readInt();
        if (this.skillInstanceUid < 0) {
            Logger.error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveElementSkill.skillInstanceUid.");
        }
    }
}

// Generated by Noxus types 
export class InteractiveElementWithAgeBonus extends InteractiveElement {
    constructor(param1, param2, param3, param4, param5, ageBonus) {
        super(param1, param2, param3, param4, param5);
        this.ageBonus = ageBonus;
        this.protocolId = 398;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.ageBonus < -1 || this.ageBonus > 1000) {
            Logger.error("Forbidden value (" + this.ageBonus + ") on element ageBonus.");
        }
        buffer.writeShort(this.ageBonus);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.ageBonus = buffer.readShort();
        if (this.ageBonus < -1 || this.ageBonus > 1000) {
            Logger.error("Forbidden value (" + this.ageBonus + ") on element of InteractiveElementWithAgeBonus.ageBonus.");
        }
    }
}

// Generated by Noxus types 
export class MapObstacle {
    constructor(obstacleCellId, state) {
        this.obstacleCellId = obstacleCellId;
        this.state = state;
        this.protocolId = 200;
    }
    serialize(buffer) {
        if (this.obstacleCellId < 0 || this.obstacleCellId > 559) {
            Logger.error("Forbidden value (" + this.obstacleCellId + ") on element obstacleCellId.");
        }
        buffer.writeVarShort(this.obstacleCellId);
        buffer.writeByte(this.state);
    }
    deserialize(buffer) {
        this.obstacleCellId = buffer.readVarUhShort();
        if (this.obstacleCellId < 0 || this.obstacleCellId > 559) {
            Logger.error("Forbidden value (" + this.obstacleCellId + ") on element of MapObstacle.obstacleCellId.");
        }
        this.state = buffer.readByte();
        if (this.state < 0) {
            Logger.error("Forbidden value (" + this.state + ") on element of MapObstacle.state.");
        }
    }
}

// Generated by Noxus types 
export class StatedElement {
    constructor(elementId, elementCellId, elementState, onCurrentMap) {
        this.elementId = elementId;
        this.elementCellId = elementCellId;
        this.elementState = elementState;
        this.onCurrentMap = onCurrentMap;
        this.protocolId = 108;
    }
    serialize(buffer) {
        if (this.elementId < 0) {
            Logger.error("Forbidden value (" + this.elementId + ") on element elementId.");
        }
        buffer.writeInt(this.elementId);
        if (this.elementCellId < 0 || this.elementCellId > 559) {
            Logger.error("Forbidden value (" + this.elementCellId + ") on element elementCellId.");
        }
        buffer.writeVarShort(this.elementCellId);
        if (this.elementState < 0) {
            Logger.error("Forbidden value (" + this.elementState + ") on element elementState.");
        }
        buffer.writeVarInt(this.elementState);
        buffer.writeBoolean(this.onCurrentMap);
    }
    deserialize(buffer) {
        this.elementId = buffer.readInt();
        if (this.elementId < 0) {
            Logger.error("Forbidden value (" + this.elementId + ") on element of StatedElement.elementId.");
        }
        this.elementCellId = buffer.readVarUhShort();
        if (this.elementCellId < 0 || this.elementCellId > 559) {
            Logger.error("Forbidden value (" + this.elementCellId + ") on element of StatedElement.elementCellId.");
        }
        this.elementState = buffer.readVarUhInt();
        if (this.elementState < 0) {
            Logger.error("Forbidden value (" + this.elementState + ") on element of StatedElement.elementState.");
        }
        this.onCurrentMap = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class SkillActionDescription {
    constructor(skillId) {
        this.skillId = skillId;
        this.protocolId = 102;
    }
    serialize(buffer) {
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        buffer.writeVarShort(this.skillId);
    }
    deserialize(buffer) {
        this.skillId = buffer.readVarUhShort();
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element of SkillActionDescription.skillId.");
        }
    }
}

// Generated by Noxus types 
export class SkillActionDescriptionCollect extends SkillActionDescriptionTimed {
    constructor(param1, param2, min, max) {
        super(param1, param2);
        this.min = min;
        this.max = max;
        this.protocolId = 99;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.min < 0) {
            Logger.error("Forbidden value (" + this.min + ") on element min.");
        }
        buffer.writeVarShort(this.min);
        if (this.max < 0) {
            Logger.error("Forbidden value (" + this.max + ") on element max.");
        }
        buffer.writeVarShort(this.max);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.min = buffer.readVarUhShort();
        if (this.min < 0) {
            Logger.error("Forbidden value (" + this.min + ") on element of SkillActionDescriptionCollect.min.");
        }
        this.max = buffer.readVarUhShort();
        if (this.max < 0) {
            Logger.error("Forbidden value (" + this.max + ") on element of SkillActionDescriptionCollect.max.");
        }
    }
}

// Generated by Noxus types 
export class SkillActionDescriptionCraft extends SkillActionDescription {
    constructor(param1, probability) {
        super(param1);
        this.probability = probability;
        this.protocolId = 100;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.probability < 0) {
            Logger.error("Forbidden value (" + this.probability + ") on element probability.");
        }
        buffer.writeByte(this.probability);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.probability = buffer.readByte();
        if (this.probability < 0) {
            Logger.error("Forbidden value (" + this.probability + ") on element of SkillActionDescriptionCraft.probability.");
        }
    }
}

// Generated by Noxus types 
export class SkillActionDescriptionTimed extends SkillActionDescription {
    constructor(param1, time) {
        super(param1);
        this.time = time;
        this.protocolId = 103;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.time < 0 || this.time > 255) {
            Logger.error("Forbidden value (" + this.time + ") on element time.");
        }
        buffer.writeByte(this.time);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.time = buffer.readUnsignedByte();
        if (this.time < 0 || this.time > 255) {
            Logger.error("Forbidden value (" + this.time + ") on element of SkillActionDescriptionTimed.time.");
        }
    }
}

// Generated by Noxus types 
export class IdolsPreset {
    constructor(presetId, symbolId, idolId) {
        this.presetId = presetId;
        this.symbolId = symbolId;
        this.idolId = idolId;
        this.protocolId = 491;
    }
    serialize(buffer) {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        buffer.writeByte(this.presetId);
        if (this.symbolId < 0) {
            Logger.error("Forbidden value (" + this.symbolId + ") on element symbolId.");
        }
        buffer.writeByte(this.symbolId);
        buffer.writeShort(this.idolId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.idolId.length) {
            if (this.idolId[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.idolId[_loc2_] + ") on element 3 (starting at 1) of idolId.");
            }
            buffer.writeVarShort(this.idolId[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of IdolsPreset.presetId.");
        }
        this.symbolId = buffer.readByte();
        if (this.symbolId < 0) {
            Logger.error("Forbidden value (" + this.symbolId + ") on element of IdolsPreset.symbolId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of idolId.");
            }
            this.idolId.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class Preset {
    constructor(presetId, symbolId, mount, objects) {
        this.presetId = presetId;
        this.symbolId = symbolId;
        this.mount = mount;
        this.objects = objects;
        this.protocolId = 355;
    }
    serialize(buffer) {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        buffer.writeByte(this.presetId);
        if (this.symbolId < 0) {
            Logger.error("Forbidden value (" + this.symbolId + ") on element symbolId.");
        }
        buffer.writeByte(this.symbolId);
        buffer.writeBoolean(this.mount);
        buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            this.objects[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of Preset.presetId.");
        }
        this.symbolId = buffer.readByte();
        if (this.symbolId < 0) {
            Logger.error("Forbidden value (" + this.symbolId + ") on element of Preset.symbolId.");
        }
        this.mount = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new Types.PresetItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class PresetItem {
    constructor(position, objGid, objUid) {
        this.position = position;
        this.objGid = objGid;
        this.objUid = objUid;
        this.protocolId = 354;
    }
    serialize(buffer) {
        buffer.writeByte(this.position);
        if (this.objGid < 0) {
            Logger.error("Forbidden value (" + this.objGid + ") on element objGid.");
        }
        buffer.writeVarShort(this.objGid);
        if (this.objUid < 0) {
            Logger.error("Forbidden value (" + this.objUid + ") on element objUid.");
        }
        buffer.writeVarInt(this.objUid);
    }
    deserialize(buffer) {
        this.position = buffer.readUnsignedByte();
        if (this.position < 0 || this.position > 255) {
            Logger.error("Forbidden value (" + this.position + ") on element of PresetItem.position.");
        }
        this.objGid = buffer.readVarUhShort();
        if (this.objGid < 0) {
            Logger.error("Forbidden value (" + this.objGid + ") on element of PresetItem.objGid.");
        }
        this.objUid = buffer.readVarUhInt();
        if (this.objUid < 0) {
            Logger.error("Forbidden value (" + this.objUid + ") on element of PresetItem.objUid.");
        }
    }
}

// Generated by Noxus types 
export class EntityLook {
    constructor(bonesId, skins, indexedColors, scales, subentities) {
        this.bonesId = bonesId;
        this.skins = skins;
        this.indexedColors = indexedColors;
        this.scales = scales;
        this.subentities = subentities;
        this.protocolId = 55;
    }
    serialize(buffer) {
        if (this.bonesId < 0) {
            Logger.error("Forbidden value (" + this.bonesId + ") on element bonesId.");
        }
        buffer.writeVarShort(this.bonesId);
        buffer.writeShort(this.skins.length);
        var _loc2_ = 0;
        while (_loc2_ < this.skins.length) {
            if (this.skins[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.skins[_loc2_] + ") on element 2 (starting at 1) of skins.");
            }
            buffer.writeVarShort(this.skins[_loc2_]);
            _loc2_++;
        }
        buffer.writeShort(this.indexedColors.length);
        var _loc3_ = 0;
        while (_loc3_ < this.indexedColors.length) {
            buffer.writeInt(this.indexedColors[_loc3_]);
            _loc3_++;
        }
        buffer.writeShort(this.scales.length);
        var _loc4_ = 0;
        while (_loc4_ < this.scales.length) {
            buffer.writeVarShort(this.scales[_loc4_]);
            _loc4_++;
        }
        buffer.writeShort(this.subentities.length);
        var _loc5_ = 0;
        while (_loc5_ < this.subentities.length) {
            this.subentities[_loc5_].serialize(buffer);
            _loc5_++;
        }
    }
    deserialize(buffer) {
        var _loc10_ = 0;
        var _loc11_ = 0;
        var _loc12_ = 0;
        var _loc13_ = null;
        this.bonesId = buffer.readVarUhShort();
        if (this.bonesId < 0) {
            Logger.error("Forbidden value (" + this.bonesId + ") on element of EntityLook.bonesId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc10_ = buffer.readVarUhShort();
            if (_loc10_ < 0) {
                Logger.error("Forbidden value (" + _loc10_ + ") on elements of skins.");
            }
            this.skins.push(_loc10_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc11_ = buffer.readInt();
            this.indexedColors.push(_loc11_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc12_ = buffer.readVarShort();
            this.scales.push(_loc12_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc13_ = new Types.SubEntity();
            _loc13_.deserialize(buffer);
            this.subentities.push(_loc13_);
            _loc9_++;
        }
    }
}

// Generated by Noxus types 
export class IndexedEntityLook {
    constructor(look, index) {
        this.look = look;
        this.index = index;
        this.protocolId = 405;
    }
    serialize(buffer) {
        this.look.serialize(buffer);
        if (this.index < 0) {
            Logger.error("Forbidden value (" + this.index + ") on element index.");
        }
        buffer.writeByte(this.index);
    }
    deserialize(buffer) {
        this.look = new Types.EntityLook();
        this.look.deserialize(buffer);
        this.index = buffer.readByte();
        if (this.index < 0) {
            Logger.error("Forbidden value (" + this.index + ") on element of IndexedEntityLook.index.");
        }
    }
}

// Generated by Noxus types 
export class SubEntity {
    constructor(bindingPointCategory, bindingPointIndex, subEntityLook) {
        this.bindingPointCategory = bindingPointCategory;
        this.bindingPointIndex = bindingPointIndex;
        this.subEntityLook = subEntityLook;
        this.protocolId = 54;
    }
    serialize(buffer) {
        buffer.writeByte(this.bindingPointCategory);
        if (this.bindingPointIndex < 0) {
            Logger.error("Forbidden value (" + this.bindingPointIndex + ") on element bindingPointIndex.");
        }
        buffer.writeByte(this.bindingPointIndex);
        this.subEntityLook.serialize(buffer);
    }
    deserialize(buffer) {
        this.bindingPointCategory = buffer.readByte();
        if (this.bindingPointCategory < 0) {
            Logger.error("Forbidden value (" + this.bindingPointCategory + ") on element of SubEntity.bindingPointCategory.");
        }
        this.bindingPointIndex = buffer.readByte();
        if (this.bindingPointIndex < 0) {
            Logger.error("Forbidden value (" + this.bindingPointIndex + ") on element of SubEntity.bindingPointIndex.");
        }
        this.subEntityLook = new Types.EntityLook();
        this.subEntityLook.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class ItemDurability {
    constructor(durability, durabilityMax) {
        this.durability = durability;
        this.durabilityMax = durabilityMax;
        this.protocolId = 168;
    }
    serialize(buffer) {
        buffer.writeShort(this.durability);
        buffer.writeShort(this.durabilityMax);
    }
    deserialize(buffer) {
        this.durability = buffer.readShort();
        this.durabilityMax = buffer.readShort();
    }
}

// Generated by Noxus types 
export class MountClientData {
    constructor(id, model, ancestor, behaviors, name, sex, ownerId, experience, experienceForLevel, experienceForNextLevel, level, isRideable, maxPods, isWild, stamina, staminaMax, maturity, maturityForAdult, energy, energyMax, serenity, aggressivityMax, serenityMax, love, loveMax, fecondationTime, isFecondationReady, boostLimiter, boostMax, reproductionCount, reproductionCountMax, harnessGID, useHarnessColors, effectList) {
        this.id = id;
        this.model = model;
        this.ancestor = ancestor;
        this.behaviors = behaviors;
        this.name = name;
        this.sex = sex;
        this.ownerId = ownerId;
        this.experience = experience;
        this.experienceForLevel = experienceForLevel;
        this.experienceForNextLevel = experienceForNextLevel;
        this.level = level;
        this.isRideable = isRideable;
        this.maxPods = maxPods;
        this.isWild = isWild;
        this.stamina = stamina;
        this.staminaMax = staminaMax;
        this.maturity = maturity;
        this.maturityForAdult = maturityForAdult;
        this.energy = energy;
        this.energyMax = energyMax;
        this.serenity = serenity;
        this.aggressivityMax = aggressivityMax;
        this.serenityMax = serenityMax;
        this.love = love;
        this.loveMax = loveMax;
        this.fecondationTime = fecondationTime;
        this.isFecondationReady = isFecondationReady;
        this.boostLimiter = boostLimiter;
        this.boostMax = boostMax;
        this.reproductionCount = reproductionCount;
        this.reproductionCountMax = reproductionCountMax;
        this.harnessGID = harnessGID;
        this.useHarnessColors = useHarnessColors;
        this.effectList = effectList;
        this.protocolId = 178;
    }
    serialize(buffer) {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.sex);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.isRideable);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 2, this.isWild);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 3, this.isFecondationReady);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 4, this.useHarnessColors);
        buffer.writeByte(_loc2_);
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeDouble(this.id);
        if (this.model < 0) {
            Logger.error("Forbidden value (" + this.model + ") on element model.");
        }
        buffer.writeVarInt(this.model);
        buffer.writeShort(this.ancestor.length);
        var _loc3_ = 0;
        while (_loc3_ < this.ancestor.length) {
            if (this.ancestor[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.ancestor[_loc3_] + ") on element 3 (starting at 1) of ancestor.");
            }
            buffer.writeInt(this.ancestor[_loc3_]);
            _loc3_++;
        }
        buffer.writeShort(this.behaviors.length);
        var _loc4_ = 0;
        while (_loc4_ < this.behaviors.length) {
            if (this.behaviors[_loc4_] < 0) {
                Logger.error("Forbidden value (" + this.behaviors[_loc4_] + ") on element 4 (starting at 1) of behaviors.");
            }
            buffer.writeInt(this.behaviors[_loc4_]);
            _loc4_++;
        }
        buffer.writeUTF(this.name);
        if (this.ownerId < 0) {
            Logger.error("Forbidden value (" + this.ownerId + ") on element ownerId.");
        }
        buffer.writeInt(this.ownerId);
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element experience.");
        }
        buffer.writeVarLong(this.experience);
        if (this.experienceForLevel < 0 || this.experienceForLevel > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceForLevel + ") on element experienceForLevel.");
        }
        buffer.writeVarLong(this.experienceForLevel);
        if (this.experienceForNextLevel < -9007199254740990 || this.experienceForNextLevel > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceForNextLevel + ") on element experienceForNextLevel.");
        }
        buffer.writeDouble(this.experienceForNextLevel);
        if (this.level < 0) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        buffer.writeByte(this.level);
        if (this.maxPods < 0) {
            Logger.error("Forbidden value (" + this.maxPods + ") on element maxPods.");
        }
        buffer.writeVarInt(this.maxPods);
        if (this.stamina < 0) {
            Logger.error("Forbidden value (" + this.stamina + ") on element stamina.");
        }
        buffer.writeVarInt(this.stamina);
        if (this.staminaMax < 0) {
            Logger.error("Forbidden value (" + this.staminaMax + ") on element staminaMax.");
        }
        buffer.writeVarInt(this.staminaMax);
        if (this.maturity < 0) {
            Logger.error("Forbidden value (" + this.maturity + ") on element maturity.");
        }
        buffer.writeVarInt(this.maturity);
        if (this.maturityForAdult < 0) {
            Logger.error("Forbidden value (" + this.maturityForAdult + ") on element maturityForAdult.");
        }
        buffer.writeVarInt(this.maturityForAdult);
        if (this.energy < 0) {
            Logger.error("Forbidden value (" + this.energy + ") on element energy.");
        }
        buffer.writeVarInt(this.energy);
        if (this.energyMax < 0) {
            Logger.error("Forbidden value (" + this.energyMax + ") on element energyMax.");
        }
        buffer.writeVarInt(this.energyMax);
        buffer.writeInt(this.serenity);
        buffer.writeInt(this.aggressivityMax);
        if (this.serenityMax < 0) {
            Logger.error("Forbidden value (" + this.serenityMax + ") on element serenityMax.");
        }
        buffer.writeVarInt(this.serenityMax);
        if (this.love < 0) {
            Logger.error("Forbidden value (" + this.love + ") on element love.");
        }
        buffer.writeVarInt(this.love);
        if (this.loveMax < 0) {
            Logger.error("Forbidden value (" + this.loveMax + ") on element loveMax.");
        }
        buffer.writeVarInt(this.loveMax);
        buffer.writeInt(this.fecondationTime);
        if (this.boostLimiter < 0) {
            Logger.error("Forbidden value (" + this.boostLimiter + ") on element boostLimiter.");
        }
        buffer.writeInt(this.boostLimiter);
        if (this.boostMax < -9007199254740990 || this.boostMax > 9007199254740990) {
            Logger.error("Forbidden value (" + this.boostMax + ") on element boostMax.");
        }
        buffer.writeDouble(this.boostMax);
        buffer.writeInt(this.reproductionCount);
        if (this.reproductionCountMax < 0) {
            Logger.error("Forbidden value (" + this.reproductionCountMax + ") on element reproductionCountMax.");
        }
        buffer.writeVarInt(this.reproductionCountMax);
        if (this.harnessGID < 0) {
            Logger.error("Forbidden value (" + this.harnessGID + ") on element harnessGID.");
        }
        buffer.writeVarShort(this.harnessGID);
        buffer.writeShort(this.effectList.length);
        var _loc5_ = 0;
        while (_loc5_ < this.effectList.length) {
            this.effectList[_loc5_].serialize(buffer);
            _loc5_++;
        }
    }
    deserialize(buffer) {
        var _loc9_ = 0;
        var _loc10_ = 0;
        var _loc11_ = null;
        var _loc2_ = buffer.readByte();
        this.sex = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.isRideable = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.isWild = IO.BooleanByteWrapper.getFlag(_loc2_, 2);
        this.isFecondationReady = IO.BooleanByteWrapper.getFlag(_loc2_, 3);
        this.useHarnessColors = IO.BooleanByteWrapper.getFlag(_loc2_, 4);
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of MountClientData.id.");
        }
        this.model = buffer.readVarUhInt();
        if (this.model < 0) {
            Logger.error("Forbidden value (" + this.model + ") on element of MountClientData.model.");
        }
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc9_ = buffer.readInt();
            if (_loc9_ < 0) {
                Logger.error("Forbidden value (" + _loc9_ + ") on elements of ancestor.");
            }
            this.ancestor.push(_loc9_);
            _loc4_++;
        }
        var _loc5_ = buffer.readUnsignedShort();
        var _loc6_ = 0;
        while (_loc6_ < _loc5_) {
            _loc10_ = buffer.readInt();
            if (_loc10_ < 0) {
                Logger.error("Forbidden value (" + _loc10_ + ") on elements of behaviors.");
            }
            this.behaviors.push(_loc10_);
            _loc6_++;
        }
        this.name = buffer.readUTF();
        this.ownerId = buffer.readInt();
        if (this.ownerId < 0) {
            Logger.error("Forbidden value (" + this.ownerId + ") on element of MountClientData.ownerId.");
        }
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element of MountClientData.experience.");
        }
        this.experienceForLevel = buffer.readVarUhLong();
        if (this.experienceForLevel < 0 || this.experienceForLevel > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceForLevel + ") on element of MountClientData.experienceForLevel.");
        }
        this.experienceForNextLevel = buffer.readDouble();
        if (this.experienceForNextLevel < -9007199254740990 || this.experienceForNextLevel > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceForNextLevel + ") on element of MountClientData.experienceForNextLevel.");
        }
        this.level = buffer.readByte();
        if (this.level < 0) {
            Logger.error("Forbidden value (" + this.level + ") on element of MountClientData.level.");
        }
        this.maxPods = buffer.readVarUhInt();
        if (this.maxPods < 0) {
            Logger.error("Forbidden value (" + this.maxPods + ") on element of MountClientData.maxPods.");
        }
        this.stamina = buffer.readVarUhInt();
        if (this.stamina < 0) {
            Logger.error("Forbidden value (" + this.stamina + ") on element of MountClientData.stamina.");
        }
        this.staminaMax = buffer.readVarUhInt();
        if (this.staminaMax < 0) {
            Logger.error("Forbidden value (" + this.staminaMax + ") on element of MountClientData.staminaMax.");
        }
        this.maturity = buffer.readVarUhInt();
        if (this.maturity < 0) {
            Logger.error("Forbidden value (" + this.maturity + ") on element of MountClientData.maturity.");
        }
        this.maturityForAdult = buffer.readVarUhInt();
        if (this.maturityForAdult < 0) {
            Logger.error("Forbidden value (" + this.maturityForAdult + ") on element of MountClientData.maturityForAdult.");
        }
        this.energy = buffer.readVarUhInt();
        if (this.energy < 0) {
            Logger.error("Forbidden value (" + this.energy + ") on element of MountClientData.energy.");
        }
        this.energyMax = buffer.readVarUhInt();
        if (this.energyMax < 0) {
            Logger.error("Forbidden value (" + this.energyMax + ") on element of MountClientData.energyMax.");
        }
        this.serenity = buffer.readInt();
        this.aggressivityMax = buffer.readInt();
        this.serenityMax = buffer.readVarUhInt();
        if (this.serenityMax < 0) {
            Logger.error("Forbidden value (" + this.serenityMax + ") on element of MountClientData.serenityMax.");
        }
        this.love = buffer.readVarUhInt();
        if (this.love < 0) {
            Logger.error("Forbidden value (" + this.love + ") on element of MountClientData.love.");
        }
        this.loveMax = buffer.readVarUhInt();
        if (this.loveMax < 0) {
            Logger.error("Forbidden value (" + this.loveMax + ") on element of MountClientData.loveMax.");
        }
        this.fecondationTime = buffer.readInt();
        this.boostLimiter = buffer.readInt();
        if (this.boostLimiter < 0) {
            Logger.error("Forbidden value (" + this.boostLimiter + ") on element of MountClientData.boostLimiter.");
        }
        this.boostMax = buffer.readDouble();
        if (this.boostMax < -9007199254740990 || this.boostMax > 9007199254740990) {
            Logger.error("Forbidden value (" + this.boostMax + ") on element of MountClientData.boostMax.");
        }
        this.reproductionCount = buffer.readInt();
        this.reproductionCountMax = buffer.readVarUhInt();
        if (this.reproductionCountMax < 0) {
            Logger.error("Forbidden value (" + this.reproductionCountMax + ") on element of MountClientData.reproductionCountMax.");
        }
        this.harnessGID = buffer.readVarUhShort();
        if (this.harnessGID < 0) {
            Logger.error("Forbidden value (" + this.harnessGID + ") on element of MountClientData.harnessGID.");
        }
        var _loc7_ = buffer.readUnsignedShort();
        var _loc8_ = 0;
        while (_loc8_ < _loc7_) {
            _loc11_ = new ObjectEffectInteger();
            _loc11_.deserialize(buffer);
            this.effectList.push(_loc11_);
            _loc8_++;
        }
    }
}

// Generated by Noxus types 
export class UpdateMountBoost {
    constructor(type) {
        this.type = type;
        this.protocolId = 356;
    }
    serialize(buffer) {
        buffer.writeByte(this.type);
    }
    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of UpdateMountBoost.type.");
        }
    }
}

// Generated by Noxus types 
export class UpdateMountIntBoost extends UpdateMountBoost {
    constructor(param1, value) {
        super(param1);
        this.value = value;
        this.protocolId = 357;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeInt(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.value = buffer.readInt();
    }
}

// Generated by Noxus types 
export class MountInformationsForPaddock {
    constructor(modelId, name, ownerName) {
        this.modelId = modelId;
        this.name = name;
        this.ownerName = ownerName;
        this.protocolId = 184;
    }
    serialize(buffer) {
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element modelId.");
        }
        buffer.writeVarShort(this.modelId);
        buffer.writeUTF(this.name);
        buffer.writeUTF(this.ownerName);
    }
    deserialize(buffer) {
        this.modelId = buffer.readVarUhShort();
        if (this.modelId < 0) {
            Logger.error("Forbidden value (" + this.modelId + ") on element of MountInformationsForPaddock.modelId.");
        }
        this.name = buffer.readUTF();
        this.ownerName = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class PaddockAbandonnedInformations extends PaddockBuyableInformations {
    constructor(param1, param2, param3, param4, guildId) {
        super(param1, param2, param3, param4);
        this.guildId = guildId;
        this.protocolId = 133;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeInt(this.guildId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.guildId = buffer.readInt();
    }
}

// Generated by Noxus types 
export class PaddockBuyableInformations extends PaddockInformations {
    constructor(param1, param2, price, locked) {
        super(param1, param2);
        this.price = price;
        this.locked = locked;
        this.protocolId = 130;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element price.");
        }
        buffer.writeVarInt(this.price);
        buffer.writeBoolean(this.locked);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.price = buffer.readVarUhInt();
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element of PaddockBuyableInformations.price.");
        }
        this.locked = buffer.readBoolean();
    }
}

// Generated by Noxus types 
export class PaddockContentInformations extends PaddockInformations {
    constructor(param1, param2, paddockId, worldX, worldY, mapId, subAreaId, abandonned, mountsInformations) {
        super(param1, param2);
        this.paddockId = paddockId;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.abandonned = abandonned;
        this.mountsInformations = mountsInformations;
        this.protocolId = 183;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeInt(this.paddockId);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
        buffer.writeBoolean(this.abandonned);
        buffer.writeShort(this.mountsInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mountsInformations.length) {
            this.mountsInformations[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        this.paddockId = buffer.readInt();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of PaddockContentInformations.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of PaddockContentInformations.worldY.");
        }
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PaddockContentInformations.subAreaId.");
        }
        this.abandonned = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new Types.MountInformationsForPaddock();
            _loc4_.deserialize(buffer);
            this.mountsInformations.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class PaddockInformations {
    constructor(maxOutdoorMount, maxItems) {
        this.maxOutdoorMount = maxOutdoorMount;
        this.maxItems = maxItems;
        this.protocolId = 132;
    }
    serialize(buffer) {
        if (this.maxOutdoorMount < 0) {
            Logger.error("Forbidden value (" + this.maxOutdoorMount + ") on element maxOutdoorMount.");
        }
        buffer.writeVarShort(this.maxOutdoorMount);
        if (this.maxItems < 0) {
            Logger.error("Forbidden value (" + this.maxItems + ") on element maxItems.");
        }
        buffer.writeVarShort(this.maxItems);
    }
    deserialize(buffer) {
        this.maxOutdoorMount = buffer.readVarUhShort();
        if (this.maxOutdoorMount < 0) {
            Logger.error("Forbidden value (" + this.maxOutdoorMount + ") on element of PaddockInformations.maxOutdoorMount.");
        }
        this.maxItems = buffer.readVarUhShort();
        if (this.maxItems < 0) {
            Logger.error("Forbidden value (" + this.maxItems + ") on element of PaddockInformations.maxItems.");
        }
    }
}

// Generated by Noxus types 
export class PaddockInformationsForSell {
    constructor(guildOwner, worldX, worldY, subAreaId, nbMount, nbObject, price) {
        this.guildOwner = guildOwner;
        this.worldX = worldX;
        this.worldY = worldY;
        this.subAreaId = subAreaId;
        this.nbMount = nbMount;
        this.nbObject = nbObject;
        this.price = price;
        this.protocolId = 222;
    }
    serialize(buffer) {
        buffer.writeUTF(this.guildOwner);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
        buffer.writeByte(this.nbMount);
        buffer.writeByte(this.nbObject);
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element price.");
        }
        buffer.writeVarInt(this.price);
    }
    deserialize(buffer) {
        this.guildOwner = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of PaddockInformationsForSell.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of PaddockInformationsForSell.worldY.");
        }
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PaddockInformationsForSell.subAreaId.");
        }
        this.nbMount = buffer.readByte();
        this.nbObject = buffer.readByte();
        this.price = buffer.readVarUhInt();
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element of PaddockInformationsForSell.price.");
        }
    }
}

// Generated by Noxus types 
export class PaddockItem extends ObjectItemInRolePlay {
    constructor(param1, param2, durability) {
        super(param1, param2);
        this.durability = durability;
        this.protocolId = 185;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.durability.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.durability = new ItemDurability();
        this.durability.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class PaddockPrivateInformations extends PaddockAbandonnedInformations {
    constructor(param1, param2, param3, param4, param5, guildInfo) {
        super(param1, param2, param3, param4, param5);
        this.guildInfo = guildInfo;
        this.protocolId = 131;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.guildInfo.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class AllianceInsiderPrismInformation extends PrismInformation {
    constructor(param1, param2, param3, param4, param5, lastTimeSlotModificationDate, lastTimeSlotModificationAuthorGuildId, lastTimeSlotModificationAuthorId, lastTimeSlotModificationAuthorName, modulesObjects) {
        super(param1, param2, param3, param4, param5);
        this.lastTimeSlotModificationDate = lastTimeSlotModificationDate;
        this.lastTimeSlotModificationAuthorGuildId = lastTimeSlotModificationAuthorGuildId;
        this.lastTimeSlotModificationAuthorId = lastTimeSlotModificationAuthorId;
        this.lastTimeSlotModificationAuthorName = lastTimeSlotModificationAuthorName;
        this.modulesObjects = modulesObjects;
        this.protocolId = 431;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.lastTimeSlotModificationDate < 0) {
            Logger.error("Forbidden value (" + this.lastTimeSlotModificationDate + ") on element lastTimeSlotModificationDate.");
        }
        buffer.writeInt(this.lastTimeSlotModificationDate);
        if (this.lastTimeSlotModificationAuthorGuildId < 0) {
            Logger.error("Forbidden value (" + this.lastTimeSlotModificationAuthorGuildId + ") on element lastTimeSlotModificationAuthorGuildId.");
        }
        buffer.writeVarInt(this.lastTimeSlotModificationAuthorGuildId);
        if (this.lastTimeSlotModificationAuthorId < 0 || this.lastTimeSlotModificationAuthorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.lastTimeSlotModificationAuthorId + ") on element lastTimeSlotModificationAuthorId.");
        }
        buffer.writeVarLong(this.lastTimeSlotModificationAuthorId);
        buffer.writeUTF(this.lastTimeSlotModificationAuthorName);
        buffer.writeShort(this.modulesObjects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.modulesObjects.length) {
            this.modulesObjects[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        this.lastTimeSlotModificationDate = buffer.readInt();
        if (this.lastTimeSlotModificationDate < 0) {
            Logger.error("Forbidden value (" + this.lastTimeSlotModificationDate + ") on element of AllianceInsiderPrismInformation.lastTimeSlotModificationDate.");
        }
        this.lastTimeSlotModificationAuthorGuildId = buffer.readVarUhInt();
        if (this.lastTimeSlotModificationAuthorGuildId < 0) {
            Logger.error("Forbidden value (" + this.lastTimeSlotModificationAuthorGuildId + ") on element of AllianceInsiderPrismInformation.lastTimeSlotModificationAuthorGuildId.");
        }
        this.lastTimeSlotModificationAuthorId = buffer.readVarUhLong();
        if (this.lastTimeSlotModificationAuthorId < 0 || this.lastTimeSlotModificationAuthorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.lastTimeSlotModificationAuthorId + ") on element of AllianceInsiderPrismInformation.lastTimeSlotModificationAuthorId.");
        }
        this.lastTimeSlotModificationAuthorName = buffer.readUTF();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.modulesObjects.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class AlliancePrismInformation extends PrismInformation {
    constructor(param1, param2, param3, param4, param5, alliance) {
        super(param1, param2, param3, param4, param5);
        this.alliance = alliance;
        this.protocolId = 427;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.alliance.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.alliance = new AllianceInformations();
        this.alliance.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class PrismFightersInformation {
    constructor(subAreaId, waitingForHelpInfo, allyCharactersInformations, enemyCharactersInformations) {
        this.subAreaId = subAreaId;
        this.waitingForHelpInfo = waitingForHelpInfo;
        this.allyCharactersInformations = allyCharactersInformations;
        this.enemyCharactersInformations = enemyCharactersInformations;
        this.protocolId = 443;
    }
    serialize(buffer) {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
        this.waitingForHelpInfo.serialize(buffer);
        buffer.writeShort(this.allyCharactersInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.allyCharactersInformations.length) {
            this.allyCharactersInformations[_loc2_].serialize(buffer);
            this.allyCharactersInformations[_loc2_].serialize(buffer);
            _loc2_++;
        }
        buffer.writeShort(this.enemyCharactersInformations.length);
        var _loc3_ = 0;
        while (_loc3_ < this.enemyCharactersInformations.length) {
            this.enemyCharactersInformations[_loc3_].serialize(buffer);
            this.enemyCharactersInformations[_loc3_].serialize(buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = 0;
        var _loc9_ = null;
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismFightersInformation.subAreaId.");
        }
        this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
        this.waitingForHelpInfo.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc6_);
            _loc7_.deserialize(buffer);
            this.allyCharactersInformations.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readUnsignedShort();
            _loc9_ = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc8_);
            _loc9_.deserialize(buffer);
            this.enemyCharactersInformations.push(_loc9_);
            _loc5_++;
        }
    }
}

// Generated by Noxus types 
export class PrismGeolocalizedInformation extends PrismSubareaEmptyInfo {
    constructor(param1, param2, worldX, worldY, mapId, prism) {
        super(param1, param2);
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.prism = prism;
        this.protocolId = 434;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        buffer.writeShort(this.worldY);
        buffer.writeInt(this.mapId);
        buffer.writeShort(this.prism.protocolId);
        this.prism.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of PrismGeolocalizedInformation.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of PrismGeolocalizedInformation.worldY.");
        }
        this.mapId = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        this.prism = ProtocolTypeManager.getInstance(com.ankamagames.dofus.network.types.game.prism.PrismInformation, _loc2_);
        this.prism.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class PrismInformation {
    constructor(typeId, state, nextVulnerabilityDate, placementDate, rewardTokenCount) {
        this.typeId = typeId;
        this.state = state;
        this.nextVulnerabilityDate = nextVulnerabilityDate;
        this.placementDate = placementDate;
        this.rewardTokenCount = rewardTokenCount;
        this.protocolId = 428;
    }
    serialize(buffer) {
        if (this.typeId < 0) {
            Logger.error("Forbidden value (" + this.typeId + ") on element typeId.");
        }
        buffer.writeByte(this.typeId);
        buffer.writeByte(this.state);
        if (this.nextVulnerabilityDate < 0) {
            Logger.error("Forbidden value (" + this.nextVulnerabilityDate + ") on element nextVulnerabilityDate.");
        }
        buffer.writeInt(this.nextVulnerabilityDate);
        if (this.placementDate < 0) {
            Logger.error("Forbidden value (" + this.placementDate + ") on element placementDate.");
        }
        buffer.writeInt(this.placementDate);
        if (this.rewardTokenCount < 0) {
            Logger.error("Forbidden value (" + this.rewardTokenCount + ") on element rewardTokenCount.");
        }
        buffer.writeVarInt(this.rewardTokenCount);
    }
    deserialize(buffer) {
        this.typeId = buffer.readByte();
        if (this.typeId < 0) {
            Logger.error("Forbidden value (" + this.typeId + ") on element of PrismInformation.typeId.");
        }
        this.state = buffer.readByte();
        if (this.state < 0) {
            Logger.error("Forbidden value (" + this.state + ") on element of PrismInformation.state.");
        }
        this.nextVulnerabilityDate = buffer.readInt();
        if (this.nextVulnerabilityDate < 0) {
            Logger.error("Forbidden value (" + this.nextVulnerabilityDate + ") on element of PrismInformation.nextVulnerabilityDate.");
        }
        this.placementDate = buffer.readInt();
        if (this.placementDate < 0) {
            Logger.error("Forbidden value (" + this.placementDate + ") on element of PrismInformation.placementDate.");
        }
        this.rewardTokenCount = buffer.readVarUhInt();
        if (this.rewardTokenCount < 0) {
            Logger.error("Forbidden value (" + this.rewardTokenCount + ") on element of PrismInformation.rewardTokenCount.");
        }
    }
}

// Generated by Noxus types 
export class PrismSubareaEmptyInfo {
    constructor(subAreaId, allianceId) {
        this.subAreaId = subAreaId;
        this.allianceId = allianceId;
        this.protocolId = 438;
    }
    serialize(buffer) {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        buffer.writeVarShort(this.subAreaId);
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        buffer.writeVarInt(this.allianceId);
    }
    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismSubareaEmptyInfo.subAreaId.");
        }
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element of PrismSubareaEmptyInfo.allianceId.");
        }
    }
}

// Generated by Noxus types 
export class Shortcut {
    constructor(slot) {
        this.slot = slot;
        this.protocolId = 369;
    }
    serialize(buffer) {
        if (this.slot < 0 || this.slot > 99) {
            Logger.error("Forbidden value (" + this.slot + ") on element slot.");
        }
        buffer.writeByte(this.slot);
    }
    deserialize(buffer) {
        this.slot = buffer.readByte();
        if (this.slot < 0 || this.slot > 99) {
            Logger.error("Forbidden value (" + this.slot + ") on element of Shortcut.slot.");
        }
    }
}

// Generated by Noxus types 
export class ShortcutEmote extends Shortcut {
    constructor(param1, emoteId) {
        super(param1);
        this.emoteId = emoteId;
        this.protocolId = 389;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        buffer.writeByte(this.emoteId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element of ShortcutEmote.emoteId.");
        }
    }
}

// Generated by Noxus types 
export class ShortcutObject extends Shortcut {
    constructor(param1) {
        super(param1);
        this.protocolId = 367;
    }
    serialize(buffer) {
        super.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class ShortcutObjectIdolsPreset extends ShortcutObject {
    constructor(param1, presetId) {
        super(param1);
        this.presetId = presetId;
        this.protocolId = 492;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        buffer.writeByte(this.presetId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of ShortcutObjectIdolsPreset.presetId.");
        }
    }
}

// Generated by Noxus types 
export class ShortcutObjectItem extends ShortcutObject {
    constructor(param1, itemUID, itemGID) {
        super(param1);
        this.itemUID = itemUID;
        this.itemGID = itemGID;
        this.protocolId = 371;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeInt(this.itemUID);
        buffer.writeInt(this.itemGID);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.itemUID = buffer.readInt();
        this.itemGID = buffer.readInt();
    }
}

// Generated by Noxus types 
export class ShortcutObjectPreset extends ShortcutObject {
    constructor(param1, presetId) {
        super(param1);
        this.presetId = presetId;
        this.protocolId = 370;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        buffer.writeByte(this.presetId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of ShortcutObjectPreset.presetId.");
        }
    }
}

// Generated by Noxus types 
export class ShortcutSmiley extends Shortcut {
    constructor(param1, smileyId) {
        super(param1);
        this.smileyId = smileyId;
        this.protocolId = 388;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        buffer.writeVarShort(this.smileyId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element of ShortcutSmiley.smileyId.");
        }
    }
}

// Generated by Noxus types 
export class ShortcutSpell extends Shortcut {
    constructor(param1, spellId) {
        super(param1);
        this.spellId = spellId;
        this.protocolId = 368;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        buffer.writeVarShort(this.spellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of ShortcutSpell.spellId.");
        }
    }
}

// Generated by Noxus types 
export class AbstractSocialGroupInfos {
    constructor() {
        this.protocolId = 416;
    }
    serialize(buffer) {
    }
    deserialize(buffer) {
    }
}

// Generated by Noxus types 
export class AlliancedGuildFactSheetInformations extends GuildInformations {
    constructor(param1, param2, param3, param4, allianceInfos) {
        super(param1, param2, param3, param4);
        this.allianceInfos = allianceInfos;
        this.protocolId = 422;
    }
    serialize(buffer) {
        super.serialize(buffer);
        this.allianceInfos.serialize(buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceInfos = new BasicNamedAllianceInformations();
        this.allianceInfos.deserialize(buffer);
    }
}

// Generated by Noxus types 
export class AllianceFactSheetInformations extends AllianceInformations {
    constructor(param1, param2, param3, param4, creationDate) {
        super(param1, param2, param3, param4);
        this.creationDate = creationDate;
        this.protocolId = 421;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.creationDate < 0) {
            Logger.error("Forbidden value (" + this.creationDate + ") on element creationDate.");
        }
        buffer.writeInt(this.creationDate);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.creationDate = buffer.readInt();
        if (this.creationDate < 0) {
            Logger.error("Forbidden value (" + this.creationDate + ") on element of AllianceFactSheetInformations.creationDate.");
        }
    }
}

// Generated by Noxus types 
export class AllianceVersatileInformations {
    constructor(allianceId, nbGuilds, nbMembers, nbSubarea) {
        this.allianceId = allianceId;
        this.nbGuilds = nbGuilds;
        this.nbMembers = nbMembers;
        this.nbSubarea = nbSubarea;
        this.protocolId = 432;
    }
    serialize(buffer) {
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        buffer.writeVarInt(this.allianceId);
        if (this.nbGuilds < 0) {
            Logger.error("Forbidden value (" + this.nbGuilds + ") on element nbGuilds.");
        }
        buffer.writeVarShort(this.nbGuilds);
        if (this.nbMembers < 0) {
            Logger.error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
        }
        buffer.writeVarShort(this.nbMembers);
        if (this.nbSubarea < 0) {
            Logger.error("Forbidden value (" + this.nbSubarea + ") on element nbSubarea.");
        }
        buffer.writeVarShort(this.nbSubarea);
    }
    deserialize(buffer) {
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element of AllianceVersatileInformations.allianceId.");
        }
        this.nbGuilds = buffer.readVarUhShort();
        if (this.nbGuilds < 0) {
            Logger.error("Forbidden value (" + this.nbGuilds + ") on element of AllianceVersatileInformations.nbGuilds.");
        }
        this.nbMembers = buffer.readVarUhShort();
        if (this.nbMembers < 0) {
            Logger.error("Forbidden value (" + this.nbMembers + ") on element of AllianceVersatileInformations.nbMembers.");
        }
        this.nbSubarea = buffer.readVarUhShort();
        if (this.nbSubarea < 0) {
            Logger.error("Forbidden value (" + this.nbSubarea + ") on element of AllianceVersatileInformations.nbSubarea.");
        }
    }
}

// Generated by Noxus types 
export class GuildFactSheetInformations extends GuildInformations {
    constructor(param1, param2, param3, param4, leaderId, nbMembers) {
        super(param1, param2, param3, param4);
        this.leaderId = leaderId;
        this.nbMembers = nbMembers;
        this.protocolId = 424;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leaderId + ") on element leaderId.");
        }
        buffer.writeVarLong(this.leaderId);
        if (this.nbMembers < 0) {
            Logger.error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
        }
        buffer.writeVarShort(this.nbMembers);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.leaderId = buffer.readVarUhLong();
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leaderId + ") on element of GuildFactSheetInformations.leaderId.");
        }
        this.nbMembers = buffer.readVarUhShort();
        if (this.nbMembers < 0) {
            Logger.error("Forbidden value (" + this.nbMembers + ") on element of GuildFactSheetInformations.nbMembers.");
        }
    }
}

// Generated by Noxus types 
export class GuildInAllianceVersatileInformations extends GuildVersatileInformations {
    constructor(param1, param2, param3, param4, allianceId) {
        super(param1, param2, param3, param4);
        this.allianceId = allianceId;
        this.protocolId = 437;
    }
    serialize(buffer) {
        super.serialize(buffer);
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        buffer.writeVarInt(this.allianceId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element of GuildInAllianceVersatileInformations.allianceId.");
        }
    }
}

// Generated by Noxus types 
export class GuildInsiderFactSheetInformations extends GuildFactSheetInformations {
    constructor(param1, param2, param3, param4, param5, param6, leaderName, nbConnectedMembers, nbTaxCollectors, lastActivity) {
        super(param1, param2, param3, param4, param5, param6);
        this.leaderName = leaderName;
        this.nbConnectedMembers = nbConnectedMembers;
        this.nbTaxCollectors = nbTaxCollectors;
        this.lastActivity = lastActivity;
        this.protocolId = 423;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeUTF(this.leaderName);
        if (this.nbConnectedMembers < 0) {
            Logger.error("Forbidden value (" + this.nbConnectedMembers + ") on element nbConnectedMembers.");
        }
        buffer.writeVarShort(this.nbConnectedMembers);
        if (this.nbTaxCollectors < 0) {
            Logger.error("Forbidden value (" + this.nbTaxCollectors + ") on element nbTaxCollectors.");
        }
        buffer.writeByte(this.nbTaxCollectors);
        if (this.lastActivity < 0) {
            Logger.error("Forbidden value (" + this.lastActivity + ") on element lastActivity.");
        }
        buffer.writeInt(this.lastActivity);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.leaderName = buffer.readUTF();
        this.nbConnectedMembers = buffer.readVarUhShort();
        if (this.nbConnectedMembers < 0) {
            Logger.error("Forbidden value (" + this.nbConnectedMembers + ") on element of GuildInsiderFactSheetInformations.nbConnectedMembers.");
        }
        this.nbTaxCollectors = buffer.readByte();
        if (this.nbTaxCollectors < 0) {
            Logger.error("Forbidden value (" + this.nbTaxCollectors + ") on element of GuildInsiderFactSheetInformations.nbTaxCollectors.");
        }
        this.lastActivity = buffer.readInt();
        if (this.lastActivity < 0) {
            Logger.error("Forbidden value (" + this.lastActivity + ") on element of GuildInsiderFactSheetInformations.lastActivity.");
        }
    }
}

// Generated by Noxus types 
export class GuildVersatileInformations {
    constructor(guildId, leaderId, guildLevel, nbMembers) {
        this.guildId = guildId;
        this.leaderId = leaderId;
        this.guildLevel = guildLevel;
        this.nbMembers = nbMembers;
        this.protocolId = 435;
    }
    serialize(buffer) {
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        buffer.writeVarInt(this.guildId);
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leaderId + ") on element leaderId.");
        }
        buffer.writeVarLong(this.leaderId);
        if (this.guildLevel < 1 || this.guildLevel > 200) {
            Logger.error("Forbidden value (" + this.guildLevel + ") on element guildLevel.");
        }
        buffer.writeByte(this.guildLevel);
        if (this.nbMembers < 1 || this.nbMembers > 240) {
            Logger.error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
        }
        buffer.writeByte(this.nbMembers);
    }
    deserialize(buffer) {
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element of GuildVersatileInformations.guildId.");
        }
        this.leaderId = buffer.readVarUhLong();
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leaderId + ") on element of GuildVersatileInformations.leaderId.");
        }
        this.guildLevel = buffer.readUnsignedByte();
        if (this.guildLevel < 1 || this.guildLevel > 200) {
            Logger.error("Forbidden value (" + this.guildLevel + ") on element of GuildVersatileInformations.guildLevel.");
        }
        this.nbMembers = buffer.readUnsignedByte();
        if (this.nbMembers < 1 || this.nbMembers > 240) {
            Logger.error("Forbidden value (" + this.nbMembers + ") on element of GuildVersatileInformations.nbMembers.");
        }
    }
}

// Generated by Noxus types 
export class StartupActionAddObject {
    constructor(uid, title, text, descUrl, pictureUrl, items) {
        this.uid = uid;
        this.title = title;
        this.text = text;
        this.descUrl = descUrl;
        this.pictureUrl = pictureUrl;
        this.items = items;
        this.protocolId = 52;
    }
    serialize(buffer) {
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element uid.");
        }
        buffer.writeInt(this.uid);
        buffer.writeUTF(this.title);
        buffer.writeUTF(this.text);
        buffer.writeUTF(this.descUrl);
        buffer.writeUTF(this.pictureUrl);
        buffer.writeShort(this.items.length);
        var _loc2_ = 0;
        while (_loc2_ < this.items.length) {
            this.items[_loc2_].serialize(buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.uid = buffer.readInt();
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element of StartupActionAddObject.uid.");
        }
        this.title = buffer.readUTF();
        this.text = buffer.readUTF();
        this.descUrl = buffer.readUTF();
        this.pictureUrl = buffer.readUTF();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemInformationWithQuantity();
            _loc4_.deserialize(buffer);
            this.items.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus types 
export class TrustCertificate {
    constructor(id, hash) {
        this.id = id;
        this.hash = hash;
        this.protocolId = 377;
    }
    serialize(buffer) {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        buffer.writeInt(this.id);
        buffer.writeUTF(this.hash);
    }
    deserialize(buffer) {
        this.id = buffer.readInt();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of TrustCertificate.id.");
        }
        this.hash = buffer.readUTF();
    }
}

// Generated by Noxus types 
export class ContentPart {
    constructor(id, state) {
        this.id = id;
        this.state = state;
        this.protocolId = 350;
    }
    serialize(buffer) {
        buffer.writeUTF(this.id);
        buffer.writeByte(this.state);
    }
    deserialize(buffer) {
        this.id = buffer.readUTF();
        this.state = buffer.readByte();
        if (this.state < 0) {
            Logger.error("Forbidden value (" + this.state + ") on element of ContentPart.state.");
        }
    }
}

// Generated by Noxus types 
export class Version {
    constructor(major, minor, release, revision, patch, buildType) {
        this.major = major;
        this.minor = minor;
        this.release = release;
        this.revision = revision;
        this.patch = patch;
        this.buildType = buildType;
        this.protocolId = 11;
    }
    serialize(buffer) {
        if (this.major < 0) {
            Logger.error("Forbidden value (" + this.major + ") on element major.");
        }
        buffer.writeByte(this.major);
        if (this.minor < 0) {
            Logger.error("Forbidden value (" + this.minor + ") on element minor.");
        }
        buffer.writeByte(this.minor);
        if (this.release < 0) {
            Logger.error("Forbidden value (" + this.release + ") on element release.");
        }
        buffer.writeByte(this.release);
        if (this.revision < 0) {
            Logger.error("Forbidden value (" + this.revision + ") on element revision.");
        }
        buffer.writeInt(this.revision);
        if (this.patch < 0) {
            Logger.error("Forbidden value (" + this.patch + ") on element patch.");
        }
        buffer.writeByte(this.patch);
        buffer.writeByte(this.buildType);
    }
    deserialize(buffer) {
        this.major = buffer.readByte();
        if (this.major < 0) {
            Logger.error("Forbidden value (" + this.major + ") on element of Version.major.");
        }
        this.minor = buffer.readByte();
        if (this.minor < 0) {
            Logger.error("Forbidden value (" + this.minor + ") on element of Version.minor.");
        }
        this.release = buffer.readByte();
        if (this.release < 0) {
            Logger.error("Forbidden value (" + this.release + ") on element of Version.release.");
        }
        this.revision = buffer.readInt();
        if (this.revision < 0) {
            Logger.error("Forbidden value (" + this.revision + ") on element of Version.revision.");
        }
        this.patch = buffer.readByte();
        if (this.patch < 0) {
            Logger.error("Forbidden value (" + this.patch + ") on element of Version.patch.");
        }
        this.buildType = buffer.readByte();
        if (this.buildType < 0) {
            Logger.error("Forbidden value (" + this.buildType + ") on element of Version.buildType.");
        }
    }
}

// Generated by Noxus types 
export class VersionExtended extends Version {
    constructor(param1, param2, param3, param4, param5, param6, install, technology) {
        super(param1, param2, param3, param4, param5, param6);
        this.install = install;
        this.technology = technology;
        this.protocolId = 393;
    }
    serialize(buffer) {
        super.serialize(buffer);
        buffer.writeByte(this.install);
        buffer.writeByte(this.technology);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.install = buffer.readByte();
        if (this.install < 0) {
            Logger.error("Forbidden value (" + this.install + ") on element of VersionExtended.install.");
        }
        this.technology = buffer.readByte();
        if (this.technology < 0) {
            Logger.error("Forbidden value (" + this.technology + ") on element of VersionExtended.technology.");
        }
    }
}

// Generated by Noxus types 
export class KrosmasterFigure {
    constructor(uid, figure, pedestal, bound) {
        this.uid = uid;
        this.figure = figure;
        this.pedestal = pedestal;
        this.bound = bound;
        this.protocolId = 397;
    }
    serialize(buffer) {
        buffer.writeUTF(this.uid);
        if (this.figure < 0) {
            Logger.error("Forbidden value (" + this.figure + ") on element figure.");
        }
        buffer.writeVarShort(this.figure);
        if (this.pedestal < 0) {
            Logger.error("Forbidden value (" + this.pedestal + ") on element pedestal.");
        }
        buffer.writeVarShort(this.pedestal);
        buffer.writeBoolean(this.bound);
    }
    deserialize(buffer) {
        this.uid = buffer.readUTF();
        this.figure = buffer.readVarUhShort();
        if (this.figure < 0) {
            Logger.error("Forbidden value (" + this.figure + ") on element of KrosmasterFigure.figure.");
        }
        this.pedestal = buffer.readVarUhShort();
        if (this.pedestal < 0) {
            Logger.error("Forbidden value (" + this.pedestal + ") on element of KrosmasterFigure.pedestal.");
        }
        this.bound = buffer.readBoolean();
    }
}

