// Generated by Noxus messages 
export class AdminCommandMessage extends ProtocolMessage {
    constructor(content) {
        super(76);
        this.content = content;
    }
    serialize() {
        this.buffer.writeUTF(this.content);
    }
    deserialize(buffer) {
        this.content = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class AdminQuietCommandMessage extends AdminCommandMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 5662;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ConsoleCommandsListMessage extends ProtocolMessage {
    constructor(aliases, args, descriptions) {
        super(6127);
        this.aliases = aliases;
        this.args = args;
        this.descriptions = descriptions;
    }
    serialize() {
        this.buffer.writeShort(this.aliases.length);
        var _loc2_ = 0;
        while (_loc2_ < this.aliases.length) {
            this.buffer.writeUTF(this.aliases[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.args.length);
        var _loc3_ = 0;
        while (_loc3_ < this.args.length) {
            this.buffer.writeUTF(this.args[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.descriptions.length);
        var _loc4_ = 0;
        while (_loc4_ < this.descriptions.length) {
            this.buffer.writeUTF(this.descriptions[_loc4_]);
            _loc4_++;
        }
    }
    deserialize(buffer) {
        var _loc8_ = null;
        var _loc9_ = null;
        var _loc10_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = buffer.readUTF();
            this.aliases.push(_loc8_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc9_ = buffer.readUTF();
            this.args.push(_loc9_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc10_ = buffer.readUTF();
            this.descriptions.push(_loc10_);
            _loc7_++;
        }
    }
}

// Generated by Noxus messages 
export class ConsoleMessage extends ProtocolMessage {
    constructor(type, content) {
        super(75);
        this.type = type;
        this.content = content;
    }
    serialize() {
        this.buffer.writeByte(this.type);
        this.buffer.writeUTF(this.content);
    }
    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of ConsoleMessage.type.");
        }
        this.content = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class NetworkDataContainerMessage extends ProtocolMessage {
    constructor(_content) {
        super(2);
        this._content = _content;
    }
    serialize() {
        this.buffer.writeBytes(this.content);
        Logger.error("Not implemented");
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = new Array();
        buffer.readBytes(_loc3_, 0, _loc2_);
        _loc3_.uncompress();
        this.content = _loc3_;
    }
}

// Generated by Noxus messages 
export class AggregateStatMessage extends ProtocolMessage {
    constructor(statId) {
        super(6669);
        this.statId = statId;
    }
    serialize() {
        this.buffer.writeVarShort(this.statId);
    }
    deserialize(buffer) {
        this.statId = buffer.readVarUhShort();
        if (this.statId < 0) {
            Logger.error("Forbidden value (" + this.statId + ") on element of AggregateStatMessage.statId.");
        }
    }
}

// Generated by Noxus messages 
export class AggregateStatWithDataMessage extends AggregateStatMessage {
    constructor(param1, param2) {
        super(param1);
        this.datas = param2;
        this.messageId = 6662;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.datas.length);
        var _loc2_ = 0;
        while (_loc2_ < this.datas.length) {
            this.buffer.writeShort((this.datas[_loc2_]).protocolId);
            this.datas[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(StatisticData, _loc4_);
            _loc5_.deserialize(buffer);
            this.datas.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class BasicPingMessage extends ProtocolMessage {
    constructor(quiet) {
        super(182);
        this.quiet = quiet;
    }
    serialize() {
        this.buffer.writeBoolean(this.quiet);
    }
    deserialize(buffer) {
        this.quiet = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class BasicPongMessage extends ProtocolMessage {
    constructor(quiet) {
        super(183);
        this.quiet = quiet;
    }
    serialize() {
        this.buffer.writeBoolean(this.quiet);
    }
    deserialize(buffer) {
        this.quiet = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class BasicStatMessage extends ProtocolMessage {
    constructor(timeSpent, statId) {
        super(6530);
        this.timeSpent = timeSpent;
        this.statId = statId;
    }
    serialize() {
        if (this.timeSpent < 0 || this.timeSpent > 9007199254740990) {
            Logger.error("Forbidden value (" + this.timeSpent + ") on element timeSpent.");
        }
        this.buffer.writeDouble(this.timeSpent);
        this.buffer.writeVarShort(this.statId);
    }
    deserialize(buffer) {
        this.timeSpent = buffer.readDouble();
        if (this.timeSpent < 0 || this.timeSpent > 9007199254740990) {
            Logger.error("Forbidden value (" + this.timeSpent + ") on element of BasicStatMessage.timeSpent.");
        }
        this.statId = buffer.readVarUhShort();
        if (this.statId < 0) {
            Logger.error("Forbidden value (" + this.statId + ") on element of BasicStatMessage.statId.");
        }
    }
}

// Generated by Noxus messages 
export class BasicStatWithDataMessage extends BasicStatMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.datas = param3;
        this.messageId = 6573;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.datas.length);
        var _loc2_ = 0;
        while (_loc2_ < this.datas.length) {
            this.buffer.writeShort((this.datas[_loc2_]).protocolId);
            this.datas[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(StatisticData, _loc4_);
            _loc5_.deserialize(buffer);
            this.datas.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class CredentialsAcknowledgementMessage extends ProtocolMessage {
constructor) {
    super(6314);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class HelloConnectMessage extends ProtocolMessage {
    constructor(salt, key) {
        super(3);
        this.salt = salt;
        this.key = key;
    }
    serialize() {
        this.buffer.writeUTF(this.salt);
        this.buffer.writeVarInt(this.key.length);
        var _loc2_ = 0;
        while (_loc2_ < this.key.length) {
            this.buffer.writeByte(this.key[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.salt = buffer.readUTF();
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.key.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class IdentificationAccountForceMessage extends IdentificationMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9);
        this.forcedAccountLogin = param10;
        this.messageId = 6119;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.forcedAccountLogin);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.forcedAccountLogin = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class IdentificationFailedBannedMessage extends IdentificationFailedMessage {
    constructor(param1, param2) {
        super(param1);
        this.banEndDate = param2;
        this.messageId = 6174;
    }
    serialize() {
        super.serialize();
        if (this.banEndDate < 0 || this.banEndDate > 9007199254740990) {
            Logger.error("Forbidden value (" + this.banEndDate + ") on element banEndDate.");
        }
        this.buffer.writeDouble(this.banEndDate);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.banEndDate = buffer.readDouble();
        if (this.banEndDate < 0 || this.banEndDate > 9007199254740990) {
            Logger.error("Forbidden value (" + this.banEndDate + ") on element of IdentificationFailedBannedMessage.banEndDate.");
        }
    }
}

// Generated by Noxus messages 
export class IdentificationFailedForBadVersionMessage extends IdentificationFailedMessage {
    constructor(param1, param2) {
        super(param1);
        this.requiredVersion = param2;
        this.messageId = 21;
    }
    serialize() {
        super.serialize();
        this.requiredVersion.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.requiredVersion = new Version();
        this.requiredVersion.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class IdentificationFailedMessage extends ProtocolMessage {
    constructor(reason) {
        super(20);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of IdentificationFailedMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class IdentificationMessage extends ProtocolMessage {
    constructor(version, lang, credentials, serverId, autoconnect, useCertificate, useLoginToken, sessionOptionalSalt, failedAttempts) {
        super(4);
        this.version = version;
        this.lang = lang;
        this.credentials = credentials;
        this.serverId = serverId;
        this.autoconnect = autoconnect;
        this.useCertificate = useCertificate;
        this.useLoginToken = useLoginToken;
        this.sessionOptionalSalt = sessionOptionalSalt;
        this.failedAttempts = failedAttempts;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.autoconnect);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.useCertificate);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 2, this.useLoginToken);
        this.buffer.writeByte(_loc2_);
        this.version.serialize(this.buffer);
        this.buffer.writeUTF(this.lang);
        this.buffer.writeShort(this.serverId);
        if (this.sessionOptionalSalt < -9007199254740990 || this.sessionOptionalSalt > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sessionOptionalSalt + ") on element sessionOptionalSalt.");
        }
        this.buffer.writeVarLong(this.sessionOptionalSalt);
        this.buffer.writeShort(this.failedAttempts.length);
        var _loc4_ = 0;
        while (_loc4_ < this.failedAttempts.length) {
            if (this.failedAttempts[_loc4_] < 0) {
                Logger.error("Forbidden value (" + this.failedAttempts[_loc4_] + ") on element 9 (starting at 1) of failedAttempts.");
            }
            this.buffer.writeVarShort(this.failedAttempts[_loc4_]);
            _loc4_++;
        }
    }
    deserialize(buffer) {
        var _loc7_ = 0;
        var _loc8_ = 0;
        var _loc2_ = buffer.readByte();
        this.autoconnect = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.useCertificate = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.useLoginToken = IO.BooleanByteWrapper.getFlag(_loc2_, 2);
        this.version = new VersionExtended();
        this.version.deserialize(buffer);
        this.lang = buffer.readUTF();
        var _loc3_ = buffer.readVarInt();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc7_ = buffer.readByte();
            this.credentials.push(_loc7_);
            _loc4_++;
        }
        this.serverId = buffer.readShort();
        this.sessionOptionalSalt = buffer.readVarLong();
        if (this.sessionOptionalSalt < -9007199254740990 || this.sessionOptionalSalt > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sessionOptionalSalt + ") on element of IdentificationMessage.sessionOptionalSalt.");
        }
        var _loc5_ = buffer.readUnsignedShort();
        var _loc6_ = 0;
        while (_loc6_ < _loc5_) {
            _loc8_ = buffer.readVarUhShort();
            if (_loc8_ < 0) {
                Logger.error("Forbidden value (" + _loc8_ + ") on elements of failedAttempts.");
            }
            this.failedAttempts.push(_loc8_);
            _loc6_++;
        }
    }
}

// Generated by Noxus messages 
export class IdentificationSuccessMessage extends ProtocolMessage {
    constructor(login, nickname, accountId, communityId, hasRights, secretQuestion, accountCreation, subscriptionElapsedDuration, subscriptionEndDate, wasAlreadyConnected, havenbagAvailableRoom) {
        super(22);
        this.login = login;
        this.nickname = nickname;
        this.accountId = accountId;
        this.communityId = communityId;
        this.hasRights = hasRights;
        this.secretQuestion = secretQuestion;
        this.accountCreation = accountCreation;
        this.subscriptionElapsedDuration = subscriptionElapsedDuration;
        this.subscriptionEndDate = subscriptionEndDate;
        this.wasAlreadyConnected = wasAlreadyConnected;
        this.havenbagAvailableRoom = havenbagAvailableRoom;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.hasRights);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.wasAlreadyConnected);
        this.buffer.writeByte(_loc2_);
        this.buffer.writeUTF(this.login);
        this.buffer.writeUTF(this.nickname);
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        if (this.communityId < 0) {
            Logger.error("Forbidden value (" + this.communityId + ") on element communityId.");
        }
        this.buffer.writeByte(this.communityId);
        this.buffer.writeUTF(this.secretQuestion);
        if (this.accountCreation < 0 || this.accountCreation > 9007199254740990) {
            Logger.error("Forbidden value (" + this.accountCreation + ") on element accountCreation.");
        }
        this.buffer.writeDouble(this.accountCreation);
        if (this.subscriptionElapsedDuration < 0 || this.subscriptionElapsedDuration > 9007199254740990) {
            Logger.error("Forbidden value (" + this.subscriptionElapsedDuration + ") on element subscriptionElapsedDuration.");
        }
        this.buffer.writeDouble(this.subscriptionElapsedDuration);
        if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740990) {
            Logger.error("Forbidden value (" + this.subscriptionEndDate + ") on element subscriptionEndDate.");
        }
        this.buffer.writeDouble(this.subscriptionEndDate);
        if (this.havenbagAvailableRoom < 0 || this.havenbagAvailableRoom > 255) {
            Logger.error("Forbidden value (" + this.havenbagAvailableRoom + ") on element havenbagAvailableRoom.");
        }
        this.buffer.writeByte(this.havenbagAvailableRoom);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.hasRights = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.wasAlreadyConnected = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.login = buffer.readUTF();
        this.nickname = buffer.readUTF();
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of IdentificationSuccessMessage.accountId.");
        }
        this.communityId = buffer.readByte();
        if (this.communityId < 0) {
            Logger.error("Forbidden value (" + this.communityId + ") on element of IdentificationSuccessMessage.communityId.");
        }
        this.secretQuestion = buffer.readUTF();
        this.accountCreation = buffer.readDouble();
        if (this.accountCreation < 0 || this.accountCreation > 9007199254740990) {
            Logger.error("Forbidden value (" + this.accountCreation + ") on element of IdentificationSuccessMessage.accountCreation.");
        }
        this.subscriptionElapsedDuration = buffer.readDouble();
        if (this.subscriptionElapsedDuration < 0 || this.subscriptionElapsedDuration > 9007199254740990) {
            Logger.error("Forbidden value (" + this.subscriptionElapsedDuration + ") on element of IdentificationSuccessMessage.subscriptionElapsedDuration.");
        }
        this.subscriptionEndDate = buffer.readDouble();
        if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740990) {
            Logger.error("Forbidden value (" + this.subscriptionEndDate + ") on element of IdentificationSuccessMessage.subscriptionEndDate.");
        }
        this.havenbagAvailableRoom = buffer.readUnsignedByte();
        if (this.havenbagAvailableRoom < 0 || this.havenbagAvailableRoom > 255) {
            Logger.error("Forbidden value (" + this.havenbagAvailableRoom + ") on element of IdentificationSuccessMessage.havenbagAvailableRoom.");
        }
    }
}

// Generated by Noxus messages 
export class IdentificationSuccessWithLoginTokenMessage extends IdentificationSuccessMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
        this.loginToken = param12;
        this.messageId = 6209;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.loginToken);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.loginToken = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class SelectedServerDataExtendedMessage extends SelectedServerDataMessage {
    constructor(param1, param2, param3, param4, param5, param6) {
        super(param1, param2, param3, param4, param5);
        this.serverIds = param6;
        this.messageId = 6469;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.serverIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.serverIds.length) {
            if (this.serverIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.serverIds[_loc2_] + ") on element 1 (starting at 1) of serverIds.");
            }
            this.buffer.writeVarShort(this.serverIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of serverIds.");
            }
            this.serverIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class SelectedServerDataMessage extends ProtocolMessage {
    constructor(serverId, address, port, canCreateNewCharacter, ticket) {
        super(42);
        this.serverId = serverId;
        this.address = address;
        this.port = port;
        this.canCreateNewCharacter = canCreateNewCharacter;
        this.ticket = ticket;
    }
    serialize() {
        if (this.serverId < 0) {
            Logger.error("Forbidden value (" + this.serverId + ") on element serverId.");
        }
        this.buffer.writeVarShort(this.serverId);
        this.buffer.writeUTF(this.address);
        if (this.port < 0 || this.port > 65535) {
            Logger.error("Forbidden value (" + this.port + ") on element port.");
        }
        this.buffer.writeShort(this.port);
        this.buffer.writeBoolean(this.canCreateNewCharacter);
        this.buffer.writeVarInt(this.ticket.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ticket.length) {
            this.buffer.writeByte(this.ticket[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.serverId = buffer.readVarUhShort();
        if (this.serverId < 0) {
            Logger.error("Forbidden value (" + this.serverId + ") on element of SelectedServerDataMessage.serverId.");
        }
        this.address = buffer.readUTF();
        this.port = buffer.readUnsignedShort();
        if (this.port < 0 || this.port > 65535) {
            Logger.error("Forbidden value (" + this.port + ") on element of SelectedServerDataMessage.port.");
        }
        this.canCreateNewCharacter = buffer.readBoolean();
        this.ticket = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class SelectedServerRefusedMessage extends ProtocolMessage {
    constructor(serverId, error, serverStatus) {
        super(41);
        this.serverId = serverId;
        this.error = error;
        this.serverStatus = serverStatus;
    }
    serialize() {
        if (this.serverId < 0) {
            Logger.error("Forbidden value (" + this.serverId + ") on element serverId.");
        }
        this.buffer.writeVarShort(this.serverId);
        this.buffer.writeByte(this.error);
        this.buffer.writeByte(this.serverStatus);
    }
    deserialize(buffer) {
        this.serverId = buffer.readVarUhShort();
        if (this.serverId < 0) {
            Logger.error("Forbidden value (" + this.serverId + ") on element of SelectedServerRefusedMessage.serverId.");
        }
        this.error = buffer.readByte();
        if (this.error < 0) {
            Logger.error("Forbidden value (" + this.error + ") on element of SelectedServerRefusedMessage.error.");
        }
        this.serverStatus = buffer.readByte();
        if (this.serverStatus < 0) {
            Logger.error("Forbidden value (" + this.serverStatus + ") on element of SelectedServerRefusedMessage.serverStatus.");
        }
    }
}

// Generated by Noxus messages 
export class ServerSelectionMessage extends ProtocolMessage {
    constructor(serverId) {
        super(40);
        this.serverId = serverId;
    }
    serialize() {
        if (this.serverId < 0) {
            Logger.error("Forbidden value (" + this.serverId + ") on element serverId.");
        }
        this.buffer.writeVarShort(this.serverId);
    }
    deserialize(buffer) {
        this.serverId = buffer.readVarUhShort();
        if (this.serverId < 0) {
            Logger.error("Forbidden value (" + this.serverId + ") on element of ServerSelectionMessage.serverId.");
        }
    }
}

// Generated by Noxus messages 
export class ServersListMessage extends ProtocolMessage {
    constructor(servers, alreadyConnectedToServerId, canCreateNewCharacter) {
        super(30);
        this.servers = servers;
        this.alreadyConnectedToServerId = alreadyConnectedToServerId;
        this.canCreateNewCharacter = canCreateNewCharacter;
    }
    serialize() {
        this.buffer.writeShort(this.servers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.servers.length) {
            this.servers[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        if (this.alreadyConnectedToServerId < 0) {
            Logger.error("Forbidden value (" + this.alreadyConnectedToServerId + ") on element alreadyConnectedToServerId.");
        }
        this.buffer.writeVarShort(this.alreadyConnectedToServerId);
        this.buffer.writeBoolean(this.canCreateNewCharacter);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GameServerInformations();
            _loc4_.deserialize(buffer);
            this.servers.push(_loc4_);
            _loc3_++;
        }
        this.alreadyConnectedToServerId = buffer.readVarUhShort();
        if (this.alreadyConnectedToServerId < 0) {
            Logger.error("Forbidden value (" + this.alreadyConnectedToServerId + ") on element of ServersListMessage.alreadyConnectedToServerId.");
        }
        this.canCreateNewCharacter = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class ServerStatusUpdateMessage extends ProtocolMessage {
    constructor(server) {
        super(50);
        this.server = server;
    }
    serialize() {
        this.server.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.server = new GameServerInformations();
        this.server.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AccountLinkRequiredMessage extends ProtocolMessage {
constructor) {
    super(6607);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class NicknameAcceptedMessage extends ProtocolMessage {
constructor) {
    super(5641);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class NicknameChoiceRequestMessage extends ProtocolMessage {
    constructor(nickname) {
        super(5639);
        this.nickname = nickname;
    }
    serialize() {
        this.buffer.writeUTF(this.nickname);
    }
    deserialize(buffer) {
        this.nickname = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class NicknameRefusedMessage extends ProtocolMessage {
    constructor(reason) {
        super(5638);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of NicknameRefusedMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class NicknameRegistrationMessage extends ProtocolMessage {
constructor) {
    super(5640);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class AcquaintanceSearchErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6143);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of AcquaintanceSearchErrorMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class AcquaintanceSearchMessage extends ProtocolMessage {
    constructor(nickname) {
        super(6144);
        this.nickname = nickname;
    }
    serialize() {
        this.buffer.writeUTF(this.nickname);
    }
    deserialize(buffer) {
        this.nickname = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class AcquaintanceServerListMessage extends ProtocolMessage {
    constructor(servers) {
        super(6142);
        this.servers = servers;
    }
    serialize() {
        this.buffer.writeShort(this.servers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.servers.length) {
            if (this.servers[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.servers[_loc2_] + ") on element 1 (starting at 1) of servers.");
            }
            this.buffer.writeVarShort(this.servers[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of servers.");
            }
            this.servers.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class DebugClearHighlightCellsMessage extends ProtocolMessage {
constructor) {
    super(2002);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class DebugHighlightCellsMessage extends ProtocolMessage {
    constructor(color, cells) {
        super(2001);
        this.color = color;
        this.cells = cells;
    }
    serialize() {
        this.buffer.writeInt(this.color);
        this.buffer.writeShort(this.cells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cells.length) {
            if (this.cells[_loc2_] < 0 || this.cells[_loc2_] > 559) {
                Logger.error("Forbidden value (" + this.cells[_loc2_] + ") on element 2 (starting at 1) of cells.");
            }
            this.buffer.writeVarShort(this.cells[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.color = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0 || _loc4_ > 559) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of cells.");
            }
            this.cells.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class DebugInClientMessage extends ProtocolMessage {
    constructor(level, message) {
        super(6028);
        this.level = level;
        this.message = message;
    }
    serialize() {
        this.buffer.writeByte(this.level);
        this.buffer.writeUTF(this.message);
    }
    deserialize(buffer) {
        this.level = buffer.readByte();
        if (this.level < 0) {
            Logger.error("Forbidden value (" + this.level + ") on element of DebugInClientMessage.level.");
        }
        this.message = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class AchievementDetailedListMessage extends ProtocolMessage {
    constructor(startedAchievements, finishedAchievements) {
        super(6358);
        this.startedAchievements = startedAchievements;
        this.finishedAchievements = finishedAchievements;
    }
    serialize() {
        this.buffer.writeShort(this.startedAchievements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.startedAchievements.length) {
            this.startedAchievements[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.finishedAchievements.length);
        var _loc3_ = 0;
        while (_loc3_ < this.finishedAchievements.length) {
            this.finishedAchievements[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new Achievement();
            _loc6_.deserialize(buffer);
            this.startedAchievements.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new Achievement();
            _loc7_.deserialize(buffer);
            this.finishedAchievements.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class AchievementDetailedListRequestMessage extends ProtocolMessage {
    constructor(categoryId) {
        super(6357);
        this.categoryId = categoryId;
    }
    serialize() {
        if (this.categoryId < 0) {
            Logger.error("Forbidden value (" + this.categoryId + ") on element categoryId.");
        }
        this.buffer.writeVarShort(this.categoryId);
    }
    deserialize(buffer) {
        this.categoryId = buffer.readVarUhShort();
        if (this.categoryId < 0) {
            Logger.error("Forbidden value (" + this.categoryId + ") on element of AchievementDetailedListRequestMessage.categoryId.");
        }
    }
}

// Generated by Noxus messages 
export class AchievementDetailsMessage extends ProtocolMessage {
    constructor(achievement) {
        super(6378);
        this.achievement = achievement;
    }
    serialize() {
        this.achievement.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.achievement = new Achievement();
        this.achievement.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AchievementDetailsRequestMessage extends ProtocolMessage {
    constructor(achievementId) {
        super(6380);
        this.achievementId = achievementId;
    }
    serialize() {
        if (this.achievementId < 0) {
            Logger.error("Forbidden value (" + this.achievementId + ") on element achievementId.");
        }
        this.buffer.writeVarShort(this.achievementId);
    }
    deserialize(buffer) {
        this.achievementId = buffer.readVarUhShort();
        if (this.achievementId < 0) {
            Logger.error("Forbidden value (" + this.achievementId + ") on element of AchievementDetailsRequestMessage.achievementId.");
        }
    }
}

// Generated by Noxus messages 
export class AchievementFinishedInformationMessage extends AchievementFinishedMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.name = param3;
        this.playerId = param4;
        this.messageId = 6381;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.name);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of AchievementFinishedInformationMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class AchievementFinishedMessage extends ProtocolMessage {
    constructor(id, finishedlevel) {
        super(6208);
        this.id = id;
        this.finishedlevel = finishedlevel;
    }
    serialize() {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarShort(this.id);
        if (this.finishedlevel < 0 || this.finishedlevel > 200) {
            Logger.error("Forbidden value (" + this.finishedlevel + ") on element finishedlevel.");
        }
        this.buffer.writeByte(this.finishedlevel);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of AchievementFinishedMessage.id.");
        }
        this.finishedlevel = buffer.readUnsignedByte();
        if (this.finishedlevel < 0 || this.finishedlevel > 200) {
            Logger.error("Forbidden value (" + this.finishedlevel + ") on element of AchievementFinishedMessage.finishedlevel.");
        }
    }
}

// Generated by Noxus messages 
export class AchievementListMessage extends ProtocolMessage {
    constructor(finishedAchievementsIds, rewardableAchievements) {
        super(6205);
        this.finishedAchievementsIds = finishedAchievementsIds;
        this.rewardableAchievements = rewardableAchievements;
    }
    serialize() {
        this.buffer.writeShort(this.finishedAchievementsIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.finishedAchievementsIds.length) {
            if (this.finishedAchievementsIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.finishedAchievementsIds[_loc2_] + ") on element 1 (starting at 1) of finishedAchievementsIds.");
            }
            this.buffer.writeVarShort(this.finishedAchievementsIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.rewardableAchievements.length);
        var _loc3_ = 0;
        while (_loc3_ < this.rewardableAchievements.length) {
            this.rewardableAchievements[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of finishedAchievementsIds.");
            }
            this.finishedAchievementsIds.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new AchievementRewardable();
            _loc7_.deserialize(buffer);
            this.rewardableAchievements.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class AchievementRewardErrorMessage extends ProtocolMessage {
    constructor(achievementId) {
        super(6375);
        this.achievementId = achievementId;
    }
    serialize() {
        this.buffer.writeShort(this.achievementId);
    }
    deserialize(buffer) {
        this.achievementId = buffer.readShort();
    }
}

// Generated by Noxus messages 
export class AchievementRewardRequestMessage extends ProtocolMessage {
    constructor(achievementId) {
        super(6377);
        this.achievementId = achievementId;
    }
    serialize() {
        this.buffer.writeShort(this.achievementId);
    }
    deserialize(buffer) {
        this.achievementId = buffer.readShort();
    }
}

// Generated by Noxus messages 
export class AchievementRewardSuccessMessage extends ProtocolMessage {
    constructor(achievementId) {
        super(6376);
        this.achievementId = achievementId;
    }
    serialize() {
        this.buffer.writeShort(this.achievementId);
    }
    deserialize(buffer) {
        this.achievementId = buffer.readShort();
    }
}

// Generated by Noxus messages 
export class FriendGuildSetWarnOnAchievementCompleteMessage extends ProtocolMessage {
    constructor(enable) {
        super(6382);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class FriendGuildWarnOnAchievementCompleteStateMessage extends ProtocolMessage {
    constructor(enable) {
        super(6383);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class AbstractGameActionMessage extends ProtocolMessage {
    constructor(actionId, sourceId) {
        super(1000);
        this.actionId = actionId;
        this.sourceId = sourceId;
    }
    serialize() {
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        this.buffer.writeVarShort(this.actionId);
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        this.buffer.writeDouble(this.sourceId);
    }
    deserialize(buffer) {
        this.actionId = buffer.readVarUhShort();
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element of AbstractGameActionMessage.actionId.");
        }
        this.sourceId = buffer.readDouble();
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element of AbstractGameActionMessage.sourceId.");
        }
    }
}

// Generated by Noxus messages 
export class AbstractGameActionWithAckMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.waitAckId = param3;
        this.messageId = 1001;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.waitAckId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.waitAckId = buffer.readShort();
    }
}

// Generated by Noxus messages 
export class GameActionAcknowledgementMessage extends ProtocolMessage {
    constructor(valid, actionId) {
        super(957);
        this.valid = valid;
        this.actionId = actionId;
    }
    serialize() {
        this.buffer.writeBoolean(this.valid);
        this.buffer.writeByte(this.actionId);
    }
    deserialize(buffer) {
        this.valid = buffer.readBoolean();
        this.actionId = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class GameActionNoopMessage extends ProtocolMessage {
constructor) {
    super(1002);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class AbstractGameActionFightTargetedAbilityMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7) {
        super(param1, param2);
        this.targetId = param3;
        this.destinationCellId = param4;
        this.critical = param5;
        this.silentCast = param6;
        this.verboseCast = param7;
        this.messageId = 6118;
    }
    serialize() {
        super.serialize();
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.silentCast);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.verboseCast);
        this.buffer.writeByte(_loc2_);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.destinationCellId < -1 || this.destinationCellId > 559) {
            Logger.error("Forbidden value (" + this.destinationCellId + ") on element destinationCellId.");
        }
        this.buffer.writeShort(this.destinationCellId);
        this.buffer.writeByte(this.critical);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readByte();
        this.silentCast = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.verboseCast = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of AbstractGameActionFightTargetedAbilityMessage.targetId.");
        }
        this.destinationCellId = buffer.readShort();
        if (this.destinationCellId < -1 || this.destinationCellId > 559) {
            Logger.error("Forbidden value (" + this.destinationCellId + ") on element of AbstractGameActionFightTargetedAbilityMessage.destinationCellId.");
        }
        this.critical = buffer.readByte();
        if (this.critical < 0) {
            Logger.error("Forbidden value (" + this.critical + ") on element of AbstractGameActionFightTargetedAbilityMessage.critical.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightActivateGlyphTrapMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.markId = param3;
        this.active = param4;
        this.messageId = 6545;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.markId);
        this.buffer.writeBoolean(this.active);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.markId = buffer.readShort();
        this.active = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameActionFightCarryCharacterMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.cellId = param4;
        this.messageId = 5830;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightCarryCharacterMessage.targetId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of GameActionFightCarryCharacterMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightCastOnTargetRequestMessage extends ProtocolMessage {
    constructor(spellId, targetId) {
        super(6330);
        this.spellId = spellId;
        this.targetId = targetId;
    }
    serialize() {
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }
    deserialize(buffer) {
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of GameActionFightCastOnTargetRequestMessage.spellId.");
        }
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightCastOnTargetRequestMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightCastRequestMessage extends ProtocolMessage {
    constructor(spellId, cellId) {
        super(1005);
        this.spellId = spellId;
        this.cellId = cellId;
    }
    serialize() {
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }
    deserialize(buffer) {
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of GameActionFightCastRequestMessage.spellId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of GameActionFightCastRequestMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightChangeLookMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.entityLook = param4;
        this.messageId = 5532;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        this.entityLook.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightChangeLookMessage.targetId.");
        }
        this.entityLook = new EntityLook();
        this.entityLook.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameActionFightCloseCombatMessage extends AbstractGameActionFightTargetedAbilityMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8) {
        super(param1, param2, param3, param4, param5, param6, param7);
        this.weaponGenericId = param8;
        this.messageId = 6116;
    }
    serialize() {
        super.serialize();
        if (this.weaponGenericId < 0) {
            Logger.error("Forbidden value (" + this.weaponGenericId + ") on element weaponGenericId.");
        }
        this.buffer.writeVarShort(this.weaponGenericId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.weaponGenericId = buffer.readVarUhShort();
        if (this.weaponGenericId < 0) {
            Logger.error("Forbidden value (" + this.weaponGenericId + ") on element of GameActionFightCloseCombatMessage.weaponGenericId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightDeathMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.targetId = param3;
        this.messageId = 1099;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightDeathMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightDispellableEffectMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.effect = param3;
        this.messageId = 6070;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.effect.protocolId);
        this.effect.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.effect = ProtocolTypeManager.getInstance(AbstractFightDispellableEffect, _loc2_);
        this.effect.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameActionFightDispellEffectMessage extends GameActionFightDispellMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2, param3);
        this.boostUID = param4;
        this.messageId = 6113;
    }
    serialize() {
        super.serialize();
        if (this.boostUID < 0) {
            Logger.error("Forbidden value (" + this.boostUID + ") on element boostUID.");
        }
        this.buffer.writeInt(this.boostUID);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.boostUID = buffer.readInt();
        if (this.boostUID < 0) {
            Logger.error("Forbidden value (" + this.boostUID + ") on element of GameActionFightDispellEffectMessage.boostUID.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightDispellMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.targetId = param3;
        this.messageId = 5533;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightDispellMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightDispellSpellMessage extends GameActionFightDispellMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2, param3);
        this.spellId = param4;
        this.messageId = 6176;
    }
    serialize() {
        super.serialize();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of GameActionFightDispellSpellMessage.spellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightDodgePointLossMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.amount = param4;
        this.messageId = 5828;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.amount < 0) {
            Logger.error("Forbidden value (" + this.amount + ") on element amount.");
        }
        this.buffer.writeVarShort(this.amount);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightDodgePointLossMessage.targetId.");
        }
        this.amount = buffer.readVarUhShort();
        if (this.amount < 0) {
            Logger.error("Forbidden value (" + this.amount + ") on element of GameActionFightDodgePointLossMessage.amount.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightDropCharacterMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.cellId = param4;
        this.messageId = 5826;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightDropCharacterMessage.targetId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of GameActionFightDropCharacterMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightExchangePositionsMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4, param5) {
        super(param1, param2);
        this.targetId = param3;
        this.casterCellId = param4;
        this.targetCellId = param5;
        this.messageId = 5527;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.casterCellId < -1 || this.casterCellId > 559) {
            Logger.error("Forbidden value (" + this.casterCellId + ") on element casterCellId.");
        }
        this.buffer.writeShort(this.casterCellId);
        if (this.targetCellId < -1 || this.targetCellId > 559) {
            Logger.error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
        }
        this.buffer.writeShort(this.targetCellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightExchangePositionsMessage.targetId.");
        }
        this.casterCellId = buffer.readShort();
        if (this.casterCellId < -1 || this.casterCellId > 559) {
            Logger.error("Forbidden value (" + this.casterCellId + ") on element of GameActionFightExchangePositionsMessage.casterCellId.");
        }
        this.targetCellId = buffer.readShort();
        if (this.targetCellId < -1 || this.targetCellId > 559) {
            Logger.error("Forbidden value (" + this.targetCellId + ") on element of GameActionFightExchangePositionsMessage.targetCellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightInvisibilityMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.state = param4;
        this.messageId = 5821;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        this.buffer.writeByte(this.state);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightInvisibilityMessage.targetId.");
        }
        this.state = buffer.readByte();
        if (this.state < 0) {
            Logger.error("Forbidden value (" + this.state + ") on element of GameActionFightInvisibilityMessage.state.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightInvisibleDetectedMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.cellId = param4;
        this.messageId = 6320;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightInvisibleDetectedMessage.targetId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of GameActionFightInvisibleDetectedMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightKillMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.targetId = param3;
        this.messageId = 5571;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightKillMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightLifeAndShieldPointsLostMessage extends GameActionFightLifePointsLostMessage {
    constructor(param1, param2, param3, param4, param5, param6) {
        super(param1, param2, param3, param4, param5);
        this.shieldLoss = param6;
        this.messageId = 6310;
    }
    serialize() {
        super.serialize();
        if (this.shieldLoss < 0) {
            Logger.error("Forbidden value (" + this.shieldLoss + ") on element shieldLoss.");
        }
        this.buffer.writeVarShort(this.shieldLoss);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.shieldLoss = buffer.readVarUhShort();
        if (this.shieldLoss < 0) {
            Logger.error("Forbidden value (" + this.shieldLoss + ") on element of GameActionFightLifeAndShieldPointsLostMessage.shieldLoss.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightLifePointsGainMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.delta = param4;
        this.messageId = 6311;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.delta < 0) {
            Logger.error("Forbidden value (" + this.delta + ") on element delta.");
        }
        this.buffer.writeVarInt(this.delta);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightLifePointsGainMessage.targetId.");
        }
        this.delta = buffer.readVarUhInt();
        if (this.delta < 0) {
            Logger.error("Forbidden value (" + this.delta + ") on element of GameActionFightLifePointsGainMessage.delta.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightLifePointsLostMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4, param5) {
        super(param1, param2);
        this.targetId = param3;
        this.loss = param4;
        this.permanentDamages = param5;
        this.messageId = 6312;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.loss < 0) {
            Logger.error("Forbidden value (" + this.loss + ") on element loss.");
        }
        this.buffer.writeVarInt(this.loss);
        if (this.permanentDamages < 0) {
            Logger.error("Forbidden value (" + this.permanentDamages + ") on element permanentDamages.");
        }
        this.buffer.writeVarInt(this.permanentDamages);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightLifePointsLostMessage.targetId.");
        }
        this.loss = buffer.readVarUhInt();
        if (this.loss < 0) {
            Logger.error("Forbidden value (" + this.loss + ") on element of GameActionFightLifePointsLostMessage.loss.");
        }
        this.permanentDamages = buffer.readVarUhInt();
        if (this.permanentDamages < 0) {
            Logger.error("Forbidden value (" + this.permanentDamages + ") on element of GameActionFightLifePointsLostMessage.permanentDamages.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightMarkCellsMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.mark = param3;
        this.messageId = 5540;
    }
    serialize() {
        super.serialize();
        this.mark.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.mark = new GameActionMark();
        this.mark.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameActionFightModifyEffectsDurationMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.delta = param4;
        this.messageId = 6304;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        this.buffer.writeShort(this.delta);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightModifyEffectsDurationMessage.targetId.");
        }
        this.delta = buffer.readShort();
    }
}

// Generated by Noxus messages 
export class GameActionFightNoSpellCastMessage extends ProtocolMessage {
    constructor(spellLevelId) {
        super(6132);
        this.spellLevelId = spellLevelId;
    }
    serialize() {
        if (this.spellLevelId < 0) {
            Logger.error("Forbidden value (" + this.spellLevelId + ") on element spellLevelId.");
        }
        this.buffer.writeVarInt(this.spellLevelId);
    }
    deserialize(buffer) {
        this.spellLevelId = buffer.readVarUhInt();
        if (this.spellLevelId < 0) {
            Logger.error("Forbidden value (" + this.spellLevelId + ") on element of GameActionFightNoSpellCastMessage.spellLevelId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightPointsVariationMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.delta = param4;
        this.messageId = 1030;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        this.buffer.writeShort(this.delta);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightPointsVariationMessage.targetId.");
        }
        this.delta = buffer.readShort();
    }
}

// Generated by Noxus messages 
export class GameActionFightReduceDamagesMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.amount = param4;
        this.messageId = 5526;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.amount < 0) {
            Logger.error("Forbidden value (" + this.amount + ") on element amount.");
        }
        this.buffer.writeVarInt(this.amount);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightReduceDamagesMessage.targetId.");
        }
        this.amount = buffer.readVarUhInt();
        if (this.amount < 0) {
            Logger.error("Forbidden value (" + this.amount + ") on element of GameActionFightReduceDamagesMessage.amount.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightReflectDamagesMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.targetId = param3;
        this.messageId = 5530;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightReflectDamagesMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightReflectSpellMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.targetId = param3;
        this.messageId = 5531;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightReflectSpellMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightSlideMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4, param5) {
        super(param1, param2);
        this.targetId = param3;
        this.startCellId = param4;
        this.endCellId = param5;
        this.messageId = 5525;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.startCellId < -1 || this.startCellId > 559) {
            Logger.error("Forbidden value (" + this.startCellId + ") on element startCellId.");
        }
        this.buffer.writeShort(this.startCellId);
        if (this.endCellId < -1 || this.endCellId > 559) {
            Logger.error("Forbidden value (" + this.endCellId + ") on element endCellId.");
        }
        this.buffer.writeShort(this.endCellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightSlideMessage.targetId.");
        }
        this.startCellId = buffer.readShort();
        if (this.startCellId < -1 || this.startCellId > 559) {
            Logger.error("Forbidden value (" + this.startCellId + ") on element of GameActionFightSlideMessage.startCellId.");
        }
        this.endCellId = buffer.readShort();
        if (this.endCellId < -1 || this.endCellId > 559) {
            Logger.error("Forbidden value (" + this.endCellId + ") on element of GameActionFightSlideMessage.endCellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightSpellCastMessage extends AbstractGameActionFightTargetedAbilityMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10) {
        super(param1, param2, param3, param4, param5, param6, param7);
        this.spellId = param8;
        this.spellLevel = param9;
        this.portalsIds = param10;
        this.messageId = 1010;
    }
    serialize() {
        super.serialize();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        if (this.spellLevel < 1 || this.spellLevel > 6) {
            Logger.error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
        }
        this.buffer.writeByte(this.spellLevel);
        this.buffer.writeShort(this.portalsIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.portalsIds.length) {
            this.buffer.writeShort(this.portalsIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellCastMessage.spellId.");
        }
        this.spellLevel = buffer.readByte();
        if (this.spellLevel < 1 || this.spellLevel > 6) {
            Logger.error("Forbidden value (" + this.spellLevel + ") on element of GameActionFightSpellCastMessage.spellLevel.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readShort();
            this.portalsIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightSpellCooldownVariationMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4, param5) {
        super(param1, param2);
        this.targetId = param3;
        this.spellId = param4;
        this.value = param5;
        this.messageId = 6219;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        this.buffer.writeVarShort(this.value);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightSpellCooldownVariationMessage.targetId.");
        }
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellCooldownVariationMessage.spellId.");
        }
        this.value = buffer.readVarShort();
    }
}

// Generated by Noxus messages 
export class GameActionFightSpellImmunityMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.spellId = param4;
        this.messageId = 6221;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightSpellImmunityMessage.targetId.");
        }
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellImmunityMessage.spellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightStealKamaMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.amount = param4;
        this.messageId = 5535;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.amount < 0) {
            Logger.error("Forbidden value (" + this.amount + ") on element amount.");
        }
        this.buffer.writeVarInt(this.amount);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightStealKamaMessage.targetId.");
        }
        this.amount = buffer.readVarUhInt();
        if (this.amount < 0) {
            Logger.error("Forbidden value (" + this.amount + ") on element of GameActionFightStealKamaMessage.amount.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightSummonMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.summons = param3;
        this.messageId = 5825;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.summons.length);
        var _loc2_ = 0;
        while (_loc2_ < this.summons.length) {
            this.buffer.writeShort((this.summons[_loc2_]).protocolId);
            this.summons[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(GameFightFighterInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.summons.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightTackledMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.tacklersIds = param3;
        this.messageId = 1004;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.tacklersIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.tacklersIds.length) {
            if (this.tacklersIds[_loc2_] < -9007199254740990 || this.tacklersIds[_loc2_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.tacklersIds[_loc2_] + ") on element 1 (starting at 1) of tacklersIds.");
            }
            this.buffer.writeDouble(this.tacklersIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readDouble();
            if (_loc4_ < -9007199254740990 || _loc4_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of tacklersIds.");
            }
            this.tacklersIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightTeleportOnSameMapMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.cellId = param4;
        this.messageId = 5528;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightTeleportOnSameMapMessage.targetId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of GameActionFightTeleportOnSameMapMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightThrowCharacterMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.targetId = param3;
        this.cellId = param4;
        this.messageId = 5829;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeShort(this.cellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightThrowCharacterMessage.targetId.");
        }
        this.cellId = buffer.readShort();
        if (this.cellId < -1 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of GameActionFightThrowCharacterMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightTriggerEffectMessage extends GameActionFightDispellEffectMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2, param3, param4);
        this.messageId = 6147;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameActionFightTriggerGlyphTrapMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3, param4, param5) {
        super(param1, param2);
        this.markId = param3;
        this.triggeringCharacterId = param4;
        this.triggeredSpellId = param5;
        this.messageId = 5741;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.markId);
        if (this.triggeringCharacterId < -9007199254740990 || this.triggeringCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.triggeringCharacterId + ") on element triggeringCharacterId.");
        }
        this.buffer.writeDouble(this.triggeringCharacterId);
        if (this.triggeredSpellId < 0) {
            Logger.error("Forbidden value (" + this.triggeredSpellId + ") on element triggeredSpellId.");
        }
        this.buffer.writeVarShort(this.triggeredSpellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.markId = buffer.readShort();
        this.triggeringCharacterId = buffer.readDouble();
        if (this.triggeringCharacterId < -9007199254740990 || this.triggeringCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.triggeringCharacterId + ") on element of GameActionFightTriggerGlyphTrapMessage.triggeringCharacterId.");
        }
        this.triggeredSpellId = buffer.readVarUhShort();
        if (this.triggeredSpellId < 0) {
            Logger.error("Forbidden value (" + this.triggeredSpellId + ") on element of GameActionFightTriggerGlyphTrapMessage.triggeredSpellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameActionFightUnmarkCellsMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.markId = param3;
        this.messageId = 5570;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.markId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.markId = buffer.readShort();
    }
}

// Generated by Noxus messages 
export class GameActionFightVanishMessage extends AbstractGameActionMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.targetId = param3;
        this.messageId = 6217;
    }
    serialize() {
        super.serialize();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameActionFightVanishMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class SequenceEndMessage extends ProtocolMessage {
    constructor(actionId, authorId, sequenceType) {
        super(956);
        this.actionId = actionId;
        this.authorId = authorId;
        this.sequenceType = sequenceType;
    }
    serialize() {
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        this.buffer.writeVarShort(this.actionId);
        if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.authorId + ") on element authorId.");
        }
        this.buffer.writeDouble(this.authorId);
        this.buffer.writeByte(this.sequenceType);
    }
    deserialize(buffer) {
        this.actionId = buffer.readVarUhShort();
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element of SequenceEndMessage.actionId.");
        }
        this.authorId = buffer.readDouble();
        if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.authorId + ") on element of SequenceEndMessage.authorId.");
        }
        this.sequenceType = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class SequenceStartMessage extends ProtocolMessage {
    constructor(sequenceType, authorId) {
        super(955);
        this.sequenceType = sequenceType;
        this.authorId = authorId;
    }
    serialize() {
        this.buffer.writeByte(this.sequenceType);
        if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.authorId + ") on element authorId.");
        }
        this.buffer.writeDouble(this.authorId);
    }
    deserialize(buffer) {
        this.sequenceType = buffer.readByte();
        this.authorId = buffer.readDouble();
        if (this.authorId < -9007199254740990 || this.authorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.authorId + ") on element of SequenceStartMessage.authorId.");
        }
    }
}

// Generated by Noxus messages 
export class AllianceBulletinMessage extends BulletinMessage {
    constructor(param1, param2, param3, param4, param5) {
        super(param1, param2, param3, param4, param5);
        this.messageId = 6690;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AllianceBulletinSetErrorMessage extends SocialNoticeSetErrorMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6692;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AllianceBulletinSetRequestMessage extends SocialNoticeSetRequestMessage {
    constructor(param1, param2) {
        this.content = param1;
        this.notifyMembers = param2;
        this.messageId = 6693;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.content);
        this.buffer.writeBoolean(this.notifyMembers);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.content = buffer.readUTF();
        this.notifyMembers = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class AllianceChangeGuildRightsMessage extends ProtocolMessage {
    constructor(guildId, rights) {
        super(6426);
        this.guildId = guildId;
        this.rights = rights;
    }
    serialize() {
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
        if (this.rights < 0) {
            Logger.error("Forbidden value (" + this.rights + ") on element rights.");
        }
        this.buffer.writeByte(this.rights);
    }
    deserialize(buffer) {
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element of AllianceChangeGuildRightsMessage.guildId.");
        }
        this.rights = buffer.readByte();
        if (this.rights < 0) {
            Logger.error("Forbidden value (" + this.rights + ") on element of AllianceChangeGuildRightsMessage.rights.");
        }
    }
}

// Generated by Noxus messages 
export class AllianceCreationResultMessage extends ProtocolMessage {
    constructor(result) {
        super(6391);
        this.result = result;
    }
    serialize() {
        this.buffer.writeByte(this.result);
    }
    deserialize(buffer) {
        this.result = buffer.readByte();
        if (this.result < 0) {
            Logger.error("Forbidden value (" + this.result + ") on element of AllianceCreationResultMessage.result.");
        }
    }
}

// Generated by Noxus messages 
export class AllianceCreationStartedMessage extends ProtocolMessage {
constructor) {
    super(6394);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class AllianceCreationValidMessage extends ProtocolMessage {
    constructor(allianceName, allianceTag, allianceEmblem) {
        super(6393);
        this.allianceName = allianceName;
        this.allianceTag = allianceTag;
        this.allianceEmblem = allianceEmblem;
    }
    serialize() {
        this.buffer.writeUTF(this.allianceName);
        this.buffer.writeUTF(this.allianceTag);
        this.allianceEmblem.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.allianceName = buffer.readUTF();
        this.allianceTag = buffer.readUTF();
        this.allianceEmblem = new GuildEmblem();
        this.allianceEmblem.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AllianceFactsErrorMessage extends ProtocolMessage {
    constructor(allianceId) {
        super(6423);
        this.allianceId = allianceId;
    }
    serialize() {
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        this.buffer.writeVarInt(this.allianceId);
    }
    deserialize(buffer) {
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element of AllianceFactsErrorMessage.allianceId.");
        }
    }
}

// Generated by Noxus messages 
export class AllianceFactsMessage extends ProtocolMessage {
    constructor(infos, guilds, controlledSubareaIds, leaderCharacterId, leaderCharacterName) {
        super(6414);
        this.infos = infos;
        this.guilds = guilds;
        this.controlledSubareaIds = controlledSubareaIds;
        this.leaderCharacterId = leaderCharacterId;
        this.leaderCharacterName = leaderCharacterName;
    }
    serialize() {
        this.buffer.writeShort(this.infos.protocolId);
        this.infos.serialize(this.buffer);
        this.buffer.writeShort(this.guilds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.guilds.length) {
            this.guilds[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.controlledSubareaIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.controlledSubareaIds.length) {
            if (this.controlledSubareaIds[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.controlledSubareaIds[_loc3_] + ") on element 3 (starting at 1) of controlledSubareaIds.");
            }
            this.buffer.writeVarShort(this.controlledSubareaIds[_loc3_]);
            _loc3_++;
        }
        if (this.leaderCharacterId < 0 || this.leaderCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leaderCharacterId + ") on element leaderCharacterId.");
        }
        this.buffer.writeVarLong(this.leaderCharacterId);
        this.buffer.writeUTF(this.leaderCharacterName);
    }
    deserialize(buffer) {
        var _loc7_ = null;
        var _loc8_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        this.infos = ProtocolTypeManager.getInstance(AllianceFactSheetInformations, _loc2_);
        this.infos.deserialize(buffer);
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc7_ = new GuildInAllianceInformations();
            _loc7_.deserialize(buffer);
            this.guilds.push(_loc7_);
            _loc4_++;
        }
        var _loc5_ = buffer.readUnsignedShort();
        var _loc6_ = 0;
        while (_loc6_ < _loc5_) {
            _loc8_ = buffer.readVarUhShort();
            if (_loc8_ < 0) {
                Logger.error("Forbidden value (" + _loc8_ + ") on elements of controlledSubareaIds.");
            }
            this.controlledSubareaIds.push(_loc8_);
            _loc6_++;
        }
        this.leaderCharacterId = buffer.readVarUhLong();
        if (this.leaderCharacterId < 0 || this.leaderCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leaderCharacterId + ") on element of AllianceFactsMessage.leaderCharacterId.");
        }
        this.leaderCharacterName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class AllianceFactsRequestMessage extends ProtocolMessage {
    constructor(allianceId) {
        super(6409);
        this.allianceId = allianceId;
    }
    serialize() {
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element allianceId.");
        }
        this.buffer.writeVarInt(this.allianceId);
    }
    deserialize(buffer) {
        this.allianceId = buffer.readVarUhInt();
        if (this.allianceId < 0) {
            Logger.error("Forbidden value (" + this.allianceId + ") on element of AllianceFactsRequestMessage.allianceId.");
        }
    }
}

// Generated by Noxus messages 
export class AllianceGuildLeavingMessage extends ProtocolMessage {
    constructor(kicked, guildId) {
        super(6399);
        this.kicked = kicked;
        this.guildId = guildId;
    }
    serialize() {
        this.buffer.writeBoolean(this.kicked);
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
    }
    deserialize(buffer) {
        this.kicked = buffer.readBoolean();
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element of AllianceGuildLeavingMessage.guildId.");
        }
    }
}

// Generated by Noxus messages 
export class AllianceInsiderInfoMessage extends ProtocolMessage {
    constructor(allianceInfos, guilds, prisms) {
        super(6403);
        this.allianceInfos = allianceInfos;
        this.guilds = guilds;
        this.prisms = prisms;
    }
    serialize() {
        this.allianceInfos.serialize(this.buffer);
        this.buffer.writeShort(this.guilds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.guilds.length) {
            this.guilds[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.prisms.length);
        var _loc3_ = 0;
        while (_loc3_ < this.prisms.length) {
            this.buffer.writeShort((this.prisms[_loc3_]).protocolId);
            this.prisms[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = 0;
        var _loc8_ = null;
        this.allianceInfos = new AllianceFactSheetInformations();
        this.allianceInfos.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new GuildInsiderFactSheetInformations();
            _loc6_.deserialize(buffer);
            this.guilds.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readUnsignedShort();
            _loc8_ = ProtocolTypeManager.getInstance(PrismSubareaEmptyInfo, _loc7_);
            _loc8_.deserialize(buffer);
            this.prisms.push(_loc8_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class AllianceInsiderInfoRequestMessage extends ProtocolMessage {
constructor) {
    super(6417);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class AllianceInvitationAnswerMessage extends ProtocolMessage {
    constructor(accept) {
        super(6401);
        this.accept = accept;
    }
    serialize() {
        this.buffer.writeBoolean(this.accept);
    }
    deserialize(buffer) {
        this.accept = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class AllianceInvitationMessage extends ProtocolMessage {
    constructor(targetId) {
        super(6395);
        this.targetId = targetId;
    }
    serialize() {
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
    }
    deserialize(buffer) {
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of AllianceInvitationMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class AllianceInvitationStateRecrutedMessage extends ProtocolMessage {
    constructor(invitationState) {
        super(6392);
        this.invitationState = invitationState;
    }
    serialize() {
        this.buffer.writeByte(this.invitationState);
    }
    deserialize(buffer) {
        this.invitationState = buffer.readByte();
        if (this.invitationState < 0) {
            Logger.error("Forbidden value (" + this.invitationState + ") on element of AllianceInvitationStateRecrutedMessage.invitationState.");
        }
    }
}

// Generated by Noxus messages 
export class AllianceInvitationStateRecruterMessage extends ProtocolMessage {
    constructor(recrutedName, invitationState) {
        super(6396);
        this.recrutedName = recrutedName;
        this.invitationState = invitationState;
    }
    serialize() {
        this.buffer.writeUTF(this.recrutedName);
        this.buffer.writeByte(this.invitationState);
    }
    deserialize(buffer) {
        this.recrutedName = buffer.readUTF();
        this.invitationState = buffer.readByte();
        if (this.invitationState < 0) {
            Logger.error("Forbidden value (" + this.invitationState + ") on element of AllianceInvitationStateRecruterMessage.invitationState.");
        }
    }
}

// Generated by Noxus messages 
export class AllianceInvitedMessage extends ProtocolMessage {
    constructor(recruterId, recruterName, allianceInfo) {
        super(6397);
        this.recruterId = recruterId;
        this.recruterName = recruterName;
        this.allianceInfo = allianceInfo;
    }
    serialize() {
        if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.recruterId + ") on element recruterId.");
        }
        this.buffer.writeVarLong(this.recruterId);
        this.buffer.writeUTF(this.recruterName);
        this.allianceInfo.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.recruterId = buffer.readVarUhLong();
        if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.recruterId + ") on element of AllianceInvitedMessage.recruterId.");
        }
        this.recruterName = buffer.readUTF();
        this.allianceInfo = new BasicNamedAllianceInformations();
        this.allianceInfo.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AllianceJoinedMessage extends ProtocolMessage {
    constructor(allianceInfo, enabled) {
        super(6402);
        this.allianceInfo = allianceInfo;
        this.enabled = enabled;
    }
    serialize() {
        this.allianceInfo.serialize(this.buffer);
        this.buffer.writeBoolean(this.enabled);
    }
    deserialize(buffer) {
        this.allianceInfo = new AllianceInformations();
        this.allianceInfo.deserialize(buffer);
        this.enabled = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class AllianceKickRequestMessage extends ProtocolMessage {
    constructor(kickedId) {
        super(6400);
        this.kickedId = kickedId;
    }
    serialize() {
        if (this.kickedId < 0) {
            Logger.error("Forbidden value (" + this.kickedId + ") on element kickedId.");
        }
        this.buffer.writeVarInt(this.kickedId);
    }
    deserialize(buffer) {
        this.kickedId = buffer.readVarUhInt();
        if (this.kickedId < 0) {
            Logger.error("Forbidden value (" + this.kickedId + ") on element of AllianceKickRequestMessage.kickedId.");
        }
    }
}

// Generated by Noxus messages 
export class AllianceLeftMessage extends ProtocolMessage {
constructor) {
    super(6398);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class AllianceListMessage extends ProtocolMessage {
    constructor(alliances) {
        super(6408);
        this.alliances = alliances;
    }
    serialize() {
        this.buffer.writeShort(this.alliances.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alliances.length) {
            this.alliances[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new AllianceFactSheetInformations();
            _loc4_.deserialize(buffer);
            this.alliances.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class AllianceMembershipMessage extends AllianceJoinedMessage {
    constructor(param1, param2) {
        super(param1, param2);
        this.messageId = 6390;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AllianceModificationEmblemValidMessage extends ProtocolMessage {
    constructor(Alliancemblem) {
        super(6447);
        this.Alliancemblem = Alliancemblem;
    }
    serialize() {
        this.Alliancemblem.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.Alliancemblem = new GuildEmblem();
        this.Alliancemblem.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AllianceModificationNameAndTagValidMessage extends ProtocolMessage {
    constructor(allianceName, allianceTag) {
        super(6449);
        this.allianceName = allianceName;
        this.allianceTag = allianceTag;
    }
    serialize() {
        this.buffer.writeUTF(this.allianceName);
        this.buffer.writeUTF(this.allianceTag);
    }
    deserialize(buffer) {
        this.allianceName = buffer.readUTF();
        this.allianceTag = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class AllianceModificationStartedMessage extends ProtocolMessage {
    constructor(canChangeName, canChangeTag, canChangeEmblem) {
        super(6444);
        this.canChangeName = canChangeName;
        this.canChangeTag = canChangeTag;
        this.canChangeEmblem = canChangeEmblem;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.canChangeName);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.canChangeTag);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 2, this.canChangeEmblem);
        this.buffer.writeByte(_loc2_);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.canChangeName = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.canChangeTag = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.canChangeEmblem = IO.BooleanByteWrapper.getFlag(_loc2_, 2);
    }
}

// Generated by Noxus messages 
export class AllianceModificationValidMessage extends ProtocolMessage {
    constructor(allianceName, allianceTag, Alliancemblem) {
        super(6450);
        this.allianceName = allianceName;
        this.allianceTag = allianceTag;
        this.Alliancemblem = Alliancemblem;
    }
    serialize() {
        this.buffer.writeUTF(this.allianceName);
        this.buffer.writeUTF(this.allianceTag);
        this.Alliancemblem.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.allianceName = buffer.readUTF();
        this.allianceTag = buffer.readUTF();
        this.Alliancemblem = new GuildEmblem();
        this.Alliancemblem.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AllianceMotdMessage extends SocialNoticeMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2, param3, param4);
        this.messageId = 6685;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AllianceMotdSetErrorMessage extends SocialNoticeSetErrorMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6683;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AllianceMotdSetRequestMessage extends SocialNoticeSetRequestMessage {
    constructor(param1) {
        this.content = param1;
        this.messageId = 6687;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.content);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.content = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class AlliancePartialListMessage extends AllianceListMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6427;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AllianceVersatileInfoListMessage extends ProtocolMessage {
    constructor(alliances) {
        super(6436);
        this.alliances = alliances;
    }
    serialize() {
        this.buffer.writeShort(this.alliances.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alliances.length) {
            this.alliances[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new AllianceVersatileInformations();
            _loc4_.deserialize(buffer);
            this.alliances.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class KohUpdateMessage extends ProtocolMessage {
    constructor(alliances, allianceNbMembers, allianceRoundWeigth, allianceMatchScore, allianceMapWinner, allianceMapWinnerScore, allianceMapMyAllianceScore, nextTickTime) {
        super(6439);
        this.alliances = alliances;
        this.allianceNbMembers = allianceNbMembers;
        this.allianceRoundWeigth = allianceRoundWeigth;
        this.allianceMatchScore = allianceMatchScore;
        this.allianceMapWinner = allianceMapWinner;
        this.allianceMapWinnerScore = allianceMapWinnerScore;
        this.allianceMapMyAllianceScore = allianceMapMyAllianceScore;
        this.nextTickTime = nextTickTime;
    }
    serialize() {
        this.buffer.writeShort(this.alliances.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alliances.length) {
            this.alliances[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.allianceNbMembers.length);
        var _loc3_ = 0;
        while (_loc3_ < this.allianceNbMembers.length) {
            if (this.allianceNbMembers[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.allianceNbMembers[_loc3_] + ") on element 2 (starting at 1) of allianceNbMembers.");
            }
            this.buffer.writeVarShort(this.allianceNbMembers[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.allianceRoundWeigth.length);
        var _loc4_ = 0;
        while (_loc4_ < this.allianceRoundWeigth.length) {
            if (this.allianceRoundWeigth[_loc4_] < 0) {
                Logger.error("Forbidden value (" + this.allianceRoundWeigth[_loc4_] + ") on element 3 (starting at 1) of allianceRoundWeigth.");
            }
            this.buffer.writeVarInt(this.allianceRoundWeigth[_loc4_]);
            _loc4_++;
        }
        this.buffer.writeShort(this.allianceMatchScore.length);
        var _loc5_ = 0;
        while (_loc5_ < this.allianceMatchScore.length) {
            if (this.allianceMatchScore[_loc5_] < 0) {
                Logger.error("Forbidden value (" + this.allianceMatchScore[_loc5_] + ") on element 4 (starting at 1) of allianceMatchScore.");
            }
            this.buffer.writeByte(this.allianceMatchScore[_loc5_]);
            _loc5_++;
        }
        this.allianceMapWinner.serialize(this.buffer);
        if (this.allianceMapWinnerScore < 0) {
            Logger.error("Forbidden value (" + this.allianceMapWinnerScore + ") on element allianceMapWinnerScore.");
        }
        this.buffer.writeVarInt(this.allianceMapWinnerScore);
        if (this.allianceMapMyAllianceScore < 0) {
            Logger.error("Forbidden value (" + this.allianceMapMyAllianceScore + ") on element allianceMapMyAllianceScore.");
        }
        this.buffer.writeVarInt(this.allianceMapMyAllianceScore);
        if (this.nextTickTime < 0 || this.nextTickTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.nextTickTime + ") on element nextTickTime.");
        }
        this.buffer.writeDouble(this.nextTickTime);
    }
    deserialize(buffer) {
        var _loc10_ = null;
        var _loc11_ = 0;
        var _loc12_ = 0;
        var _loc13_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc10_ = new AllianceInformations();
            _loc10_.deserialize(buffer);
            this.alliances.push(_loc10_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc11_ = buffer.readVarUhShort();
            if (_loc11_ < 0) {
                Logger.error("Forbidden value (" + _loc11_ + ") on elements of allianceNbMembers.");
            }
            this.allianceNbMembers.push(_loc11_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc12_ = buffer.readVarUhInt();
            if (_loc12_ < 0) {
                Logger.error("Forbidden value (" + _loc12_ + ") on elements of allianceRoundWeigth.");
            }
            this.allianceRoundWeigth.push(_loc12_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc13_ = buffer.readByte();
            if (_loc13_ < 0) {
                Logger.error("Forbidden value (" + _loc13_ + ") on elements of allianceMatchScore.");
            }
            this.allianceMatchScore.push(_loc13_);
            _loc9_++;
        }
        this.allianceMapWinner = new BasicAllianceInformations();
        this.allianceMapWinner.deserialize(buffer);
        this.allianceMapWinnerScore = buffer.readVarUhInt();
        if (this.allianceMapWinnerScore < 0) {
            Logger.error("Forbidden value (" + this.allianceMapWinnerScore + ") on element of KohUpdateMessage.allianceMapWinnerScore.");
        }
        this.allianceMapMyAllianceScore = buffer.readVarUhInt();
        if (this.allianceMapMyAllianceScore < 0) {
            Logger.error("Forbidden value (" + this.allianceMapMyAllianceScore + ") on element of KohUpdateMessage.allianceMapMyAllianceScore.");
        }
        this.nextTickTime = buffer.readDouble();
        if (this.nextTickTime < 0 || this.nextTickTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.nextTickTime + ") on element of KohUpdateMessage.nextTickTime.");
        }
    }
}

// Generated by Noxus messages 
export class AlmanachCalendarDateMessage extends ProtocolMessage {
    constructor(date) {
        super(6341);
        this.date = date;
    }
    serialize() {
        this.buffer.writeInt(this.date);
    }
    deserialize(buffer) {
        this.date = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class AccountCapabilitiesMessage extends ProtocolMessage {
    constructor(accountId, tutorialAvailable, breedsVisible, breedsAvailable, status, canCreateNewCharacter) {
        super(6216);
        this.accountId = accountId;
        this.tutorialAvailable = tutorialAvailable;
        this.breedsVisible = breedsVisible;
        this.breedsAvailable = breedsAvailable;
        this.status = status;
        this.canCreateNewCharacter = canCreateNewCharacter;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.tutorialAvailable);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.canCreateNewCharacter);
        this.buffer.writeByte(_loc2_);
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        if (this.breedsVisible < 0) {
            Logger.error("Forbidden value (" + this.breedsVisible + ") on element breedsVisible.");
        }
        this.buffer.writeVarInt(this.breedsVisible);
        if (this.breedsAvailable < 0) {
            Logger.error("Forbidden value (" + this.breedsAvailable + ") on element breedsAvailable.");
        }
        this.buffer.writeVarInt(this.breedsAvailable);
        this.buffer.writeByte(this.status);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.tutorialAvailable = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.canCreateNewCharacter = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of AccountCapabilitiesMessage.accountId.");
        }
        this.breedsVisible = buffer.readVarUhInt();
        if (this.breedsVisible < 0) {
            Logger.error("Forbidden value (" + this.breedsVisible + ") on element of AccountCapabilitiesMessage.breedsVisible.");
        }
        this.breedsAvailable = buffer.readVarUhInt();
        if (this.breedsAvailable < 0) {
            Logger.error("Forbidden value (" + this.breedsAvailable + ") on element of AccountCapabilitiesMessage.breedsAvailable.");
        }
        this.status = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class AccountLoggingKickedMessage extends ProtocolMessage {
    constructor(days, hours, minutes) {
        super(6029);
        this.days = days;
        this.hours = hours;
        this.minutes = minutes;
    }
    serialize() {
        if (this.days < 0) {
            Logger.error("Forbidden value (" + this.days + ") on element days.");
        }
        this.buffer.writeVarShort(this.days);
        if (this.hours < 0) {
            Logger.error("Forbidden value (" + this.hours + ") on element hours.");
        }
        this.buffer.writeByte(this.hours);
        if (this.minutes < 0) {
            Logger.error("Forbidden value (" + this.minutes + ") on element minutes.");
        }
        this.buffer.writeByte(this.minutes);
    }
    deserialize(buffer) {
        this.days = buffer.readVarUhShort();
        if (this.days < 0) {
            Logger.error("Forbidden value (" + this.days + ") on element of AccountLoggingKickedMessage.days.");
        }
        this.hours = buffer.readByte();
        if (this.hours < 0) {
            Logger.error("Forbidden value (" + this.hours + ") on element of AccountLoggingKickedMessage.hours.");
        }
        this.minutes = buffer.readByte();
        if (this.minutes < 0) {
            Logger.error("Forbidden value (" + this.minutes + ") on element of AccountLoggingKickedMessage.minutes.");
        }
    }
}

// Generated by Noxus messages 
export class AlreadyConnectedMessage extends ProtocolMessage {
constructor) {
    super(109);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class AuthenticationTicketAcceptedMessage extends ProtocolMessage {
constructor) {
    super(111);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class AuthenticationTicketMessage extends ProtocolMessage {
    constructor(lang, ticket) {
        super(110);
        this.lang = lang;
        this.ticket = ticket;
    }
    serialize() {
        this.buffer.writeUTF(this.lang);
        this.buffer.writeUTF(this.ticket);
    }
    deserialize(buffer) {
        this.lang = buffer.readUTF();
        this.ticket = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class AuthenticationTicketRefusedMessage extends ProtocolMessage {
constructor) {
    super(112);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class HelloGameMessage extends ProtocolMessage {
constructor) {
    super(101);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ReloginTokenRequestMessage extends ProtocolMessage {
constructor) {
    super(6540);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ReloginTokenStatusMessage extends ProtocolMessage {
    constructor(validToken, ticket) {
        super(6539);
        this.validToken = validToken;
        this.ticket = ticket;
    }
    serialize() {
        this.buffer.writeBoolean(this.validToken);
        this.buffer.writeVarInt(this.ticket.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ticket.length) {
            this.buffer.writeByte(this.ticket[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.validToken = buffer.readBoolean();
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.ticket.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ServerOptionalFeaturesMessage extends ProtocolMessage {
    constructor(features) {
        super(6305);
        this.features = features;
    }
    serialize() {
        this.buffer.writeShort(this.features.length);
        var _loc2_ = 0;
        while (_loc2_ < this.features.length) {
            if (this.features[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.features[_loc2_] + ") on element 1 (starting at 1) of features.");
            }
            this.buffer.writeByte(this.features[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of features.");
            }
            this.features.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ServerSessionConstantsMessage extends ProtocolMessage {
    constructor(variables) {
        super(6434);
        this.variables = variables;
    }
    serialize() {
        this.buffer.writeShort(this.variables.length);
        var _loc2_ = 0;
        while (_loc2_ < this.variables.length) {
            this.buffer.writeShort((this.variables[_loc2_]).protocolId);
            this.variables[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(ServerSessionConstant, _loc4_);
            _loc5_.deserialize(buffer);
            this.variables.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ServerSettingsMessage extends ProtocolMessage {
    constructor(lang, community, gameType, arenaLeaveBanTime) {
        super(6340);
        this.lang = lang;
        this.community = community;
        this.gameType = gameType;
        this.arenaLeaveBanTime = arenaLeaveBanTime;
    }
    serialize() {
        this.buffer.writeUTF(this.lang);
        if (this.community < 0) {
            Logger.error("Forbidden value (" + this.community + ") on element community.");
        }
        this.buffer.writeByte(this.community);
        this.buffer.writeByte(this.gameType);
        if (this.arenaLeaveBanTime < 0) {
            Logger.error("Forbidden value (" + this.arenaLeaveBanTime + ") on element arenaLeaveBanTime.");
        }
        this.buffer.writeVarShort(this.arenaLeaveBanTime);
    }
    deserialize(buffer) {
        this.lang = buffer.readUTF();
        this.community = buffer.readByte();
        if (this.community < 0) {
            Logger.error("Forbidden value (" + this.community + ") on element of ServerSettingsMessage.community.");
        }
        this.gameType = buffer.readByte();
        this.arenaLeaveBanTime = buffer.readVarUhShort();
        if (this.arenaLeaveBanTime < 0) {
            Logger.error("Forbidden value (" + this.arenaLeaveBanTime + ") on element of ServerSettingsMessage.arenaLeaveBanTime.");
        }
    }
}

// Generated by Noxus messages 
export class AtlasPointInformationsMessage extends ProtocolMessage {
    constructor(type) {
        super(5956);
        this.type = type;
    }
    serialize() {
        this.type.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.type = new AtlasPointsInformations();
        this.type.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class CompassResetMessage extends ProtocolMessage {
    constructor(type) {
        super(5584);
        this.type = type;
    }
    serialize() {
        this.buffer.writeByte(this.type);
    }
    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of CompassResetMessage.type.");
        }
    }
}

// Generated by Noxus messages 
export class CompassUpdateMessage extends ProtocolMessage {
    constructor(type, coords) {
        super(5591);
        this.type = type;
        this.coords = coords;
    }
    serialize() {
        this.buffer.writeByte(this.type);
        this.buffer.writeShort(this.coords.protocolId);
        this.coords.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of CompassUpdateMessage.type.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.coords = ProtocolTypeManager.getInstance(MapCoordinates, _loc2_);
        this.coords.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class CompassUpdatePartyMemberMessage extends CompassUpdateMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.memberId = param3;
        this.active = param4;
        this.messageId = 5589;
    }
    serialize() {
        super.serialize();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        this.buffer.writeBoolean(this.active);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element of CompassUpdatePartyMemberMessage.memberId.");
        }
        this.active = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class CompassUpdatePvpSeekMessage extends CompassUpdateMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.memberId = param3;
        this.memberName = param4;
        this.messageId = 6013;
    }
    serialize() {
        super.serialize();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        this.buffer.writeUTF(this.memberName);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element of CompassUpdatePvpSeekMessage.memberId.");
        }
        this.memberName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class BasicAckMessage extends ProtocolMessage {
    constructor(seq, lastPacketId) {
        super(6362);
        this.seq = seq;
        this.lastPacketId = lastPacketId;
    }
    serialize() {
        if (this.seq < 0) {
            Logger.error("Forbidden value (" + this.seq + ") on element seq.");
        }
        this.buffer.writeVarInt(this.seq);
        if (this.lastPacketId < 0) {
            Logger.error("Forbidden value (" + this.lastPacketId + ") on element lastPacketId.");
        }
        this.buffer.writeVarShort(this.lastPacketId);
    }
    deserialize(buffer) {
        this.seq = buffer.readVarUhInt();
        if (this.seq < 0) {
            Logger.error("Forbidden value (" + this.seq + ") on element of BasicAckMessage.seq.");
        }
        this.lastPacketId = buffer.readVarUhShort();
        if (this.lastPacketId < 0) {
            Logger.error("Forbidden value (" + this.lastPacketId + ") on element of BasicAckMessage.lastPacketId.");
        }
    }
}

// Generated by Noxus messages 
export class BasicDateMessage extends ProtocolMessage {
    constructor(day, month, year) {
        super(177);
        this.day = day;
        this.month = month;
        this.year = year;
    }
    serialize() {
        if (this.day < 0) {
            Logger.error("Forbidden value (" + this.day + ") on element day.");
        }
        this.buffer.writeByte(this.day);
        if (this.month < 0) {
            Logger.error("Forbidden value (" + this.month + ") on element month.");
        }
        this.buffer.writeByte(this.month);
        if (this.year < 0) {
            Logger.error("Forbidden value (" + this.year + ") on element year.");
        }
        this.buffer.writeShort(this.year);
    }
    deserialize(buffer) {
        this.day = buffer.readByte();
        if (this.day < 0) {
            Logger.error("Forbidden value (" + this.day + ") on element of BasicDateMessage.day.");
        }
        this.month = buffer.readByte();
        if (this.month < 0) {
            Logger.error("Forbidden value (" + this.month + ") on element of BasicDateMessage.month.");
        }
        this.year = buffer.readShort();
        if (this.year < 0) {
            Logger.error("Forbidden value (" + this.year + ") on element of BasicDateMessage.year.");
        }
    }
}

// Generated by Noxus messages 
export class BasicLatencyStatsMessage extends ProtocolMessage {
    constructor(latency, sampleCount, max) {
        super(5663);
        this.latency = latency;
        this.sampleCount = sampleCount;
        this.max = max;
    }
    serialize() {
        if (this.latency < 0 || this.latency > 65535) {
            Logger.error("Forbidden value (" + this.latency + ") on element latency.");
        }
        this.buffer.writeShort(this.latency);
        if (this.sampleCount < 0) {
            Logger.error("Forbidden value (" + this.sampleCount + ") on element sampleCount.");
        }
        this.buffer.writeVarShort(this.sampleCount);
        if (this.max < 0) {
            Logger.error("Forbidden value (" + this.max + ") on element max.");
        }
        this.buffer.writeVarShort(this.max);
    }
    deserialize(buffer) {
        this.latency = buffer.readUnsignedShort();
        if (this.latency < 0 || this.latency > 65535) {
            Logger.error("Forbidden value (" + this.latency + ") on element of BasicLatencyStatsMessage.latency.");
        }
        this.sampleCount = buffer.readVarUhShort();
        if (this.sampleCount < 0) {
            Logger.error("Forbidden value (" + this.sampleCount + ") on element of BasicLatencyStatsMessage.sampleCount.");
        }
        this.max = buffer.readVarUhShort();
        if (this.max < 0) {
            Logger.error("Forbidden value (" + this.max + ") on element of BasicLatencyStatsMessage.max.");
        }
    }
}

// Generated by Noxus messages 
export class BasicLatencyStatsRequestMessage extends ProtocolMessage {
constructor) {
    super(5816);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class BasicNoOperationMessage extends ProtocolMessage {
constructor) {
    super(176);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class BasicTimeMessage extends ProtocolMessage {
    constructor(timestamp, timezoneOffset) {
        super(175);
        this.timestamp = timestamp;
        this.timezoneOffset = timezoneOffset;
    }
    serialize() {
        if (this.timestamp < 0 || this.timestamp > 9007199254740990) {
            Logger.error("Forbidden value (" + this.timestamp + ") on element timestamp.");
        }
        this.buffer.writeDouble(this.timestamp);
        this.buffer.writeShort(this.timezoneOffset);
    }
    deserialize(buffer) {
        this.timestamp = buffer.readDouble();
        if (this.timestamp < 0 || this.timestamp > 9007199254740990) {
            Logger.error("Forbidden value (" + this.timestamp + ") on element of BasicTimeMessage.timestamp.");
        }
        this.timezoneOffset = buffer.readShort();
    }
}

// Generated by Noxus messages 
export class BasicWhoAmIRequestMessage extends ProtocolMessage {
    constructor(verbose) {
        super(5664);
        this.verbose = verbose;
    }
    serialize() {
        this.buffer.writeBoolean(this.verbose);
    }
    deserialize(buffer) {
        this.verbose = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class BasicWhoIsMessage extends ProtocolMessage {
    constructor(self, position, accountNickname, accountId, playerName, playerId, areaId, serverId, originServerId, socialGroups, verbose, playerState) {
        super(180);
        this.self = self;
        this.position = position;
        this.accountNickname = accountNickname;
        this.accountId = accountId;
        this.playerName = playerName;
        this.playerId = playerId;
        this.areaId = areaId;
        this.serverId = serverId;
        this.originServerId = originServerId;
        this.socialGroups = socialGroups;
        this.verbose = verbose;
        this.playerState = playerState;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.self);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.verbose);
        this.buffer.writeByte(_loc2_);
        this.buffer.writeByte(this.position);
        this.buffer.writeUTF(this.accountNickname);
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        this.buffer.writeUTF(this.playerName);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeShort(this.areaId);
        this.buffer.writeShort(this.serverId);
        this.buffer.writeShort(this.originServerId);
        this.buffer.writeShort(this.socialGroups.length);
        var _loc3_ = 0;
        while (_loc3_ < this.socialGroups.length) {
            this.buffer.writeShort((this.socialGroups[_loc3_]).protocolId);
            this.socialGroups[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
        this.buffer.writeByte(this.playerState);
    }
    deserialize(buffer) {
        var _loc5_ = 0;
        var _loc6_ = null;
        var _loc2_ = buffer.readByte();
        this.self = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.verbose = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.position = buffer.readByte();
        this.accountNickname = buffer.readUTF();
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of BasicWhoIsMessage.accountId.");
        }
        this.playerName = buffer.readUTF();
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of BasicWhoIsMessage.playerId.");
        }
        this.areaId = buffer.readShort();
        this.serverId = buffer.readShort();
        this.originServerId = buffer.readShort();
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc5_ = buffer.readUnsignedShort();
            _loc6_ = ProtocolTypeManager.getInstance(AbstractSocialGroupInfos, _loc5_);
            _loc6_.deserialize(buffer);
            this.socialGroups.push(_loc6_);
            _loc4_++;
        }
        this.playerState = buffer.readByte();
        if (this.playerState < 0) {
            Logger.error("Forbidden value (" + this.playerState + ") on element of BasicWhoIsMessage.playerState.");
        }
    }
}

// Generated by Noxus messages 
export class BasicWhoIsNoMatchMessage extends ProtocolMessage {
    constructor(search) {
        super(179);
        this.search = search;
    }
    serialize() {
        this.buffer.writeUTF(this.search);
    }
    deserialize(buffer) {
        this.search = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class BasicWhoIsRequestMessage extends ProtocolMessage {
    constructor(verbose, search) {
        super(181);
        this.verbose = verbose;
        this.search = search;
    }
    serialize() {
        this.buffer.writeBoolean(this.verbose);
        this.buffer.writeUTF(this.search);
    }
    deserialize(buffer) {
        this.verbose = buffer.readBoolean();
        this.search = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class CurrentServerStatusUpdateMessage extends ProtocolMessage {
    constructor(status) {
        super(6525);
        this.status = status;
    }
    serialize() {
        this.buffer.writeByte(this.status);
    }
    deserialize(buffer) {
        this.status = buffer.readByte();
        if (this.status < 0) {
            Logger.error("Forbidden value (" + this.status + ") on element of CurrentServerStatusUpdateMessage.status.");
        }
    }
}

// Generated by Noxus messages 
export class NumericWhoIsMessage extends ProtocolMessage {
    constructor(playerId, accountId) {
        super(6297);
        this.playerId = playerId;
        this.accountId = accountId;
    }
    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
    }
    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of NumericWhoIsMessage.playerId.");
        }
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of NumericWhoIsMessage.accountId.");
        }
    }
}

// Generated by Noxus messages 
export class NumericWhoIsRequestMessage extends ProtocolMessage {
    constructor(playerId) {
        super(6298);
        this.playerId = playerId;
    }
    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of NumericWhoIsRequestMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class SequenceNumberMessage extends ProtocolMessage {
    constructor(number) {
        super(6317);
        this.number = number;
    }
    serialize() {
        if (this.number < 0 || this.number > 65535) {
            Logger.error("Forbidden value (" + this.number + ") on element number.");
        }
        this.buffer.writeShort(this.number);
    }
    deserialize(buffer) {
        this.number = buffer.readUnsignedShort();
        if (this.number < 0 || this.number > 65535) {
            Logger.error("Forbidden value (" + this.number + ") on element of SequenceNumberMessage.number.");
        }
    }
}

// Generated by Noxus messages 
export class SequenceNumberRequestMessage extends ProtocolMessage {
constructor) {
    super(6316);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class TextInformationMessage extends ProtocolMessage {
    constructor(msgType, msgId, parameters) {
        super(780);
        this.msgType = msgType;
        this.msgId = msgId;
        this.parameters = parameters;
    }
    serialize() {
        this.buffer.writeByte(this.msgType);
        if (this.msgId < 0) {
            Logger.error("Forbidden value (" + this.msgId + ") on element msgId.");
        }
        this.buffer.writeVarShort(this.msgId);
        this.buffer.writeShort(this.parameters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parameters.length) {
            this.buffer.writeUTF(this.parameters[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.msgType = buffer.readByte();
        if (this.msgType < 0) {
            Logger.error("Forbidden value (" + this.msgType + ") on element of TextInformationMessage.msgType.");
        }
        this.msgId = buffer.readVarUhShort();
        if (this.msgId < 0) {
            Logger.error("Forbidden value (" + this.msgId + ") on element of TextInformationMessage.msgId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.parameters.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class BasicCharactersListMessage extends ProtocolMessage {
    constructor(characters) {
        super(6475);
        this.characters = characters;
    }
    serialize() {
        this.buffer.writeShort(this.characters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.characters.length) {
            this.buffer.writeShort((this.characters[_loc2_]).protocolId);
            this.characters[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(CharacterBaseInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.characters.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class CharacterFirstSelectionMessage extends CharacterSelectionMessage {
    constructor(param1, param2) {
        super(param1);
        this.doTutorial = param2;
        this.messageId = 6084;
    }
    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.doTutorial);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.doTutorial = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class CharacterReplayWithRemodelRequestMessage extends CharacterReplayRequestMessage {
    constructor(param1, param2) {
        super(param1);
        this.remodel = param2;
        this.messageId = 6551;
    }
    serialize() {
        super.serialize();
        this.remodel.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.remodel = new RemodelingInformation();
        this.remodel.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class CharacterSelectedErrorMessage extends ProtocolMessage {
constructor) {
    super(5836);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class CharacterSelectedForceMessage extends ProtocolMessage {
    constructor(id) {
        super(6068);
        this.id = id;
    }
    serialize() {
        if (this.id < 1 || this.id > 2147483647) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeInt(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readInt();
        if (this.id < 1 || this.id > 2147483647) {
            Logger.error("Forbidden value (" + this.id + ") on element of CharacterSelectedForceMessage.id.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterSelectedForceReadyMessage extends ProtocolMessage {
constructor) {
    super(6072);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class CharacterSelectedSuccessMessage extends ProtocolMessage {
    constructor(infos, isCollectingStats) {
        super(153);
        this.infos = infos;
        this.isCollectingStats = isCollectingStats;
    }
    serialize() {
        this.infos.serialize(this.buffer);
        this.buffer.writeBoolean(this.isCollectingStats);
    }
    deserialize(buffer) {
        this.infos = new CharacterBaseInformations();
        this.infos.deserialize(buffer);
        this.isCollectingStats = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class CharacterSelectionMessage extends ProtocolMessage {
    constructor(id) {
        super(152);
        this.id = id;
    }
    serialize() {
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarLong(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of CharacterSelectionMessage.id.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterSelectionWithRemodelMessage extends CharacterSelectionMessage {
    constructor(param1, param2) {
        super(param1);
        this.remodel = param2;
        this.messageId = 6549;
    }
    serialize() {
        super.serialize();
        this.remodel.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.remodel = new RemodelingInformation();
        this.remodel.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class CharactersListErrorMessage extends ProtocolMessage {
constructor) {
    super(5545);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class CharactersListMessage extends BasicCharactersListMessage {
    constructor(param1, param2) {
        super(param1);
        this.hasStartupActions = param2;
        this.messageId = 151;
    }
    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.hasStartupActions);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.hasStartupActions = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class CharactersListRequestMessage extends ProtocolMessage {
constructor) {
    super(150);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class CharactersListWithModificationsMessage extends CharactersListMessage {
    constructor(param1, param2, param3, param4, param5, param6) {
        super(param1, param2);
        this.charactersToRecolor = param3;
        this.charactersToRename = param4;
        this.unusableCharacters = param5;
        this.charactersToRelook = param6;
        this.messageId = 6120;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.charactersToRecolor.length);
        var _loc2_ = 0;
        while (_loc2_ < this.charactersToRecolor.length) {
            this.charactersToRecolor[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.charactersToRename.length);
        var _loc3_ = 0;
        while (_loc3_ < this.charactersToRename.length) {
            this.buffer.writeInt(this.charactersToRename[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.unusableCharacters.length);
        var _loc4_ = 0;
        while (_loc4_ < this.unusableCharacters.length) {
            this.buffer.writeInt(this.unusableCharacters[_loc4_]);
            _loc4_++;
        }
        this.buffer.writeShort(this.charactersToRelook.length);
        var _loc5_ = 0;
        while (_loc5_ < this.charactersToRelook.length) {
            this.charactersToRelook[_loc5_].serialize(this.buffer);
            _loc5_++;
        }
    }
    deserialize(buffer) {
        var _loc10_ = null;
        var _loc11_ = 0;
        var _loc12_ = 0;
        var _loc13_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc10_ = new CharacterToRecolorInformation();
            _loc10_.deserialize(buffer);
            this.charactersToRecolor.push(_loc10_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc11_ = buffer.readInt();
            this.charactersToRename.push(_loc11_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc12_ = buffer.readInt();
            this.unusableCharacters.push(_loc12_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc13_ = new CharacterToRelookInformation();
            _loc13_.deserialize(buffer);
            this.charactersToRelook.push(_loc13_);
            _loc9_++;
        }
    }
}

// Generated by Noxus messages 
export class CharactersListWithRemodelingMessage extends CharactersListMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.charactersToRemodel = param3;
        this.messageId = 6550;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.charactersToRemodel.length);
        var _loc2_ = 0;
        while (_loc2_ < this.charactersToRemodel.length) {
            this.charactersToRemodel[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new CharacterToRemodelInformations();
            _loc4_.deserialize(buffer);
            this.charactersToRemodel.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class CharacterCreationRequestMessage extends ProtocolMessage {
    constructor(name, breed, sex, colors, cosmeticId) {
        super(160);
        this.name = name;
        this.breed = breed;
        this.sex = sex;
        this.colors = colors;
        this.cosmeticId = cosmeticId;
    }
    serialize() {
        this.buffer.writeUTF(this.name);
        this.buffer.writeByte(this.breed);
        this.buffer.writeBoolean(this.sex);
        var _loc2_ = 0;
        while (_loc2_ < 5) {
            this.buffer.writeInt(this.colors[_loc2_]);
            _loc2_++;
        }
        if (this.cosmeticId < 0) {
            Logger.error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
        }
        this.buffer.writeVarShort(this.cosmeticId);
    }
    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.breed = buffer.readByte();
        if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Huppermage) {
            Logger.error("Forbidden value (" + this.breed + ") on element of CharacterCreationRequestMessage.breed.");
        }
        this.sex = buffer.readBoolean();
        var _loc2_ = 0;
        while (_loc2_ < 5) {
            this.colors[_loc2_] = buffer.readInt();
            _loc2_++;
        }
        this.cosmeticId = buffer.readVarUhShort();
        if (this.cosmeticId < 0) {
            Logger.error("Forbidden value (" + this.cosmeticId + ") on element of CharacterCreationRequestMessage.cosmeticId.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterCreationResultMessage extends ProtocolMessage {
    constructor(result) {
        super(161);
        this.result = result;
    }
    serialize() {
        this.buffer.writeByte(this.result);
    }
    deserialize(buffer) {
        this.result = buffer.readByte();
        if (this.result < 0) {
            Logger.error("Forbidden value (" + this.result + ") on element of CharacterCreationResultMessage.result.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterNameSuggestionFailureMessage extends ProtocolMessage {
    constructor(reason) {
        super(164);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of CharacterNameSuggestionFailureMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterNameSuggestionRequestMessage extends ProtocolMessage {
constructor) {
    super(162);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class CharacterNameSuggestionSuccessMessage extends ProtocolMessage {
    constructor(suggestion) {
        super(5544);
        this.suggestion = suggestion;
    }
    serialize() {
        this.buffer.writeUTF(this.suggestion);
    }
    deserialize(buffer) {
        this.suggestion = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class CharacterDeletionErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(166);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of CharacterDeletionErrorMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterDeletionRequestMessage extends ProtocolMessage {
    constructor(characterId, secretAnswerHash) {
        super(165);
        this.characterId = characterId;
        this.secretAnswerHash = secretAnswerHash;
    }
    serialize() {
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
        this.buffer.writeUTF(this.secretAnswerHash);
    }
    deserialize(buffer) {
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element of CharacterDeletionRequestMessage.characterId.");
        }
        this.secretAnswerHash = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class CharacterReplayRequestMessage extends ProtocolMessage {
    constructor(characterId) {
        super(167);
        this.characterId = characterId;
    }
    serialize() {
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
    }
    deserialize(buffer) {
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element of CharacterReplayRequestMessage.characterId.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterExperienceGainMessage extends ProtocolMessage {
    constructor(experienceCharacter, experienceMount, experienceGuild, experienceIncarnation) {
        super(6321);
        this.experienceCharacter = experienceCharacter;
        this.experienceMount = experienceMount;
        this.experienceGuild = experienceGuild;
        this.experienceIncarnation = experienceIncarnation;
    }
    serialize() {
        if (this.experienceCharacter < 0 || this.experienceCharacter > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceCharacter + ") on element experienceCharacter.");
        }
        this.buffer.writeVarLong(this.experienceCharacter);
        if (this.experienceMount < 0 || this.experienceMount > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceMount + ") on element experienceMount.");
        }
        this.buffer.writeVarLong(this.experienceMount);
        if (this.experienceGuild < 0 || this.experienceGuild > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceGuild + ") on element experienceGuild.");
        }
        this.buffer.writeVarLong(this.experienceGuild);
        if (this.experienceIncarnation < 0 || this.experienceIncarnation > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceIncarnation + ") on element experienceIncarnation.");
        }
        this.buffer.writeVarLong(this.experienceIncarnation);
    }
    deserialize(buffer) {
        this.experienceCharacter = buffer.readVarUhLong();
        if (this.experienceCharacter < 0 || this.experienceCharacter > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceCharacter + ") on element of CharacterExperienceGainMessage.experienceCharacter.");
        }
        this.experienceMount = buffer.readVarUhLong();
        if (this.experienceMount < 0 || this.experienceMount > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceMount + ") on element of CharacterExperienceGainMessage.experienceMount.");
        }
        this.experienceGuild = buffer.readVarUhLong();
        if (this.experienceGuild < 0 || this.experienceGuild > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceGuild + ") on element of CharacterExperienceGainMessage.experienceGuild.");
        }
        this.experienceIncarnation = buffer.readVarUhLong();
        if (this.experienceIncarnation < 0 || this.experienceIncarnation > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experienceIncarnation + ") on element of CharacterExperienceGainMessage.experienceIncarnation.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterLevelUpInformationMessage extends CharacterLevelUpMessage {
    constructor(param1, param2, param3) {
        super(param1);
        this.name = param2;
        this.id = param3;
        this.messageId = 6076;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.name);
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarLong(this.id);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.name = buffer.readUTF();
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of CharacterLevelUpInformationMessage.id.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterLevelUpMessage extends ProtocolMessage {
    constructor(newLevel) {
        super(5670);
        this.newLevel = newLevel;
    }
    serialize() {
        if (this.newLevel < 2 || this.newLevel > 200) {
            Logger.error("Forbidden value (" + this.newLevel + ") on element newLevel.");
        }
        this.buffer.writeByte(this.newLevel);
    }
    deserialize(buffer) {
        this.newLevel = buffer.readUnsignedByte();
        if (this.newLevel < 2 || this.newLevel > 200) {
            Logger.error("Forbidden value (" + this.newLevel + ") on element of CharacterLevelUpMessage.newLevel.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterStatsListMessage extends ProtocolMessage {
    constructor(stats) {
        super(500);
        this.stats = stats;
    }
    serialize() {
        this.stats.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.stats = new CharacterCharacteristicsInformations();
        this.stats.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class FighterStatsListMessage extends ProtocolMessage {
    constructor(stats) {
        super(6322);
        this.stats = stats;
    }
    serialize() {
        this.stats.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.stats = new CharacterCharacteristicsInformations();
        this.stats.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class LifePointsRegenBeginMessage extends ProtocolMessage {
    constructor(regenRate) {
        super(5684);
        this.regenRate = regenRate;
    }
    serialize() {
        if (this.regenRate < 0 || this.regenRate > 255) {
            Logger.error("Forbidden value (" + this.regenRate + ") on element regenRate.");
        }
        this.buffer.writeByte(this.regenRate);
    }
    deserialize(buffer) {
        this.regenRate = buffer.readUnsignedByte();
        if (this.regenRate < 0 || this.regenRate > 255) {
            Logger.error("Forbidden value (" + this.regenRate + ") on element of LifePointsRegenBeginMessage.regenRate.");
        }
    }
}

// Generated by Noxus messages 
export class LifePointsRegenEndMessage extends UpdateLifePointsMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.lifePointsGained = param3;
        this.messageId = 5686;
    }
    serialize() {
        super.serialize();
        if (this.lifePointsGained < 0) {
            Logger.error("Forbidden value (" + this.lifePointsGained + ") on element lifePointsGained.");
        }
        this.buffer.writeVarInt(this.lifePointsGained);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.lifePointsGained = buffer.readVarUhInt();
        if (this.lifePointsGained < 0) {
            Logger.error("Forbidden value (" + this.lifePointsGained + ") on element of LifePointsRegenEndMessage.lifePointsGained.");
        }
    }
}

// Generated by Noxus messages 
export class UpdateLifePointsMessage extends ProtocolMessage {
    constructor(lifePoints, maxLifePoints) {
        super(5658);
        this.lifePoints = lifePoints;
        this.maxLifePoints = maxLifePoints;
    }
    serialize() {
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        this.buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        this.buffer.writeVarInt(this.maxLifePoints);
    }
    deserialize(buffer) {
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element of UpdateLifePointsMessage.lifePoints.");
        }
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element of UpdateLifePointsMessage.maxLifePoints.");
        }
    }
}

// Generated by Noxus messages 
export class PlayerStatusUpdateErrorMessage extends ProtocolMessage {
constructor) {
    super(6385);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class PlayerStatusUpdateMessage extends ProtocolMessage {
    constructor(accountId, playerId, status) {
        super(6386);
        this.accountId = accountId;
        this.playerId = playerId;
        this.status = status;
    }
    serialize() {
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeShort(this.status.protocolId);
        this.status.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of PlayerStatusUpdateMessage.accountId.");
        }
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of PlayerStatusUpdateMessage.playerId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PlayerStatusUpdateRequestMessage extends ProtocolMessage {
    constructor(status) {
        super(6387);
        this.status = status;
    }
    serialize() {
        this.buffer.writeShort(this.status.protocolId);
        this.status.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.status = ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
        this.status.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ChatAbstractClientMessage extends ProtocolMessage {
    constructor(content) {
        super(850);
        this.content = content;
    }
    serialize() {
        this.buffer.writeUTF(this.content);
    }
    deserialize(buffer) {
        this.content = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class ChatAbstractServerMessage extends ProtocolMessage {
    constructor(channel, content, timestamp, fingerprint) {
        super(880);
        this.channel = channel;
        this.content = content;
        this.timestamp = timestamp;
        this.fingerprint = fingerprint;
    }
    serialize() {
        this.buffer.writeByte(this.channel);
        this.buffer.writeUTF(this.content);
        if (this.timestamp < 0) {
            Logger.error("Forbidden value (" + this.timestamp + ") on element timestamp.");
        }
        this.buffer.writeInt(this.timestamp);
        this.buffer.writeUTF(this.fingerprint);
    }
    deserialize(buffer) {
        this.channel = buffer.readByte();
        if (this.channel < 0) {
            Logger.error("Forbidden value (" + this.channel + ") on element of ChatAbstractServerMessage.channel.");
        }
        this.content = buffer.readUTF();
        this.timestamp = buffer.readInt();
        if (this.timestamp < 0) {
            Logger.error("Forbidden value (" + this.timestamp + ") on element of ChatAbstractServerMessage.timestamp.");
        }
        this.fingerprint = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class ChatAdminServerMessage extends ChatServerMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7) {
        super(param1, param2, param3, param4, param5, param6, param7);
        this.messageId = 6135;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ChatClientMultiMessage extends ChatAbstractClientMessage {
    constructor(param1, param2) {
        super(param1);
        this.channel = param2;
        this.messageId = 861;
    }
    serialize() {
        super.serialize();
        this.buffer.writeByte(this.channel);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.channel = buffer.readByte();
        if (this.channel < 0) {
            Logger.error("Forbidden value (" + this.channel + ") on element of ChatClientMultiMessage.channel.");
        }
    }
}

// Generated by Noxus messages 
export class ChatClientMultiWithObjectMessage extends ChatClientMultiMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.objects = param3;
        this.messageId = 862;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            this.objects[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ChatClientPrivateMessage extends ChatAbstractClientMessage {
    constructor(param1, param2) {
        super(param1);
        this.receiver = param2;
        this.messageId = 851;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.receiver);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.receiver = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class ChatClientPrivateWithObjectMessage extends ChatClientPrivateMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.objects = param3;
        this.messageId = 852;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            this.objects[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ChatErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(870);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of ChatErrorMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class ChatServerCopyMessage extends ChatAbstractServerMessage {
    constructor(param1, param2, param3, param4, param5, param6) {
        super(param1, param2, param3, param4);
        this.receiverId = param5;
        this.receiverName = param6;
        this.messageId = 882;
    }
    serialize() {
        super.serialize();
        if (this.receiverId < 0 || this.receiverId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.receiverId + ") on element receiverId.");
        }
        this.buffer.writeVarLong(this.receiverId);
        this.buffer.writeUTF(this.receiverName);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.receiverId = buffer.readVarUhLong();
        if (this.receiverId < 0 || this.receiverId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.receiverId + ") on element of ChatServerCopyMessage.receiverId.");
        }
        this.receiverName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class ChatServerCopyWithObjectMessage extends ChatServerCopyMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7) {
        super(param1, param2, param3, param4, param5, param6);
        this.objects = param7;
        this.messageId = 884;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            this.objects[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ChatServerMessage extends ChatAbstractServerMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7) {
        super(param1, param2, param3, param4);
        this.senderId = param5;
        this.senderName = param6;
        this.senderAccountId = param7;
        this.messageId = 881;
    }
    serialize() {
        super.serialize();
        if (this.senderId < -9007199254740990 || this.senderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.senderId + ") on element senderId.");
        }
        this.buffer.writeDouble(this.senderId);
        this.buffer.writeUTF(this.senderName);
        if (this.senderAccountId < 0) {
            Logger.error("Forbidden value (" + this.senderAccountId + ") on element senderAccountId.");
        }
        this.buffer.writeInt(this.senderAccountId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.senderId = buffer.readDouble();
        if (this.senderId < -9007199254740990 || this.senderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.senderId + ") on element of ChatServerMessage.senderId.");
        }
        this.senderName = buffer.readUTF();
        this.senderAccountId = buffer.readInt();
        if (this.senderAccountId < 0) {
            Logger.error("Forbidden value (" + this.senderAccountId + ") on element of ChatServerMessage.senderAccountId.");
        }
    }
}

// Generated by Noxus messages 
export class ChatServerWithObjectMessage extends ChatServerMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8) {
        super(param1, param2, param3, param4, param5, param6, param7);
        this.objects = param8;
        this.messageId = 883;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            this.objects[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ChannelEnablingChangeMessage extends ProtocolMessage {
    constructor(channel, enable) {
        super(891);
        this.channel = channel;
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeByte(this.channel);
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.channel = buffer.readByte();
        if (this.channel < 0) {
            Logger.error("Forbidden value (" + this.channel + ") on element of ChannelEnablingChangeMessage.channel.");
        }
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class ChannelEnablingMessage extends ProtocolMessage {
    constructor(channel, enable) {
        super(890);
        this.channel = channel;
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeByte(this.channel);
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.channel = buffer.readByte();
        if (this.channel < 0) {
            Logger.error("Forbidden value (" + this.channel + ") on element of ChannelEnablingMessage.channel.");
        }
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class EnabledChannelsMessage extends ProtocolMessage {
    constructor(channels, disallowed) {
        super(892);
        this.channels = channels;
        this.disallowed = disallowed;
    }
    serialize() {
        this.buffer.writeShort(this.channels.length);
        var _loc2_ = 0;
        while (_loc2_ < this.channels.length) {
            this.buffer.writeByte(this.channels[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.disallowed.length);
        var _loc3_ = 0;
        while (_loc3_ < this.disallowed.length) {
            this.buffer.writeByte(this.disallowed[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readByte();
            if (_loc6_ < 0) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of channels.");
            }
            this.channels.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readByte();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of disallowed.");
            }
            this.disallowed.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class ChatMessageReportMessage extends ProtocolMessage {
    constructor(senderName, content, timestamp, channel, fingerprint, reason) {
        super(821);
        this.senderName = senderName;
        this.content = content;
        this.timestamp = timestamp;
        this.channel = channel;
        this.fingerprint = fingerprint;
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeUTF(this.senderName);
        this.buffer.writeUTF(this.content);
        if (this.timestamp < 0) {
            Logger.error("Forbidden value (" + this.timestamp + ") on element timestamp.");
        }
        this.buffer.writeInt(this.timestamp);
        this.buffer.writeByte(this.channel);
        this.buffer.writeUTF(this.fingerprint);
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element reason.");
        }
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.senderName = buffer.readUTF();
        this.content = buffer.readUTF();
        this.timestamp = buffer.readInt();
        if (this.timestamp < 0) {
            Logger.error("Forbidden value (" + this.timestamp + ") on element of ChatMessageReportMessage.timestamp.");
        }
        this.channel = buffer.readByte();
        if (this.channel < 0) {
            Logger.error("Forbidden value (" + this.channel + ") on element of ChatMessageReportMessage.channel.");
        }
        this.fingerprint = buffer.readUTF();
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of ChatMessageReportMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class ChatSmileyExtraPackListMessage extends ProtocolMessage {
    constructor(packIds) {
        super(6596);
        this.packIds = packIds;
    }
    serialize() {
        this.buffer.writeShort(this.packIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.packIds.length) {
            if (this.packIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.packIds[_loc2_] + ") on element 1 (starting at 1) of packIds.");
            }
            this.buffer.writeByte(this.packIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of packIds.");
            }
            this.packIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ChatSmileyMessage extends ProtocolMessage {
    constructor(entityId, smileyId, accountId) {
        super(801);
        this.entityId = entityId;
        this.smileyId = smileyId;
        this.accountId = accountId;
    }
    serialize() {
        if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.entityId + ") on element entityId.");
        }
        this.buffer.writeDouble(this.entityId);
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        this.buffer.writeVarShort(this.smileyId);
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
    }
    deserialize(buffer) {
        this.entityId = buffer.readDouble();
        if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.entityId + ") on element of ChatSmileyMessage.entityId.");
        }
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element of ChatSmileyMessage.smileyId.");
        }
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of ChatSmileyMessage.accountId.");
        }
    }
}

// Generated by Noxus messages 
export class ChatSmileyRequestMessage extends ProtocolMessage {
    constructor(smileyId) {
        super(800);
        this.smileyId = smileyId;
    }
    serialize() {
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        this.buffer.writeVarShort(this.smileyId);
    }
    deserialize(buffer) {
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element of ChatSmileyRequestMessage.smileyId.");
        }
    }
}

// Generated by Noxus messages 
export class LocalizedChatSmileyMessage extends ChatSmileyMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2, param3);
        this.cellId = param4;
        this.messageId = 6185;
    }
    serialize() {
        super.serialize();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of LocalizedChatSmileyMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class MoodSmileyRequestMessage extends ProtocolMessage {
    constructor(smileyId) {
        super(6192);
        this.smileyId = smileyId;
    }
    serialize() {
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        this.buffer.writeVarShort(this.smileyId);
    }
    deserialize(buffer) {
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyRequestMessage.smileyId.");
        }
    }
}

// Generated by Noxus messages 
export class MoodSmileyResultMessage extends ProtocolMessage {
    constructor(resultCode, smileyId) {
        super(6196);
        this.resultCode = resultCode;
        this.smileyId = smileyId;
    }
    serialize() {
        this.buffer.writeByte(this.resultCode);
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        this.buffer.writeVarShort(this.smileyId);
    }
    deserialize(buffer) {
        this.resultCode = buffer.readByte();
        if (this.resultCode < 0) {
            Logger.error("Forbidden value (" + this.resultCode + ") on element of MoodSmileyResultMessage.resultCode.");
        }
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyResultMessage.smileyId.");
        }
    }
}

// Generated by Noxus messages 
export class MoodSmileyUpdateMessage extends ProtocolMessage {
    constructor(accountId, playerId, smileyId) {
        super(6388);
        this.accountId = accountId;
        this.playerId = playerId;
        this.smileyId = smileyId;
    }
    serialize() {
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element smileyId.");
        }
        this.buffer.writeVarShort(this.smileyId);
    }
    deserialize(buffer) {
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of MoodSmileyUpdateMessage.accountId.");
        }
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of MoodSmileyUpdateMessage.playerId.");
        }
        this.smileyId = buffer.readVarUhShort();
        if (this.smileyId < 0) {
            Logger.error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyUpdateMessage.smileyId.");
        }
    }
}

// Generated by Noxus messages 
export class GameCautiousMapMovementMessage extends GameMapMovementMessage {
    constructor(param1, param2) {
        super(param1, param2);
        this.messageId = 6497;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameCautiousMapMovementRequestMessage extends GameMapMovementRequestMessage {
    constructor(param1, param2) {
        super(param1, param2);
        this.messageId = 6496;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameContextCreateErrorMessage extends ProtocolMessage {
constructor) {
    super(6024);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GameContextCreateMessage extends ProtocolMessage {
    constructor(context) {
        super(200);
        this.context = context;
    }
    serialize() {
        this.buffer.writeByte(this.context);
    }
    deserialize(buffer) {
        this.context = buffer.readByte();
        if (this.context < 0) {
            Logger.error("Forbidden value (" + this.context + ") on element of GameContextCreateMessage.context.");
        }
    }
}

// Generated by Noxus messages 
export class GameContextCreateRequestMessage extends ProtocolMessage {
constructor) {
    super(250);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GameContextDestroyMessage extends ProtocolMessage {
constructor) {
    super(201);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GameContextKickMessage extends ProtocolMessage {
    constructor(targetId) {
        super(6081);
        this.targetId = targetId;
    }
    serialize() {
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }
    deserialize(buffer) {
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameContextKickMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class GameContextMoveElementMessage extends ProtocolMessage {
    constructor(movement) {
        super(253);
        this.movement = movement;
    }
    serialize() {
        this.movement.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.movement = new EntityMovementInformations();
        this.movement.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameContextMoveMultipleElementsMessage extends ProtocolMessage {
    constructor(movements) {
        super(254);
        this.movements = movements;
    }
    serialize() {
        this.buffer.writeShort(this.movements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.movements.length) {
            this.movements[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new EntityMovementInformations();
            _loc4_.deserialize(buffer);
            this.movements.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameContextQuitMessage extends ProtocolMessage {
constructor) {
    super(255);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GameContextReadyMessage extends ProtocolMessage {
    constructor(mapId) {
        super(6071);
        this.mapId = mapId;
    }
    serialize() {
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }
    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element of GameContextReadyMessage.mapId.");
        }
    }
}

// Generated by Noxus messages 
export class GameContextRefreshEntityLookMessage extends ProtocolMessage {
    constructor(id, look) {
        super(5637);
        this.id = id;
        this.look = look;
    }
    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        this.look.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of GameContextRefreshEntityLookMessage.id.");
        }
        this.look = new EntityLook();
        this.look.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameContextRemoveElementMessage extends ProtocolMessage {
    constructor(id) {
        super(251);
        this.id = id;
    }
    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of GameContextRemoveElementMessage.id.");
        }
    }
}

// Generated by Noxus messages 
export class GameContextRemoveElementWithEventMessage extends GameContextRemoveElementMessage {
    constructor(param1, param2) {
        super(param1);
        this.elementEventId = param2;
        this.messageId = 6412;
    }
    serialize() {
        super.serialize();
        if (this.elementEventId < 0) {
            Logger.error("Forbidden value (" + this.elementEventId + ") on element elementEventId.");
        }
        this.buffer.writeByte(this.elementEventId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.elementEventId = buffer.readByte();
        if (this.elementEventId < 0) {
            Logger.error("Forbidden value (" + this.elementEventId + ") on element of GameContextRemoveElementWithEventMessage.elementEventId.");
        }
    }
}

// Generated by Noxus messages 
export class GameContextRemoveMultipleElementsMessage extends ProtocolMessage {
    constructor(id) {
        super(252);
        this.id = id;
    }
    serialize() {
        this.buffer.writeShort(this.id.length);
        var _loc2_ = 0;
        while (_loc2_ < this.id.length) {
            if (this.id[_loc2_] < -9007199254740990 || this.id[_loc2_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.id[_loc2_] + ") on element 1 (starting at 1) of id.");
            }
            this.buffer.writeDouble(this.id[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readDouble();
            if (_loc4_ < -9007199254740990 || _loc4_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of id.");
            }
            this.id.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameContextRemoveMultipleElementsWithEventsMessage extends GameContextRemoveMultipleElementsMessage {
    constructor(param1, param2) {
        super(param1);
        this.elementEventIds = param2;
        this.messageId = 6416;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.elementEventIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.elementEventIds.length) {
            if (this.elementEventIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.elementEventIds[_loc2_] + ") on element 1 (starting at 1) of elementEventIds.");
            }
            this.buffer.writeByte(this.elementEventIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of elementEventIds.");
            }
            this.elementEventIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameEntitiesDispositionMessage extends ProtocolMessage {
    constructor(dispositions) {
        super(5696);
        this.dispositions = dispositions;
    }
    serialize() {
        this.buffer.writeShort(this.dispositions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dispositions.length) {
            this.dispositions[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new IdentifiedEntityDispositionInformations();
            _loc4_.deserialize(buffer);
            this.dispositions.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameEntityDispositionErrorMessage extends ProtocolMessage {
constructor) {
    super(5695);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GameEntityDispositionMessage extends ProtocolMessage {
    constructor(disposition) {
        super(5693);
        this.disposition = disposition;
    }
    serialize() {
        this.disposition.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.disposition = new IdentifiedEntityDispositionInformations();
        this.disposition.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameMapChangeOrientationMessage extends ProtocolMessage {
    constructor(orientation) {
        super(946);
        this.orientation = orientation;
    }
    serialize() {
        this.orientation.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.orientation = new ActorOrientation();
        this.orientation.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameMapChangeOrientationRequestMessage extends ProtocolMessage {
    constructor(direction) {
        super(945);
        this.direction = direction;
    }
    serialize() {
        this.buffer.writeByte(this.direction);
    }
    deserialize(buffer) {
        this.direction = buffer.readByte();
        if (this.direction < 0) {
            Logger.error("Forbidden value (" + this.direction + ") on element of GameMapChangeOrientationRequestMessage.direction.");
        }
    }
}

// Generated by Noxus messages 
export class GameMapChangeOrientationsMessage extends ProtocolMessage {
    constructor(orientations) {
        super(6155);
        this.orientations = orientations;
    }
    serialize() {
        this.buffer.writeShort(this.orientations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.orientations.length) {
            this.orientations[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ActorOrientation();
            _loc4_.deserialize(buffer);
            this.orientations.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameMapMovementCancelMessage extends ProtocolMessage {
    constructor(cellId) {
        super(953);
        this.cellId = cellId;
    }
    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }
    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of GameMapMovementCancelMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameMapMovementConfirmMessage extends ProtocolMessage {
constructor) {
    super(952);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GameMapMovementMessage extends ProtocolMessage {
    constructor(keyMovements, actorId) {
        super(951);
        this.keyMovements = keyMovements;
        this.actorId = actorId;
    }
    serialize() {
        this.buffer.writeShort(this.keyMovements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.keyMovements.length) {
            if (this.keyMovements[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.keyMovements[_loc2_] + ") on element 1 (starting at 1) of keyMovements.");
            }
            this.buffer.writeShort(this.keyMovements[_loc2_]);
            _loc2_++;
        }
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.actorId + ") on element actorId.");
        }
        this.buffer.writeDouble(this.actorId);
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of keyMovements.");
            }
            this.keyMovements.push(_loc4_);
            _loc3_++;
        }
        this.actorId = buffer.readDouble();
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.actorId + ") on element of GameMapMovementMessage.actorId.");
        }
    }
}

// Generated by Noxus messages 
export class GameMapMovementRequestMessage extends ProtocolMessage {
    constructor(keyMovements, mapId) {
        super(950);
        this.keyMovements = keyMovements;
        this.mapId = mapId;
    }
    serialize() {
        this.buffer.writeShort(this.keyMovements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.keyMovements.length) {
            if (this.keyMovements[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.keyMovements[_loc2_] + ") on element 1 (starting at 1) of keyMovements.");
            }
            this.buffer.writeShort(this.keyMovements[_loc2_]);
            _loc2_++;
        }
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of keyMovements.");
            }
            this.keyMovements.push(_loc4_);
            _loc3_++;
        }
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element of GameMapMovementRequestMessage.mapId.");
        }
    }
}

// Generated by Noxus messages 
export class GameMapNoMovementMessage extends ProtocolMessage {
    constructor(cellX, cellY) {
        super(954);
        this.cellX = cellX;
        this.cellY = cellY;
    }
    serialize() {
        this.buffer.writeShort(this.cellX);
        this.buffer.writeShort(this.cellY);
    }
    deserialize(buffer) {
        this.cellX = buffer.readShort();
        this.cellY = buffer.readShort();
    }
}

// Generated by Noxus messages 
export class GameRefreshMonsterBoostsMessage extends ProtocolMessage {
    constructor(monsterBoosts, familyBoosts) {
        super(6618);
        this.monsterBoosts = monsterBoosts;
        this.familyBoosts = familyBoosts;
    }
    serialize() {
        this.buffer.writeShort(this.monsterBoosts.length);
        var _loc2_ = 0;
        while (_loc2_ < this.monsterBoosts.length) {
            this.monsterBoosts[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.familyBoosts.length);
        var _loc3_ = 0;
        while (_loc3_ < this.familyBoosts.length) {
            this.familyBoosts[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new MonsterBoosts();
            _loc6_.deserialize(buffer);
            this.monsterBoosts.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new MonsterBoosts();
            _loc7_.deserialize(buffer);
            this.familyBoosts.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class ShowCellMessage extends ProtocolMessage {
    constructor(sourceId, cellId) {
        super(5612);
        this.sourceId = sourceId;
        this.cellId = cellId;
    }
    serialize() {
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        this.buffer.writeDouble(this.sourceId);
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }
    deserialize(buffer) {
        this.sourceId = buffer.readDouble();
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element of ShowCellMessage.sourceId.");
        }
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of ShowCellMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class ShowCellRequestMessage extends ProtocolMessage {
    constructor(cellId) {
        super(5611);
        this.cellId = cellId;
    }
    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }
    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of ShowCellRequestMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class ShowCellSpectatorMessage extends ShowCellMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.playerName = param3;
        this.messageId = 6158;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.playerName);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class DisplayNumericalValuePaddockMessage extends ProtocolMessage {
    constructor(rideId, value, type) {
        super(6563);
        this.rideId = rideId;
        this.value = value;
        this.type = type;
    }
    serialize() {
        this.buffer.writeInt(this.rideId);
        this.buffer.writeInt(this.value);
        this.buffer.writeByte(this.type);
    }
    deserialize(buffer) {
        this.rideId = buffer.readInt();
        this.value = buffer.readInt();
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of DisplayNumericalValuePaddockMessage.type.");
        }
    }
}

// Generated by Noxus messages 
export class DungeonKeyRingMessage extends ProtocolMessage {
    constructor(availables, unavailables) {
        super(6299);
        this.availables = availables;
        this.unavailables = unavailables;
    }
    serialize() {
        this.buffer.writeShort(this.availables.length);
        var _loc2_ = 0;
        while (_loc2_ < this.availables.length) {
            if (this.availables[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.availables[_loc2_] + ") on element 1 (starting at 1) of availables.");
            }
            this.buffer.writeVarShort(this.availables[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.unavailables.length);
        var _loc3_ = 0;
        while (_loc3_ < this.unavailables.length) {
            if (this.unavailables[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.unavailables[_loc3_] + ") on element 2 (starting at 1) of unavailables.");
            }
            this.buffer.writeVarShort(this.unavailables[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of availables.");
            }
            this.availables.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of unavailables.");
            }
            this.unavailables.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class DungeonKeyRingUpdateMessage extends ProtocolMessage {
    constructor(dungeonId, available) {
        super(6296);
        this.dungeonId = dungeonId;
        this.available = available;
    }
    serialize() {
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        this.buffer.writeBoolean(this.available);
    }
    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of DungeonKeyRingUpdateMessage.dungeonId.");
        }
        this.available = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameFightEndMessage extends ProtocolMessage {
    constructor(duration, ageBonus, lootShareLimitMalus, results, namedPartyTeamsOutcomes) {
        super(720);
        this.duration = duration;
        this.ageBonus = ageBonus;
        this.lootShareLimitMalus = lootShareLimitMalus;
        this.results = results;
        this.namedPartyTeamsOutcomes = namedPartyTeamsOutcomes;
    }
    serialize() {
        if (this.duration < 0) {
            Logger.error("Forbidden value (" + this.duration + ") on element duration.");
        }
        this.buffer.writeInt(this.duration);
        this.buffer.writeShort(this.ageBonus);
        this.buffer.writeShort(this.lootShareLimitMalus);
        this.buffer.writeShort(this.results.length);
        var _loc2_ = 0;
        while (_loc2_ < this.results.length) {
            this.buffer.writeShort((this.results[_loc2_]).protocolId);
            this.results[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.namedPartyTeamsOutcomes.length);
        var _loc3_ = 0;
        while (_loc3_ < this.namedPartyTeamsOutcomes.length) {
            this.namedPartyTeamsOutcomes[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = null;
        this.duration = buffer.readInt();
        if (this.duration < 0) {
            Logger.error("Forbidden value (" + this.duration + ") on element of GameFightEndMessage.duration.");
        }
        this.ageBonus = buffer.readShort();
        this.lootShareLimitMalus = buffer.readShort();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(FightResultListEntry, _loc6_);
            _loc7_.deserialize(buffer);
            this.results.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = new NamedPartyTeamWithOutcome();
            _loc8_.deserialize(buffer);
            this.namedPartyTeamsOutcomes.push(_loc8_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class GameFightHumanReadyStateMessage extends ProtocolMessage {
    constructor(characterId, isReady) {
        super(740);
        this.characterId = characterId;
        this.isReady = isReady;
    }
    serialize() {
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
        this.buffer.writeBoolean(this.isReady);
    }
    deserialize(buffer) {
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element of GameFightHumanReadyStateMessage.characterId.");
        }
        this.isReady = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameFightJoinMessage extends ProtocolMessage {
    constructor(isTeamPhase, canBeCancelled, canSayReady, isFightStarted, timeMaxBeforeFightStart, fightType) {
        super(702);
        this.isTeamPhase = isTeamPhase;
        this.canBeCancelled = canBeCancelled;
        this.canSayReady = canSayReady;
        this.isFightStarted = isFightStarted;
        this.timeMaxBeforeFightStart = timeMaxBeforeFightStart;
        this.fightType = fightType;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.isTeamPhase);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.canBeCancelled);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 2, this.canSayReady);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 3, this.isFightStarted);
        this.buffer.writeByte(_loc2_);
        if (this.timeMaxBeforeFightStart < 0) {
            Logger.error("Forbidden value (" + this.timeMaxBeforeFightStart + ") on element timeMaxBeforeFightStart.");
        }
        this.buffer.writeShort(this.timeMaxBeforeFightStart);
        this.buffer.writeByte(this.fightType);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.isTeamPhase = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.canBeCancelled = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.canSayReady = IO.BooleanByteWrapper.getFlag(_loc2_, 2);
        this.isFightStarted = IO.BooleanByteWrapper.getFlag(_loc2_, 3);
        this.timeMaxBeforeFightStart = buffer.readShort();
        if (this.timeMaxBeforeFightStart < 0) {
            Logger.error("Forbidden value (" + this.timeMaxBeforeFightStart + ") on element of GameFightJoinMessage.timeMaxBeforeFightStart.");
        }
        this.fightType = buffer.readByte();
        if (this.fightType < 0) {
            Logger.error("Forbidden value (" + this.fightType + ") on element of GameFightJoinMessage.fightType.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightJoinRequestMessage extends ProtocolMessage {
    constructor(fighterId, fightId) {
        super(701);
        this.fighterId = fighterId;
        this.fightId = fightId;
    }
    serialize() {
        if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fighterId + ") on element fighterId.");
        }
        this.buffer.writeDouble(this.fighterId);
        this.buffer.writeInt(this.fightId);
    }
    deserialize(buffer) {
        this.fighterId = buffer.readDouble();
        if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fighterId + ") on element of GameFightJoinRequestMessage.fighterId.");
        }
        this.fightId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class GameFightLeaveMessage extends ProtocolMessage {
    constructor(charId) {
        super(721);
        this.charId = charId;
    }
    serialize() {
        if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.charId + ") on element charId.");
        }
        this.buffer.writeDouble(this.charId);
    }
    deserialize(buffer) {
        this.charId = buffer.readDouble();
        if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.charId + ") on element of GameFightLeaveMessage.charId.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightNewRoundMessage extends ProtocolMessage {
    constructor(roundNumber) {
        super(6239);
        this.roundNumber = roundNumber;
    }
    serialize() {
        if (this.roundNumber < 0) {
            Logger.error("Forbidden value (" + this.roundNumber + ") on element roundNumber.");
        }
        this.buffer.writeVarInt(this.roundNumber);
    }
    deserialize(buffer) {
        this.roundNumber = buffer.readVarUhInt();
        if (this.roundNumber < 0) {
            Logger.error("Forbidden value (" + this.roundNumber + ") on element of GameFightNewRoundMessage.roundNumber.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightNewWaveMessage extends ProtocolMessage {
    constructor(id, teamId, nbTurnBeforeNextWave) {
        super(6490);
        this.id = id;
        this.teamId = teamId;
        this.nbTurnBeforeNextWave = nbTurnBeforeNextWave;
    }
    serialize() {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeByte(this.id);
        this.buffer.writeByte(this.teamId);
        this.buffer.writeShort(this.nbTurnBeforeNextWave);
    }
    deserialize(buffer) {
        this.id = buffer.readByte();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of GameFightNewWaveMessage.id.");
        }
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            Logger.error("Forbidden value (" + this.teamId + ") on element of GameFightNewWaveMessage.teamId.");
        }
        this.nbTurnBeforeNextWave = buffer.readShort();
    }
}

// Generated by Noxus messages 
export class GameFightOptionStateUpdateMessage extends ProtocolMessage {
    constructor(fightId, teamId, option, state) {
        super(5927);
        this.fightId = fightId;
        this.teamId = teamId;
        this.option = option;
        this.state = state;
    }
    serialize() {
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeShort(this.fightId);
        this.buffer.writeByte(this.teamId);
        this.buffer.writeByte(this.option);
        this.buffer.writeBoolean(this.state);
    }
    deserialize(buffer) {
        this.fightId = buffer.readShort();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of GameFightOptionStateUpdateMessage.fightId.");
        }
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            Logger.error("Forbidden value (" + this.teamId + ") on element of GameFightOptionStateUpdateMessage.teamId.");
        }
        this.option = buffer.readByte();
        if (this.option < 0) {
            Logger.error("Forbidden value (" + this.option + ") on element of GameFightOptionStateUpdateMessage.option.");
        }
        this.state = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameFightOptionToggleMessage extends ProtocolMessage {
    constructor(option) {
        super(707);
        this.option = option;
    }
    serialize() {
        this.buffer.writeByte(this.option);
    }
    deserialize(buffer) {
        this.option = buffer.readByte();
        if (this.option < 0) {
            Logger.error("Forbidden value (" + this.option + ") on element of GameFightOptionToggleMessage.option.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightPlacementPositionRequestMessage extends ProtocolMessage {
    constructor(cellId) {
        super(704);
        this.cellId = cellId;
    }
    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }
    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of GameFightPlacementPositionRequestMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightPlacementPossiblePositionsMessage extends ProtocolMessage {
    constructor(positionsForChallengers, positionsForDefenders, teamNumber) {
        super(703);
        this.positionsForChallengers = positionsForChallengers;
        this.positionsForDefenders = positionsForDefenders;
        this.teamNumber = teamNumber;
    }
    serialize() {
        this.buffer.writeShort(this.positionsForChallengers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.positionsForChallengers.length) {
            if (this.positionsForChallengers[_loc2_] < 0 || this.positionsForChallengers[_loc2_] > 559) {
                Logger.error("Forbidden value (" + this.positionsForChallengers[_loc2_] + ") on element 1 (starting at 1) of positionsForChallengers.");
            }
            this.buffer.writeVarShort(this.positionsForChallengers[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.positionsForDefenders.length);
        var _loc3_ = 0;
        while (_loc3_ < this.positionsForDefenders.length) {
            if (this.positionsForDefenders[_loc3_] < 0 || this.positionsForDefenders[_loc3_] > 559) {
                Logger.error("Forbidden value (" + this.positionsForDefenders[_loc3_] + ") on element 2 (starting at 1) of positionsForDefenders.");
            }
            this.buffer.writeVarShort(this.positionsForDefenders[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeByte(this.teamNumber);
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0 || _loc6_ > 559) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of positionsForChallengers.");
            }
            this.positionsForChallengers.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0 || _loc7_ > 559) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of positionsForDefenders.");
            }
            this.positionsForDefenders.push(_loc7_);
            _loc5_++;
        }
        this.teamNumber = buffer.readByte();
        if (this.teamNumber < 0) {
            Logger.error("Forbidden value (" + this.teamNumber + ") on element of GameFightPlacementPossiblePositionsMessage.teamNumber.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightPlacementSwapPositionsAcceptMessage extends ProtocolMessage {
    constructor(requestId) {
        super(6547);
        this.requestId = requestId;
    }
    serialize() {
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeInt(this.requestId);
    }
    deserialize(buffer) {
        this.requestId = buffer.readInt();
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsAcceptMessage.requestId.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightPlacementSwapPositionsCancelledMessage extends ProtocolMessage {
    constructor(requestId, cancellerId) {
        super(6546);
        this.requestId = requestId;
        this.cancellerId = cancellerId;
    }
    serialize() {
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeInt(this.requestId);
        if (this.cancellerId < -9007199254740990 || this.cancellerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.cancellerId + ") on element cancellerId.");
        }
        this.buffer.writeDouble(this.cancellerId);
    }
    deserialize(buffer) {
        this.requestId = buffer.readInt();
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsCancelledMessage.requestId.");
        }
        this.cancellerId = buffer.readDouble();
        if (this.cancellerId < -9007199254740990 || this.cancellerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.cancellerId + ") on element of GameFightPlacementSwapPositionsCancelledMessage.cancellerId.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightPlacementSwapPositionsCancelMessage extends ProtocolMessage {
    constructor(requestId) {
        super(6543);
        this.requestId = requestId;
    }
    serialize() {
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeInt(this.requestId);
    }
    deserialize(buffer) {
        this.requestId = buffer.readInt();
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsCancelMessage.requestId.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightPlacementSwapPositionsErrorMessage extends ProtocolMessage {
constructor) {
    super(6548);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GameFightPlacementSwapPositionsMessage extends ProtocolMessage {
    constructor(dispositions) {
        super(6544);
        this.dispositions = dispositions;
    }
    serialize() {
        var _loc2_ = 0;
        while (_loc2_ < 2) {
            this.dispositions[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc2_ = 0;
        while (_loc2_ < 2) {
            this.dispositions[_loc2_] = new IdentifiedEntityDispositionInformations();
            this.dispositions[_loc2_].deserialize(buffer);
            _loc2_++;
        }
    }
}

// Generated by Noxus messages 
export class GameFightPlacementSwapPositionsOfferMessage extends ProtocolMessage {
    constructor(requestId, requesterId, requesterCellId, requestedId, requestedCellId) {
        super(6542);
        this.requestId = requestId;
        this.requesterId = requesterId;
        this.requesterCellId = requesterCellId;
        this.requestedId = requestedId;
        this.requestedCellId = requestedCellId;
    }
    serialize() {
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeInt(this.requestId);
        if (this.requesterId < -9007199254740990 || this.requesterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.requesterId + ") on element requesterId.");
        }
        this.buffer.writeDouble(this.requesterId);
        if (this.requesterCellId < 0 || this.requesterCellId > 559) {
            Logger.error("Forbidden value (" + this.requesterCellId + ") on element requesterCellId.");
        }
        this.buffer.writeVarShort(this.requesterCellId);
        if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.requestedId + ") on element requestedId.");
        }
        this.buffer.writeDouble(this.requestedId);
        if (this.requestedCellId < 0 || this.requestedCellId > 559) {
            Logger.error("Forbidden value (" + this.requestedCellId + ") on element requestedCellId.");
        }
        this.buffer.writeVarShort(this.requestedCellId);
    }
    deserialize(buffer) {
        this.requestId = buffer.readInt();
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestId.");
        }
        this.requesterId = buffer.readDouble();
        if (this.requesterId < -9007199254740990 || this.requesterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.requesterId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requesterId.");
        }
        this.requesterCellId = buffer.readVarUhShort();
        if (this.requesterCellId < 0 || this.requesterCellId > 559) {
            Logger.error("Forbidden value (" + this.requesterCellId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requesterCellId.");
        }
        this.requestedId = buffer.readDouble();
        if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.requestedId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestedId.");
        }
        this.requestedCellId = buffer.readVarUhShort();
        if (this.requestedCellId < 0 || this.requestedCellId > 559) {
            Logger.error("Forbidden value (" + this.requestedCellId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestedCellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightPlacementSwapPositionsRequestMessage extends GameFightPlacementPositionRequestMessage {
    constructor(param1, param2) {
        super(param1);
        this.requestedId = param2;
        this.messageId = 6541;
    }
    serialize() {
        super.serialize();
        if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.requestedId + ") on element requestedId.");
        }
        this.buffer.writeDouble(this.requestedId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.requestedId = buffer.readDouble();
        if (this.requestedId < -9007199254740990 || this.requestedId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.requestedId + ") on element of GameFightPlacementSwapPositionsRequestMessage.requestedId.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightReadyMessage extends ProtocolMessage {
    constructor(isReady) {
        super(708);
        this.isReady = isReady;
    }
    serialize() {
        this.buffer.writeBoolean(this.isReady);
    }
    deserialize(buffer) {
        this.isReady = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameFightRemoveTeamMemberMessage extends ProtocolMessage {
    constructor(fightId, teamId, charId) {
        super(711);
        this.fightId = fightId;
        this.teamId = teamId;
        this.charId = charId;
    }
    serialize() {
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeShort(this.fightId);
        this.buffer.writeByte(this.teamId);
        if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.charId + ") on element charId.");
        }
        this.buffer.writeDouble(this.charId);
    }
    deserialize(buffer) {
        this.fightId = buffer.readShort();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of GameFightRemoveTeamMemberMessage.fightId.");
        }
        this.teamId = buffer.readByte();
        if (this.teamId < 0) {
            Logger.error("Forbidden value (" + this.teamId + ") on element of GameFightRemoveTeamMemberMessage.teamId.");
        }
        this.charId = buffer.readDouble();
        if (this.charId < -9007199254740990 || this.charId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.charId + ") on element of GameFightRemoveTeamMemberMessage.charId.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightResumeMessage extends GameFightSpectateMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8) {
        super(param1, param2, param3, param4, param5);
        this.spellCooldowns = param6;
        this.summonCount = param7;
        this.bombCount = param8;
        this.messageId = 6067;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.spellCooldowns.length);
        var _loc2_ = 0;
        while (_loc2_ < this.spellCooldowns.length) {
            this.spellCooldowns[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        if (this.summonCount < 0) {
            Logger.error("Forbidden value (" + this.summonCount + ") on element summonCount.");
        }
        this.buffer.writeByte(this.summonCount);
        if (this.bombCount < 0) {
            Logger.error("Forbidden value (" + this.bombCount + ") on element bombCount.");
        }
        this.buffer.writeByte(this.bombCount);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GameFightSpellCooldown();
            _loc4_.deserialize(buffer);
            this.spellCooldowns.push(_loc4_);
            _loc3_++;
        }
        this.summonCount = buffer.readByte();
        if (this.summonCount < 0) {
            Logger.error("Forbidden value (" + this.summonCount + ") on element of GameFightResumeMessage.summonCount.");
        }
        this.bombCount = buffer.readByte();
        if (this.bombCount < 0) {
            Logger.error("Forbidden value (" + this.bombCount + ") on element of GameFightResumeMessage.bombCount.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightResumeWithSlavesMessage extends GameFightResumeMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9) {
        super(param1, param2, param3, param4, param5, param6, param7, param8);
        this.slavesInfo = param9;
        this.messageId = 6215;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.slavesInfo.length);
        var _loc2_ = 0;
        while (_loc2_ < this.slavesInfo.length) {
            this.slavesInfo[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GameFightResumeSlaveInfo();
            _loc4_.deserialize(buffer);
            this.slavesInfo.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameFightSpectateMessage extends ProtocolMessage {
    constructor(effects, marks, gameTurn, fightStart, idols) {
        super(6069);
        this.effects = effects;
        this.marks = marks;
        this.gameTurn = gameTurn;
        this.fightStart = fightStart;
        this.idols = idols;
    }
    serialize() {
        this.buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.effects[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.marks.length);
        var _loc3_ = 0;
        while (_loc3_ < this.marks.length) {
            this.marks[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
        if (this.gameTurn < 0) {
            Logger.error("Forbidden value (" + this.gameTurn + ") on element gameTurn.");
        }
        this.buffer.writeVarShort(this.gameTurn);
        if (this.fightStart < 0) {
            Logger.error("Forbidden value (" + this.fightStart + ") on element fightStart.");
        }
        this.buffer.writeInt(this.fightStart);
        this.buffer.writeShort(this.idols.length);
        var _loc4_ = 0;
        while (_loc4_ < this.idols.length) {
            this.idols[_loc4_].serialize(this.buffer);
            _loc4_++;
        }
    }
    deserialize(buffer) {
        var _loc8_ = null;
        var _loc9_ = null;
        var _loc10_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = new FightDispellableEffectExtendedInformations();
            _loc8_.deserialize(buffer);
            this.effects.push(_loc8_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc9_ = new GameActionMark();
            _loc9_.deserialize(buffer);
            this.marks.push(_loc9_);
            _loc5_++;
        }
        this.gameTurn = buffer.readVarUhShort();
        if (this.gameTurn < 0) {
            Logger.error("Forbidden value (" + this.gameTurn + ") on element of GameFightSpectateMessage.gameTurn.");
        }
        this.fightStart = buffer.readInt();
        if (this.fightStart < 0) {
            Logger.error("Forbidden value (" + this.fightStart + ") on element of GameFightSpectateMessage.fightStart.");
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc10_ = new Idol();
            _loc10_.deserialize(buffer);
            this.idols.push(_loc10_);
            _loc7_++;
        }
    }
}

// Generated by Noxus messages 
export class GameFightSpectatePlayerRequestMessage extends ProtocolMessage {
    constructor(playerId) {
        super(6474);
        this.playerId = playerId;
    }
    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of GameFightSpectatePlayerRequestMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightSpectatorJoinMessage extends GameFightJoinMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7) {
        super(param1, param2, param3, param4, param5, param6);
        this.namedPartyTeams = param7;
        this.messageId = 6504;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.namedPartyTeams.length);
        var _loc2_ = 0;
        while (_loc2_ < this.namedPartyTeams.length) {
            this.namedPartyTeams[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new NamedPartyTeam();
            _loc4_.deserialize(buffer);
            this.namedPartyTeams.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameFightStartingMessage extends ProtocolMessage {
    constructor(fightType, attackerId, defenderId) {
        super(700);
        this.fightType = fightType;
        this.attackerId = attackerId;
        this.defenderId = defenderId;
    }
    serialize() {
        this.buffer.writeByte(this.fightType);
        if (this.attackerId < -9007199254740990 || this.attackerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.attackerId + ") on element attackerId.");
        }
        this.buffer.writeDouble(this.attackerId);
        if (this.defenderId < -9007199254740990 || this.defenderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.defenderId + ") on element defenderId.");
        }
        this.buffer.writeDouble(this.defenderId);
    }
    deserialize(buffer) {
        this.fightType = buffer.readByte();
        if (this.fightType < 0) {
            Logger.error("Forbidden value (" + this.fightType + ") on element of GameFightStartingMessage.fightType.");
        }
        this.attackerId = buffer.readDouble();
        if (this.attackerId < -9007199254740990 || this.attackerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.attackerId + ") on element of GameFightStartingMessage.attackerId.");
        }
        this.defenderId = buffer.readDouble();
        if (this.defenderId < -9007199254740990 || this.defenderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.defenderId + ") on element of GameFightStartingMessage.defenderId.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightStartMessage extends ProtocolMessage {
    constructor(idols) {
        super(712);
        this.idols = idols;
    }
    serialize() {
        this.buffer.writeShort(this.idols.length);
        var _loc2_ = 0;
        while (_loc2_ < this.idols.length) {
            this.idols[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new Idol();
            _loc4_.deserialize(buffer);
            this.idols.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameFightSynchronizeMessage extends ProtocolMessage {
    constructor(fighters) {
        super(5921);
        this.fighters = fighters;
    }
    serialize() {
        this.buffer.writeShort(this.fighters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.fighters.length) {
            this.buffer.writeShort((this.fighters[_loc2_]).protocolId);
            this.fighters[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(GameFightFighterInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.fighters.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameFightTurnEndMessage extends ProtocolMessage {
    constructor(id) {
        super(719);
        this.id = id;
    }
    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of GameFightTurnEndMessage.id.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightTurnFinishMessage extends ProtocolMessage {
    constructor(isAfk) {
        super(718);
        this.isAfk = isAfk;
    }
    serialize() {
        this.buffer.writeBoolean(this.isAfk);
    }
    deserialize(buffer) {
        this.isAfk = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameFightTurnListMessage extends ProtocolMessage {
    constructor(ids, deadsIds) {
        super(713);
        this.ids = ids;
        this.deadsIds = deadsIds;
    }
    serialize() {
        this.buffer.writeShort(this.ids.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ids.length) {
            if (this.ids[_loc2_] < -9007199254740990 || this.ids[_loc2_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.ids[_loc2_] + ") on element 1 (starting at 1) of ids.");
            }
            this.buffer.writeDouble(this.ids[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.deadsIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.deadsIds.length) {
            if (this.deadsIds[_loc3_] < -9007199254740990 || this.deadsIds[_loc3_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.deadsIds[_loc3_] + ") on element 2 (starting at 1) of deadsIds.");
            }
            this.buffer.writeDouble(this.deadsIds[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readDouble();
            if (_loc6_ < -9007199254740990 || _loc6_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of ids.");
            }
            this.ids.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readDouble();
            if (_loc7_ < -9007199254740990 || _loc7_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of deadsIds.");
            }
            this.deadsIds.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class GameFightTurnReadyMessage extends ProtocolMessage {
    constructor(isReady) {
        super(716);
        this.isReady = isReady;
    }
    serialize() {
        this.buffer.writeBoolean(this.isReady);
    }
    deserialize(buffer) {
        this.isReady = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameFightTurnReadyRequestMessage extends ProtocolMessage {
    constructor(id) {
        super(715);
        this.id = id;
    }
    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of GameFightTurnReadyRequestMessage.id.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightTurnResumeMessage extends GameFightTurnStartMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.remainingTime = param3;
        this.messageId = 6307;
    }
    serialize() {
        super.serialize();
        if (this.remainingTime < 0) {
            Logger.error("Forbidden value (" + this.remainingTime + ") on element remainingTime.");
        }
        this.buffer.writeVarInt(this.remainingTime);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.remainingTime = buffer.readVarUhInt();
        if (this.remainingTime < 0) {
            Logger.error("Forbidden value (" + this.remainingTime + ") on element of GameFightTurnResumeMessage.remainingTime.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightTurnStartMessage extends ProtocolMessage {
    constructor(id, waitTime) {
        super(714);
        this.id = id;
        this.waitTime = waitTime;
    }
    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        if (this.waitTime < 0) {
            Logger.error("Forbidden value (" + this.waitTime + ") on element waitTime.");
        }
        this.buffer.writeVarInt(this.waitTime);
    }
    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of GameFightTurnStartMessage.id.");
        }
        this.waitTime = buffer.readVarUhInt();
        if (this.waitTime < 0) {
            Logger.error("Forbidden value (" + this.waitTime + ") on element of GameFightTurnStartMessage.waitTime.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightTurnStartPlayingMessage extends ProtocolMessage {
constructor) {
    super(6465);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GameFightUpdateTeamMessage extends ProtocolMessage {
    constructor(fightId, team) {
        super(5572);
        this.fightId = fightId;
        this.team = team;
    }
    serialize() {
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeShort(this.fightId);
        this.team.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.fightId = buffer.readShort();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of GameFightUpdateTeamMessage.fightId.");
        }
        this.team = new FightTeamInformations();
        this.team.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class RefreshCharacterStatsMessage extends ProtocolMessage {
    constructor(fighterId, stats) {
        super(6699);
        this.fighterId = fighterId;
        this.stats = stats;
    }
    serialize() {
        if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fighterId + ") on element fighterId.");
        }
        this.buffer.writeDouble(this.fighterId);
        this.stats.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.fighterId = buffer.readDouble();
        if (this.fighterId < -9007199254740990 || this.fighterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fighterId + ") on element of RefreshCharacterStatsMessage.fighterId.");
        }
        this.stats = new GameFightMinimalStats();
        this.stats.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class SlaveSwitchContextMessage extends ProtocolMessage {
    constructor(masterId, slaveId, slaveSpells, slaveStats, shortcuts) {
        super(6214);
        this.masterId = masterId;
        this.slaveId = slaveId;
        this.slaveSpells = slaveSpells;
        this.slaveStats = slaveStats;
        this.shortcuts = shortcuts;
    }
    serialize() {
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.masterId + ") on element masterId.");
        }
        this.buffer.writeDouble(this.masterId);
        if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.slaveId + ") on element slaveId.");
        }
        this.buffer.writeDouble(this.slaveId);
        this.buffer.writeShort(this.slaveSpells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.slaveSpells.length) {
            this.slaveSpells[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.slaveStats.serialize(this.buffer);
        this.buffer.writeShort(this.shortcuts.length);
        var _loc3_ = 0;
        while (_loc3_ < this.shortcuts.length) {
            this.buffer.writeShort((this.shortcuts[_loc3_]).protocolId);
            this.shortcuts[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = 0;
        var _loc8_ = null;
        this.masterId = buffer.readDouble();
        if (this.masterId < -9007199254740990 || this.masterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.masterId + ") on element of SlaveSwitchContextMessage.masterId.");
        }
        this.slaveId = buffer.readDouble();
        if (this.slaveId < -9007199254740990 || this.slaveId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.slaveId + ") on element of SlaveSwitchContextMessage.slaveId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new SpellItem();
            _loc6_.deserialize(buffer);
            this.slaveSpells.push(_loc6_);
            _loc3_++;
        }
        this.slaveStats = new CharacterCharacteristicsInformations();
        this.slaveStats.deserialize(buffer);
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readUnsignedShort();
            _loc8_ = ProtocolTypeManager.getInstance(Shortcut, _loc7_);
            _loc8_.deserialize(buffer);
            this.shortcuts.push(_loc8_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class ArenaFighterLeaveMessage extends ProtocolMessage {
    constructor(leaver) {
        super(6700);
        this.leaver = leaver;
    }
    serialize() {
        this.leaver.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.leaver = new CharacterBasicMinimalInformations();
        this.leaver.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ChallengeInfoMessage extends ProtocolMessage {
    constructor(challengeId, targetId, xpBonus, dropBonus) {
        super(6022);
        this.challengeId = challengeId;
        this.targetId = targetId;
        this.xpBonus = xpBonus;
        this.dropBonus = dropBonus;
    }
    serialize() {
        if (this.challengeId < 0) {
            Logger.error("Forbidden value (" + this.challengeId + ") on element challengeId.");
        }
        this.buffer.writeVarShort(this.challengeId);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.xpBonus < 0) {
            Logger.error("Forbidden value (" + this.xpBonus + ") on element xpBonus.");
        }
        this.buffer.writeVarInt(this.xpBonus);
        if (this.dropBonus < 0) {
            Logger.error("Forbidden value (" + this.dropBonus + ") on element dropBonus.");
        }
        this.buffer.writeVarInt(this.dropBonus);
    }
    deserialize(buffer) {
        this.challengeId = buffer.readVarUhShort();
        if (this.challengeId < 0) {
            Logger.error("Forbidden value (" + this.challengeId + ") on element of ChallengeInfoMessage.challengeId.");
        }
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of ChallengeInfoMessage.targetId.");
        }
        this.xpBonus = buffer.readVarUhInt();
        if (this.xpBonus < 0) {
            Logger.error("Forbidden value (" + this.xpBonus + ") on element of ChallengeInfoMessage.xpBonus.");
        }
        this.dropBonus = buffer.readVarUhInt();
        if (this.dropBonus < 0) {
            Logger.error("Forbidden value (" + this.dropBonus + ") on element of ChallengeInfoMessage.dropBonus.");
        }
    }
}

// Generated by Noxus messages 
export class ChallengeResultMessage extends ProtocolMessage {
    constructor(challengeId, success) {
        super(6019);
        this.challengeId = challengeId;
        this.success = success;
    }
    serialize() {
        if (this.challengeId < 0) {
            Logger.error("Forbidden value (" + this.challengeId + ") on element challengeId.");
        }
        this.buffer.writeVarShort(this.challengeId);
        this.buffer.writeBoolean(this.success);
    }
    deserialize(buffer) {
        this.challengeId = buffer.readVarUhShort();
        if (this.challengeId < 0) {
            Logger.error("Forbidden value (" + this.challengeId + ") on element of ChallengeResultMessage.challengeId.");
        }
        this.success = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class ChallengeTargetsListMessage extends ProtocolMessage {
    constructor(targetIds, targetCells) {
        super(5613);
        this.targetIds = targetIds;
        this.targetCells = targetCells;
    }
    serialize() {
        this.buffer.writeShort(this.targetIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.targetIds.length) {
            if (this.targetIds[_loc2_] < -9007199254740990 || this.targetIds[_loc2_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.targetIds[_loc2_] + ") on element 1 (starting at 1) of targetIds.");
            }
            this.buffer.writeDouble(this.targetIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.targetCells.length);
        var _loc3_ = 0;
        while (_loc3_ < this.targetCells.length) {
            if (this.targetCells[_loc3_] < -1 || this.targetCells[_loc3_] > 559) {
                Logger.error("Forbidden value (" + this.targetCells[_loc3_] + ") on element 2 (starting at 1) of targetCells.");
            }
            this.buffer.writeShort(this.targetCells[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readDouble();
            if (_loc6_ < -9007199254740990 || _loc6_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of targetIds.");
            }
            this.targetIds.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readShort();
            if (_loc7_ < -1 || _loc7_ > 559) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of targetCells.");
            }
            this.targetCells.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class ChallengeTargetsListRequestMessage extends ProtocolMessage {
    constructor(challengeId) {
        super(5614);
        this.challengeId = challengeId;
    }
    serialize() {
        if (this.challengeId < 0) {
            Logger.error("Forbidden value (" + this.challengeId + ") on element challengeId.");
        }
        this.buffer.writeVarShort(this.challengeId);
    }
    deserialize(buffer) {
        this.challengeId = buffer.readVarUhShort();
        if (this.challengeId < 0) {
            Logger.error("Forbidden value (" + this.challengeId + ") on element of ChallengeTargetsListRequestMessage.challengeId.");
        }
    }
}

// Generated by Noxus messages 
export class ChallengeTargetUpdateMessage extends ProtocolMessage {
    constructor(challengeId, targetId) {
        super(6123);
        this.challengeId = challengeId;
        this.targetId = targetId;
    }
    serialize() {
        if (this.challengeId < 0) {
            Logger.error("Forbidden value (" + this.challengeId + ") on element challengeId.");
        }
        this.buffer.writeVarShort(this.challengeId);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }
    deserialize(buffer) {
        this.challengeId = buffer.readVarUhShort();
        if (this.challengeId < 0) {
            Logger.error("Forbidden value (" + this.challengeId + ") on element of ChallengeTargetUpdateMessage.challengeId.");
        }
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of ChallengeTargetUpdateMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class GameFightRefreshFighterMessage extends ProtocolMessage {
    constructor(informations) {
        super(6309);
        this.informations = informations;
    }
    serialize() {
        this.buffer.writeShort(this.informations.protocolId);
        this.informations.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.informations = ProtocolTypeManager.getInstance(GameContextActorInformations, _loc2_);
        this.informations.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameFightShowFighterMessage extends ProtocolMessage {
    constructor(informations) {
        super(5864);
        this.informations = informations;
    }
    serialize() {
        this.buffer.writeShort(this.informations.protocolId);
        this.informations.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.informations = ProtocolTypeManager.getInstance(GameFightFighterInformations, _loc2_);
        this.informations.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameFightShowFighterRandomStaticPoseMessage extends GameFightShowFighterMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6218;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameDataPaddockObjectAddMessage extends ProtocolMessage {
    constructor(paddockItemDescription) {
        super(5990);
        this.paddockItemDescription = paddockItemDescription;
    }
    serialize() {
        this.paddockItemDescription.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.paddockItemDescription = new PaddockItem();
        this.paddockItemDescription.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameDataPaddockObjectListAddMessage extends ProtocolMessage {
    constructor(paddockItemDescription) {
        super(5992);
        this.paddockItemDescription = paddockItemDescription;
    }
    serialize() {
        this.buffer.writeShort(this.paddockItemDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.paddockItemDescription.length) {
            this.paddockItemDescription[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PaddockItem();
            _loc4_.deserialize(buffer);
            this.paddockItemDescription.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameDataPaddockObjectRemoveMessage extends ProtocolMessage {
    constructor(cellId) {
        super(5993);
        this.cellId = cellId;
    }
    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }
    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of GameDataPaddockObjectRemoveMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class MountDataErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6172);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of MountDataErrorMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class MountDataMessage extends ProtocolMessage {
    constructor(mountData) {
        super(5973);
        this.mountData = mountData;
    }
    serialize() {
        this.mountData.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.mountData = new MountClientData();
        this.mountData.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class MountEmoteIconUsedOkMessage extends ProtocolMessage {
    constructor(mountId, reactionType) {
        super(5978);
        this.mountId = mountId;
        this.reactionType = reactionType;
    }
    serialize() {
        this.buffer.writeVarInt(this.mountId);
        if (this.reactionType < 0) {
            Logger.error("Forbidden value (" + this.reactionType + ") on element reactionType.");
        }
        this.buffer.writeByte(this.reactionType);
    }
    deserialize(buffer) {
        this.mountId = buffer.readVarInt();
        this.reactionType = buffer.readByte();
        if (this.reactionType < 0) {
            Logger.error("Forbidden value (" + this.reactionType + ") on element of MountEmoteIconUsedOkMessage.reactionType.");
        }
    }
}

// Generated by Noxus messages 
export class MountEquipedErrorMessage extends ProtocolMessage {
    constructor(errorType) {
        super(5963);
        this.errorType = errorType;
    }
    serialize() {
        this.buffer.writeByte(this.errorType);
    }
    deserialize(buffer) {
        this.errorType = buffer.readByte();
        if (this.errorType < 0) {
            Logger.error("Forbidden value (" + this.errorType + ") on element of MountEquipedErrorMessage.errorType.");
        }
    }
}

// Generated by Noxus messages 
export class MountFeedRequestMessage extends ProtocolMessage {
    constructor(mountUid, mountLocation, mountFoodUid, quantity) {
        super(6189);
        this.mountUid = mountUid;
        this.mountLocation = mountLocation;
        this.mountFoodUid = mountFoodUid;
        this.quantity = quantity;
    }
    serialize() {
        if (this.mountUid < 0) {
            Logger.error("Forbidden value (" + this.mountUid + ") on element mountUid.");
        }
        this.buffer.writeVarInt(this.mountUid);
        this.buffer.writeByte(this.mountLocation);
        if (this.mountFoodUid < 0) {
            Logger.error("Forbidden value (" + this.mountFoodUid + ") on element mountFoodUid.");
        }
        this.buffer.writeVarInt(this.mountFoodUid);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        this.mountUid = buffer.readVarUhInt();
        if (this.mountUid < 0) {
            Logger.error("Forbidden value (" + this.mountUid + ") on element of MountFeedRequestMessage.mountUid.");
        }
        this.mountLocation = buffer.readByte();
        this.mountFoodUid = buffer.readVarUhInt();
        if (this.mountFoodUid < 0) {
            Logger.error("Forbidden value (" + this.mountFoodUid + ") on element of MountFeedRequestMessage.mountFoodUid.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of MountFeedRequestMessage.quantity.");
        }
    }
}

// Generated by Noxus messages 
export class MountHarnessColorsUpdateRequestMessage extends ProtocolMessage {
    constructor(useHarnessColors) {
        super(6697);
        this.useHarnessColors = useHarnessColors;
    }
    serialize() {
        this.buffer.writeBoolean(this.useHarnessColors);
    }
    deserialize(buffer) {
        this.useHarnessColors = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class MountHarnessDissociateRequestMessage extends ProtocolMessage {
constructor) {
    super(6696);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class MountInformationInPaddockRequestMessage extends ProtocolMessage {
    constructor(mapRideId) {
        super(5975);
        this.mapRideId = mapRideId;
    }
    serialize() {
        this.buffer.writeVarInt(this.mapRideId);
    }
    deserialize(buffer) {
        this.mapRideId = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class MountInformationRequestMessage extends ProtocolMessage {
    constructor(id, time) {
        super(5972);
        this.id = id;
        this.time = time;
    }
    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        if (this.time < -9007199254740990 || this.time > 9007199254740990) {
            Logger.error("Forbidden value (" + this.time + ") on element time.");
        }
        this.buffer.writeDouble(this.time);
    }
    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of MountInformationRequestMessage.id.");
        }
        this.time = buffer.readDouble();
        if (this.time < -9007199254740990 || this.time > 9007199254740990) {
            Logger.error("Forbidden value (" + this.time + ") on element of MountInformationRequestMessage.time.");
        }
    }
}

// Generated by Noxus messages 
export class MountReleasedMessage extends ProtocolMessage {
    constructor(mountId) {
        super(6308);
        this.mountId = mountId;
    }
    serialize() {
        this.buffer.writeVarInt(this.mountId);
    }
    deserialize(buffer) {
        this.mountId = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class MountReleaseRequestMessage extends ProtocolMessage {
constructor) {
    super(5980);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class MountRenamedMessage extends ProtocolMessage {
    constructor(mountId, name) {
        super(5983);
        this.mountId = mountId;
        this.name = name;
    }
    serialize() {
        this.buffer.writeVarInt(this.mountId);
        this.buffer.writeUTF(this.name);
    }
    deserialize(buffer) {
        this.mountId = buffer.readVarInt();
        this.name = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class MountRenameRequestMessage extends ProtocolMessage {
    constructor(name, mountId) {
        super(5987);
        this.name = name;
        this.mountId = mountId;
    }
    serialize() {
        this.buffer.writeUTF(this.name);
        this.buffer.writeVarInt(this.mountId);
    }
    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.mountId = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class MountRidingMessage extends ProtocolMessage {
    constructor(isRiding) {
        super(5967);
        this.isRiding = isRiding;
    }
    serialize() {
        this.buffer.writeBoolean(this.isRiding);
    }
    deserialize(buffer) {
        this.isRiding = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class MountSetMessage extends ProtocolMessage {
    constructor(mountData) {
        super(5968);
        this.mountData = mountData;
    }
    serialize() {
        this.mountData.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.mountData = new MountClientData();
        this.mountData.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class MountSetXpRatioRequestMessage extends ProtocolMessage {
    constructor(xpRatio) {
        super(5989);
        this.xpRatio = xpRatio;
    }
    serialize() {
        if (this.xpRatio < 0) {
            Logger.error("Forbidden value (" + this.xpRatio + ") on element xpRatio.");
        }
        this.buffer.writeByte(this.xpRatio);
    }
    deserialize(buffer) {
        this.xpRatio = buffer.readByte();
        if (this.xpRatio < 0) {
            Logger.error("Forbidden value (" + this.xpRatio + ") on element of MountSetXpRatioRequestMessage.xpRatio.");
        }
    }
}

// Generated by Noxus messages 
export class MountSterilizedMessage extends ProtocolMessage {
    constructor(mountId) {
        super(5977);
        this.mountId = mountId;
    }
    serialize() {
        this.buffer.writeVarInt(this.mountId);
    }
    deserialize(buffer) {
        this.mountId = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class MountSterilizeRequestMessage extends ProtocolMessage {
constructor) {
    super(5962);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class MountToggleRidingRequestMessage extends ProtocolMessage {
constructor) {
    super(5976);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class MountUnSetMessage extends ProtocolMessage {
constructor) {
    super(5982);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class MountXpRatioMessage extends ProtocolMessage {
    constructor(ratio) {
        super(5970);
        this.ratio = ratio;
    }
    serialize() {
        if (this.ratio < 0) {
            Logger.error("Forbidden value (" + this.ratio + ") on element ratio.");
        }
        this.buffer.writeByte(this.ratio);
    }
    deserialize(buffer) {
        this.ratio = buffer.readByte();
        if (this.ratio < 0) {
            Logger.error("Forbidden value (" + this.ratio + ") on element of MountXpRatioMessage.ratio.");
        }
    }
}

// Generated by Noxus messages 
export class PaddockBuyRequestMessage extends ProtocolMessage {
    constructor(proposedPrice) {
        super(5951);
        this.proposedPrice = proposedPrice;
    }
    serialize() {
        if (this.proposedPrice < 0) {
            Logger.error("Forbidden value (" + this.proposedPrice + ") on element proposedPrice.");
        }
        this.buffer.writeVarInt(this.proposedPrice);
    }
    deserialize(buffer) {
        this.proposedPrice = buffer.readVarUhInt();
        if (this.proposedPrice < 0) {
            Logger.error("Forbidden value (" + this.proposedPrice + ") on element of PaddockBuyRequestMessage.proposedPrice.");
        }
    }
}

// Generated by Noxus messages 
export class PaddockBuyResultMessage extends ProtocolMessage {
    constructor(paddockId, bought, realPrice) {
        super(6516);
        this.paddockId = paddockId;
        this.bought = bought;
        this.realPrice = realPrice;
    }
    serialize() {
        this.buffer.writeInt(this.paddockId);
        this.buffer.writeBoolean(this.bought);
        if (this.realPrice < 0) {
            Logger.error("Forbidden value (" + this.realPrice + ") on element realPrice.");
        }
        this.buffer.writeVarInt(this.realPrice);
    }
    deserialize(buffer) {
        this.paddockId = buffer.readInt();
        this.bought = buffer.readBoolean();
        this.realPrice = buffer.readVarUhInt();
        if (this.realPrice < 0) {
            Logger.error("Forbidden value (" + this.realPrice + ") on element of PaddockBuyResultMessage.realPrice.");
        }
    }
}

// Generated by Noxus messages 
export class PaddockMoveItemRequestMessage extends ProtocolMessage {
    constructor(oldCellId, newCellId) {
        super(6052);
        this.oldCellId = oldCellId;
        this.newCellId = newCellId;
    }
    serialize() {
        if (this.oldCellId < 0 || this.oldCellId > 559) {
            Logger.error("Forbidden value (" + this.oldCellId + ") on element oldCellId.");
        }
        this.buffer.writeVarShort(this.oldCellId);
        if (this.newCellId < 0 || this.newCellId > 559) {
            Logger.error("Forbidden value (" + this.newCellId + ") on element newCellId.");
        }
        this.buffer.writeVarShort(this.newCellId);
    }
    deserialize(buffer) {
        this.oldCellId = buffer.readVarUhShort();
        if (this.oldCellId < 0 || this.oldCellId > 559) {
            Logger.error("Forbidden value (" + this.oldCellId + ") on element of PaddockMoveItemRequestMessage.oldCellId.");
        }
        this.newCellId = buffer.readVarUhShort();
        if (this.newCellId < 0 || this.newCellId > 559) {
            Logger.error("Forbidden value (" + this.newCellId + ") on element of PaddockMoveItemRequestMessage.newCellId.");
        }
    }
}

// Generated by Noxus messages 
export class PaddockRemoveItemRequestMessage extends ProtocolMessage {
    constructor(cellId) {
        super(5958);
        this.cellId = cellId;
    }
    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }
    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of PaddockRemoveItemRequestMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class PaddockSellRequestMessage extends ProtocolMessage {
    constructor(price, forSale) {
        super(5953);
        this.price = price;
        this.forSale = forSale;
    }
    serialize() {
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarInt(this.price);
        this.buffer.writeBoolean(this.forSale);
    }
    deserialize(buffer) {
        this.price = buffer.readVarUhInt();
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element of PaddockSellRequestMessage.price.");
        }
        this.forSale = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class NotificationByServerMessage extends ProtocolMessage {
    constructor(id, parameters, forceOpen) {
        super(6103);
        this.id = id;
        this.parameters = parameters;
        this.forceOpen = forceOpen;
    }
    serialize() {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarShort(this.id);
        this.buffer.writeShort(this.parameters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parameters.length) {
            this.buffer.writeUTF(this.parameters[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeBoolean(this.forceOpen);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of NotificationByServerMessage.id.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.parameters.push(_loc4_);
            _loc3_++;
        }
        this.forceOpen = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class NotificationListMessage extends ProtocolMessage {
    constructor(flags) {
        super(6087);
        this.flags = flags;
    }
    serialize() {
        this.buffer.writeShort(this.flags.length);
        var _loc2_ = 0;
        while (_loc2_ < this.flags.length) {
            this.buffer.writeVarInt(this.flags[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarInt();
            this.flags.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class NotificationResetMessage extends ProtocolMessage {
constructor) {
    super(6089);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class NotificationUpdateFlagMessage extends ProtocolMessage {
    constructor(index) {
        super(6090);
        this.index = index;
    }
    serialize() {
        if (this.index < 0) {
            Logger.error("Forbidden value (" + this.index + ") on element index.");
        }
        this.buffer.writeVarShort(this.index);
    }
    deserialize(buffer) {
        this.index = buffer.readVarUhShort();
        if (this.index < 0) {
            Logger.error("Forbidden value (" + this.index + ") on element of NotificationUpdateFlagMessage.index.");
        }
    }
}

// Generated by Noxus messages 
export class ChangeMapMessage extends ProtocolMessage {
    constructor(mapId) {
        super(221);
        this.mapId = mapId;
    }
    serialize() {
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }
    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element of ChangeMapMessage.mapId.");
        }
    }
}

// Generated by Noxus messages 
export class CurrentMapMessage extends ProtocolMessage {
    constructor(mapId, mapKey) {
        super(220);
        this.mapId = mapId;
        this.mapKey = mapKey;
    }
    serialize() {
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
        this.buffer.writeUTF(this.mapKey);
    }
    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element of CurrentMapMessage.mapId.");
        }
        this.mapKey = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class ErrorMapNotFoundMessage extends ProtocolMessage {
    constructor(mapId) {
        super(6197);
        this.mapId = mapId;
    }
    serialize() {
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }
    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element of ErrorMapNotFoundMessage.mapId.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayShowActorMessage extends ProtocolMessage {
    constructor(informations) {
        super(5632);
        this.informations = informations;
    }
    serialize() {
        this.buffer.writeShort(this.informations.protocolId);
        this.informations.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.informations = ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _loc2_);
        this.informations.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameRolePlayShowActorWithEventMessage extends GameRolePlayShowActorMessage {
    constructor(param1, param2) {
        super(param1);
        this.actorEventId = param2;
        this.messageId = 6407;
    }
    serialize() {
        super.serialize();
        if (this.actorEventId < 0) {
            Logger.error("Forbidden value (" + this.actorEventId + ") on element actorEventId.");
        }
        this.buffer.writeByte(this.actorEventId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.actorEventId = buffer.readByte();
        if (this.actorEventId < 0) {
            Logger.error("Forbidden value (" + this.actorEventId + ") on element of GameRolePlayShowActorWithEventMessage.actorEventId.");
        }
    }
}

// Generated by Noxus messages 
export class MapComplementaryInformationsDataInHavenBagMessage extends MapComplementaryInformationsDataMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9);
        this.ownerInformations = param10;
        this.theme = param11;
        this.roomId = param12;
        this.maxRoomId = param13;
        this.messageId = 6622;
    }
    serialize() {
        super.serialize();
        this.ownerInformations.serialize(this.buffer);
        this.buffer.writeByte(this.theme);
        if (this.roomId < 0) {
            Logger.error("Forbidden value (" + this.roomId + ") on element roomId.");
        }
        this.buffer.writeByte(this.roomId);
        if (this.maxRoomId < 0) {
            Logger.error("Forbidden value (" + this.maxRoomId + ") on element maxRoomId.");
        }
        this.buffer.writeByte(this.maxRoomId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.ownerInformations = new CharacterMinimalInformations();
        this.ownerInformations.deserialize(buffer);
        this.theme = buffer.readByte();
        this.roomId = buffer.readByte();
        if (this.roomId < 0) {
            Logger.error("Forbidden value (" + this.roomId + ") on element of MapComplementaryInformationsDataInHavenBagMessage.roomId.");
        }
        this.maxRoomId = buffer.readByte();
        if (this.maxRoomId < 0) {
            Logger.error("Forbidden value (" + this.maxRoomId + ") on element of MapComplementaryInformationsDataInHavenBagMessage.maxRoomId.");
        }
    }
}

// Generated by Noxus messages 
export class MapComplementaryInformationsDataInHouseMessage extends MapComplementaryInformationsDataMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9);
        this.currentHouse = param10;
        this.messageId = 6130;
    }
    serialize() {
        super.serialize();
        this.currentHouse.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.currentHouse = new HouseInformationsInside();
        this.currentHouse.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class MapComplementaryInformationsDataMessage extends ProtocolMessage {
    constructor(subAreaId, mapId, houses, actors, interactiveElements, statedElements, obstacles, fights, hasAggressiveMonsters) {
        super(226);
        this.subAreaId = subAreaId;
        this.mapId = mapId;
        this.houses = houses;
        this.actors = actors;
        this.interactiveElements = interactiveElements;
        this.statedElements = statedElements;
        this.obstacles = obstacles;
        this.fights = fights;
        this.hasAggressiveMonsters = hasAggressiveMonsters;
    }
    serialize() {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
        this.buffer.writeShort(this.houses.length);
        var _loc2_ = 0;
        while (_loc2_ < this.houses.length) {
            this.buffer.writeShort((this.houses[_loc2_]).protocolId);
            this.houses[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.actors.length);
        var _loc3_ = 0;
        while (_loc3_ < this.actors.length) {
            this.buffer.writeShort((this.actors[_loc3_]).protocolId);
            this.actors[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
        this.buffer.writeShort(this.interactiveElements.length);
        var _loc4_ = 0;
        while (_loc4_ < this.interactiveElements.length) {
            this.buffer.writeShort((this.interactiveElements[_loc4_]).protocolId);
            this.interactiveElements[_loc4_].serialize(this.buffer);
            _loc4_++;
        }
        this.buffer.writeShort(this.statedElements.length);
        var _loc5_ = 0;
        while (_loc5_ < this.statedElements.length) {
            this.statedElements[_loc5_].serialize(this.buffer);
            _loc5_++;
        }
        this.buffer.writeShort(this.obstacles.length);
        var _loc6_ = 0;
        while (_loc6_ < this.obstacles.length) {
            this.obstacles[_loc6_].serialize(this.buffer);
            _loc6_++;
        }
        this.buffer.writeShort(this.fights.length);
        var _loc7_ = 0;
        while (_loc7_ < this.fights.length) {
            this.fights[_loc7_].serialize(this.buffer);
            _loc7_++;
        }
        this.buffer.writeBoolean(this.hasAggressiveMonsters);
    }
    deserialize(buffer) {
        var _loc14_ = 0;
        var _loc15_ = null;
        var _loc16_ = 0;
        var _loc17_ = null;
        var _loc18_ = 0;
        var _loc19_ = null;
        var _loc20_ = null;
        var _loc21_ = null;
        var _loc22_ = null;
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of MapComplementaryInformationsDataMessage.subAreaId.");
        }
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element of MapComplementaryInformationsDataMessage.mapId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc14_ = buffer.readUnsignedShort();
            _loc15_ = ProtocolTypeManager.getInstance(HouseInformations, _loc14_);
            _loc15_.deserialize(buffer);
            this.houses.push(_loc15_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc16_ = buffer.readUnsignedShort();
            _loc17_ = ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _loc16_);
            _loc17_.deserialize(buffer);
            this.actors.push(_loc17_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc18_ = buffer.readUnsignedShort();
            _loc19_ = ProtocolTypeManager.getInstance(InteractiveElement, _loc18_);
            _loc19_.deserialize(buffer);
            this.interactiveElements.push(_loc19_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc20_ = new StatedElement();
            _loc20_.deserialize(buffer);
            this.statedElements.push(_loc20_);
            _loc9_++;
        }
        var _loc10_ = buffer.readUnsignedShort();
        var _loc11_ = 0;
        while (_loc11_ < _loc10_) {
            _loc21_ = new MapObstacle();
            _loc21_.deserialize(buffer);
            this.obstacles.push(_loc21_);
            _loc11_++;
        }
        var _loc12_ = buffer.readUnsignedShort();
        var _loc13_ = 0;
        while (_loc13_ < _loc12_) {
            _loc22_ = new FightCommonInformations();
            _loc22_.deserialize(buffer);
            this.fights.push(_loc22_);
            _loc13_++;
        }
        this.hasAggressiveMonsters = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class MapComplementaryInformationsWithCoordsMessage extends MapComplementaryInformationsDataMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9);
        this.worldX = param10;
        this.worldY = param11;
        this.messageId = 6268;
    }
    serialize() {
        super.serialize();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of MapComplementaryInformationsWithCoordsMessage.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of MapComplementaryInformationsWithCoordsMessage.worldY.");
        }
    }
}

// Generated by Noxus messages 
export class MapFightCountMessage extends ProtocolMessage {
    constructor(fightCount) {
        super(210);
        this.fightCount = fightCount;
    }
    serialize() {
        if (this.fightCount < 0) {
            Logger.error("Forbidden value (" + this.fightCount + ") on element fightCount.");
        }
        this.buffer.writeVarShort(this.fightCount);
    }
    deserialize(buffer) {
        this.fightCount = buffer.readVarUhShort();
        if (this.fightCount < 0) {
            Logger.error("Forbidden value (" + this.fightCount + ") on element of MapFightCountMessage.fightCount.");
        }
    }
}

// Generated by Noxus messages 
export class MapInformationsRequestMessage extends ProtocolMessage {
    constructor(mapId) {
        super(225);
        this.mapId = mapId;
    }
    serialize() {
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }
    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element of MapInformationsRequestMessage.mapId.");
        }
    }
}

// Generated by Noxus messages 
export class MapObstacleUpdateMessage extends ProtocolMessage {
    constructor(obstacles) {
        super(6051);
        this.obstacles = obstacles;
    }
    serialize() {
        this.buffer.writeShort(this.obstacles.length);
        var _loc2_ = 0;
        while (_loc2_ < this.obstacles.length) {
            this.obstacles[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MapObstacle();
            _loc4_.deserialize(buffer);
            this.obstacles.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class MapRunningFightDetailsExtendedMessage extends MapRunningFightDetailsMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2, param3);
        this.namedPartyTeams = param4;
        this.messageId = 6500;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.namedPartyTeams.length);
        var _loc2_ = 0;
        while (_loc2_ < this.namedPartyTeams.length) {
            this.namedPartyTeams[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new NamedPartyTeam();
            _loc4_.deserialize(buffer);
            this.namedPartyTeams.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class MapRunningFightDetailsMessage extends ProtocolMessage {
    constructor(fightId, attackers, defenders) {
        super(5751);
        this.fightId = fightId;
        this.attackers = attackers;
        this.defenders = defenders;
    }
    serialize() {
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        this.buffer.writeShort(this.attackers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.attackers.length) {
            this.buffer.writeShort((this.attackers[_loc2_]).protocolId);
            this.attackers[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.defenders.length);
        var _loc3_ = 0;
        while (_loc3_ < this.defenders.length) {
            this.buffer.writeShort((this.defenders[_loc3_]).protocolId);
            this.defenders[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = 0;
        var _loc9_ = null;
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of MapRunningFightDetailsMessage.fightId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(GameFightFighterLightInformations, _loc6_);
            _loc7_.deserialize(buffer);
            this.attackers.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readUnsignedShort();
            _loc9_ = ProtocolTypeManager.getInstance(GameFightFighterLightInformations, _loc8_);
            _loc9_.deserialize(buffer);
            this.defenders.push(_loc9_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class MapRunningFightDetailsRequestMessage extends ProtocolMessage {
    constructor(fightId) {
        super(5750);
        this.fightId = fightId;
    }
    serialize() {
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of MapRunningFightDetailsRequestMessage.fightId.");
        }
    }
}

// Generated by Noxus messages 
export class MapRunningFightListMessage extends ProtocolMessage {
    constructor(fights) {
        super(5743);
        this.fights = fights;
    }
    serialize() {
        this.buffer.writeShort(this.fights.length);
        var _loc2_ = 0;
        while (_loc2_ < this.fights.length) {
            this.fights[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new FightExternalInformations();
            _loc4_.deserialize(buffer);
            this.fights.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class MapRunningFightListRequestMessage extends ProtocolMessage {
constructor) {
    super(5742);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class StopToListenRunningFightRequestMessage extends ProtocolMessage {
constructor) {
    super(6124);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class TeleportOnSameMapMessage extends ProtocolMessage {
    constructor(targetId, cellId) {
        super(6048);
        this.targetId = targetId;
        this.cellId = cellId;
    }
    serialize() {
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }
    deserialize(buffer) {
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of TeleportOnSameMapMessage.targetId.");
        }
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of TeleportOnSameMapMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayFreeSoulRequestMessage extends ProtocolMessage {
constructor) {
    super(745);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GameRolePlayGameOverMessage extends ProtocolMessage {
constructor) {
    super(746);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GameRolePlayPlayerLifeStatusMessage extends ProtocolMessage {
    constructor(state, phenixMapId) {
        super(5996);
        this.state = state;
        this.phenixMapId = phenixMapId;
    }
    serialize() {
        this.buffer.writeByte(this.state);
        if (this.phenixMapId < 0) {
            Logger.error("Forbidden value (" + this.phenixMapId + ") on element phenixMapId.");
        }
        this.buffer.writeInt(this.phenixMapId);
    }
    deserialize(buffer) {
        this.state = buffer.readByte();
        if (this.state < 0) {
            Logger.error("Forbidden value (" + this.state + ") on element of GameRolePlayPlayerLifeStatusMessage.state.");
        }
        this.phenixMapId = buffer.readInt();
        if (this.phenixMapId < 0) {
            Logger.error("Forbidden value (" + this.phenixMapId + ") on element of GameRolePlayPlayerLifeStatusMessage.phenixMapId.");
        }
    }
}

// Generated by Noxus messages 
export class WarnOnPermaDeathMessage extends ProtocolMessage {
    constructor(enable) {
        super(6512);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameRolePlayDelayedActionFinishedMessage extends ProtocolMessage {
    constructor(delayedCharacterId, delayTypeId) {
        super(6150);
        this.delayedCharacterId = delayedCharacterId;
        this.delayTypeId = delayTypeId;
    }
    serialize() {
        if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.delayedCharacterId + ") on element delayedCharacterId.");
        }
        this.buffer.writeDouble(this.delayedCharacterId);
        this.buffer.writeByte(this.delayTypeId);
    }
    deserialize(buffer) {
        this.delayedCharacterId = buffer.readDouble();
        if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.delayedCharacterId + ") on element of GameRolePlayDelayedActionFinishedMessage.delayedCharacterId.");
        }
        this.delayTypeId = buffer.readByte();
        if (this.delayTypeId < 0) {
            Logger.error("Forbidden value (" + this.delayTypeId + ") on element of GameRolePlayDelayedActionFinishedMessage.delayTypeId.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayDelayedActionMessage extends ProtocolMessage {
    constructor(delayedCharacterId, delayTypeId, delayEndTime) {
        super(6153);
        this.delayedCharacterId = delayedCharacterId;
        this.delayTypeId = delayTypeId;
        this.delayEndTime = delayEndTime;
    }
    serialize() {
        if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.delayedCharacterId + ") on element delayedCharacterId.");
        }
        this.buffer.writeDouble(this.delayedCharacterId);
        this.buffer.writeByte(this.delayTypeId);
        if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.delayEndTime + ") on element delayEndTime.");
        }
        this.buffer.writeDouble(this.delayEndTime);
    }
    deserialize(buffer) {
        this.delayedCharacterId = buffer.readDouble();
        if (this.delayedCharacterId < -9007199254740990 || this.delayedCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.delayedCharacterId + ") on element of GameRolePlayDelayedActionMessage.delayedCharacterId.");
        }
        this.delayTypeId = buffer.readByte();
        if (this.delayTypeId < 0) {
            Logger.error("Forbidden value (" + this.delayTypeId + ") on element of GameRolePlayDelayedActionMessage.delayTypeId.");
        }
        this.delayEndTime = buffer.readDouble();
        if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.delayEndTime + ") on element of GameRolePlayDelayedActionMessage.delayEndTime.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayDelayedObjectUseMessage extends GameRolePlayDelayedActionMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2, param3);
        this.objectGID = param4;
        this.messageId = 6425;
    }
    serialize() {
        super.serialize();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element of GameRolePlayDelayedObjectUseMessage.objectGID.");
        }
    }
}

// Generated by Noxus messages 
export class ComicReadingBeginMessage extends ProtocolMessage {
    constructor(comicId) {
        super(6536);
        this.comicId = comicId;
    }
    serialize() {
        if (this.comicId < 0) {
            Logger.error("Forbidden value (" + this.comicId + ") on element comicId.");
        }
        this.buffer.writeVarShort(this.comicId);
    }
    deserialize(buffer) {
        this.comicId = buffer.readVarUhShort();
        if (this.comicId < 0) {
            Logger.error("Forbidden value (" + this.comicId + ") on element of ComicReadingBeginMessage.comicId.");
        }
    }
}

// Generated by Noxus messages 
export class DocumentReadingBeginMessage extends ProtocolMessage {
    constructor(documentId) {
        super(5675);
        this.documentId = documentId;
    }
    serialize() {
        if (this.documentId < 0) {
            Logger.error("Forbidden value (" + this.documentId + ") on element documentId.");
        }
        this.buffer.writeVarShort(this.documentId);
    }
    deserialize(buffer) {
        this.documentId = buffer.readVarUhShort();
        if (this.documentId < 0) {
            Logger.error("Forbidden value (" + this.documentId + ") on element of DocumentReadingBeginMessage.documentId.");
        }
    }
}

// Generated by Noxus messages 
export class EmoteAddMessage extends ProtocolMessage {
    constructor(emoteId) {
        super(5644);
        this.emoteId = emoteId;
    }
    serialize() {
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
    }
    deserialize(buffer) {
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element of EmoteAddMessage.emoteId.");
        }
    }
}

// Generated by Noxus messages 
export class EmoteListMessage extends ProtocolMessage {
    constructor(emoteIds) {
        super(5689);
        this.emoteIds = emoteIds;
    }
    serialize() {
        this.buffer.writeShort(this.emoteIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.emoteIds.length) {
            if (this.emoteIds[_loc2_] < 0 || this.emoteIds[_loc2_] > 255) {
                Logger.error("Forbidden value (" + this.emoteIds[_loc2_] + ") on element 1 (starting at 1) of emoteIds.");
            }
            this.buffer.writeByte(this.emoteIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedByte();
            if (_loc4_ < 0 || _loc4_ > 255) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of emoteIds.");
            }
            this.emoteIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class EmotePlayAbstractMessage extends ProtocolMessage {
    constructor(emoteId, emoteStartTime) {
        super(5690);
        this.emoteId = emoteId;
        this.emoteStartTime = emoteStartTime;
    }
    serialize() {
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
        if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.emoteStartTime + ") on element emoteStartTime.");
        }
        this.buffer.writeDouble(this.emoteStartTime);
    }
    deserialize(buffer) {
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element of EmotePlayAbstractMessage.emoteId.");
        }
        this.emoteStartTime = buffer.readDouble();
        if (this.emoteStartTime < -9007199254740990 || this.emoteStartTime > 9007199254740990) {
            Logger.error("Forbidden value (" + this.emoteStartTime + ") on element of EmotePlayAbstractMessage.emoteStartTime.");
        }
    }
}

// Generated by Noxus messages 
export class EmotePlayErrorMessage extends ProtocolMessage {
    constructor(emoteId) {
        super(5688);
        this.emoteId = emoteId;
    }
    serialize() {
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
    }
    deserialize(buffer) {
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element of EmotePlayErrorMessage.emoteId.");
        }
    }
}

// Generated by Noxus messages 
export class EmotePlayMassiveMessage extends EmotePlayAbstractMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.actorIds = param3;
        this.messageId = 5691;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.actorIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.actorIds.length) {
            if (this.actorIds[_loc2_] < -9007199254740990 || this.actorIds[_loc2_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.actorIds[_loc2_] + ") on element 1 (starting at 1) of actorIds.");
            }
            this.buffer.writeDouble(this.actorIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readDouble();
            if (_loc4_ < -9007199254740990 || _loc4_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of actorIds.");
            }
            this.actorIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class EmotePlayMessage extends EmotePlayAbstractMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.actorId = param3;
        this.accountId = param4;
        this.messageId = 5683;
    }
    serialize() {
        super.serialize();
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.actorId + ") on element actorId.");
        }
        this.buffer.writeDouble(this.actorId);
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.actorId = buffer.readDouble();
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.actorId + ") on element of EmotePlayMessage.actorId.");
        }
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of EmotePlayMessage.accountId.");
        }
    }
}

// Generated by Noxus messages 
export class EmotePlayRequestMessage extends ProtocolMessage {
    constructor(emoteId) {
        super(5685);
        this.emoteId = emoteId;
    }
    serialize() {
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
    }
    deserialize(buffer) {
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element of EmotePlayRequestMessage.emoteId.");
        }
    }
}

// Generated by Noxus messages 
export class EmoteRemoveMessage extends ProtocolMessage {
    constructor(emoteId) {
        super(5687);
        this.emoteId = emoteId;
    }
    serialize() {
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element emoteId.");
        }
        this.buffer.writeByte(this.emoteId);
    }
    deserialize(buffer) {
        this.emoteId = buffer.readUnsignedByte();
        if (this.emoteId < 0 || this.emoteId > 255) {
            Logger.error("Forbidden value (" + this.emoteId + ") on element of EmoteRemoveMessage.emoteId.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayAggressionMessage extends ProtocolMessage {
    constructor(attackerId, defenderId) {
        super(6073);
        this.attackerId = attackerId;
        this.defenderId = defenderId;
    }
    serialize() {
        if (this.attackerId < 0 || this.attackerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.attackerId + ") on element attackerId.");
        }
        this.buffer.writeVarLong(this.attackerId);
        if (this.defenderId < 0 || this.defenderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.defenderId + ") on element defenderId.");
        }
        this.buffer.writeVarLong(this.defenderId);
    }
    deserialize(buffer) {
        this.attackerId = buffer.readVarUhLong();
        if (this.attackerId < 0 || this.attackerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.attackerId + ") on element of GameRolePlayAggressionMessage.attackerId.");
        }
        this.defenderId = buffer.readVarUhLong();
        if (this.defenderId < 0 || this.defenderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.defenderId + ") on element of GameRolePlayAggressionMessage.defenderId.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayAttackMonsterRequestMessage extends ProtocolMessage {
    constructor(monsterGroupId) {
        super(6191);
        this.monsterGroupId = monsterGroupId;
    }
    serialize() {
        if (this.monsterGroupId < -9007199254740990 || this.monsterGroupId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.monsterGroupId + ") on element monsterGroupId.");
        }
        this.buffer.writeDouble(this.monsterGroupId);
    }
    deserialize(buffer) {
        this.monsterGroupId = buffer.readDouble();
        if (this.monsterGroupId < -9007199254740990 || this.monsterGroupId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.monsterGroupId + ") on element of GameRolePlayAttackMonsterRequestMessage.monsterGroupId.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayFightRequestCanceledMessage extends ProtocolMessage {
    constructor(fightId, sourceId, targetId) {
        super(5822);
        this.fightId = fightId;
        this.sourceId = sourceId;
        this.targetId = targetId;
    }
    serialize() {
        this.buffer.writeInt(this.fightId);
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        this.buffer.writeDouble(this.sourceId);
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeDouble(this.targetId);
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.sourceId = buffer.readDouble();
        if (this.sourceId < -9007199254740990 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayFightRequestCanceledMessage.sourceId.");
        }
        this.targetId = buffer.readDouble();
        if (this.targetId < -9007199254740990 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameRolePlayFightRequestCanceledMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayPlayerFightFriendlyAnsweredMessage extends ProtocolMessage {
    constructor(fightId, sourceId, targetId, accept) {
        super(5733);
        this.fightId = fightId;
        this.sourceId = sourceId;
        this.targetId = targetId;
        this.accept = accept;
    }
    serialize() {
        this.buffer.writeInt(this.fightId);
        if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        this.buffer.writeVarLong(this.sourceId);
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
        this.buffer.writeBoolean(this.accept);
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.sourceId = buffer.readVarUhLong();
        if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.sourceId.");
        }
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.targetId.");
        }
        this.accept = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameRolePlayPlayerFightFriendlyAnswerMessage extends ProtocolMessage {
    constructor(fightId, accept) {
        super(5732);
        this.fightId = fightId;
        this.accept = accept;
    }
    serialize() {
        this.buffer.writeInt(this.fightId);
        this.buffer.writeBoolean(this.accept);
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.accept = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameRolePlayPlayerFightFriendlyRequestedMessage extends ProtocolMessage {
    constructor(fightId, sourceId, targetId) {
        super(5937);
        this.fightId = fightId;
        this.sourceId = sourceId;
        this.targetId = targetId;
    }
    serialize() {
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element sourceId.");
        }
        this.buffer.writeVarLong(this.sourceId);
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.fightId.");
        }
        this.sourceId = buffer.readVarUhLong();
        if (this.sourceId < 0 || this.sourceId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.sourceId.");
        }
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayPlayerFightRequestMessage extends ProtocolMessage {
    constructor(targetId, targetCellId, friendly) {
        super(5731);
        this.targetId = targetId;
        this.targetCellId = targetCellId;
        this.friendly = friendly;
    }
    serialize() {
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
        if (this.targetCellId < -1 || this.targetCellId > 559) {
            Logger.error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
        }
        this.buffer.writeShort(this.targetCellId);
        this.buffer.writeBoolean(this.friendly);
    }
    deserialize(buffer) {
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightRequestMessage.targetId.");
        }
        this.targetCellId = buffer.readShort();
        if (this.targetCellId < -1 || this.targetCellId > 559) {
            Logger.error("Forbidden value (" + this.targetCellId + ") on element of GameRolePlayPlayerFightRequestMessage.targetCellId.");
        }
        this.friendly = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameRolePlayRemoveChallengeMessage extends ProtocolMessage {
    constructor(fightId) {
        super(300);
        this.fightId = fightId;
    }
    serialize() {
        this.buffer.writeInt(this.fightId);
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class GameRolePlayShowChallengeMessage extends ProtocolMessage {
    constructor(commonsInfos) {
        super(301);
        this.commonsInfos = commonsInfos;
    }
    serialize() {
        this.commonsInfos.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.commonsInfos = new FightCommonInformations();
        this.commonsInfos.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameRolePlayArenaFightAnswerMessage extends ProtocolMessage {
    constructor(fightId, accept) {
        super(6279);
        this.fightId = fightId;
        this.accept = accept;
    }
    serialize() {
        this.buffer.writeInt(this.fightId);
        this.buffer.writeBoolean(this.accept);
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.accept = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameRolePlayArenaFighterStatusMessage extends ProtocolMessage {
    constructor(fightId, playerId, accepted) {
        super(6281);
        this.fightId = fightId;
        this.playerId = playerId;
        this.accepted = accepted;
    }
    serialize() {
        this.buffer.writeInt(this.fightId);
        this.buffer.writeInt(this.playerId);
        this.buffer.writeBoolean(this.accepted);
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
        this.playerId = buffer.readInt();
        this.accepted = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GameRolePlayArenaFightPropositionMessage extends ProtocolMessage {
    constructor(fightId, alliesId, duration) {
        super(6276);
        this.fightId = fightId;
        this.alliesId = alliesId;
        this.duration = duration;
    }
    serialize() {
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        this.buffer.writeShort(this.alliesId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.alliesId.length) {
            if (this.alliesId[_loc2_] < -9007199254740990 || this.alliesId[_loc2_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.alliesId[_loc2_] + ") on element 2 (starting at 1) of alliesId.");
            }
            this.buffer.writeDouble(this.alliesId[_loc2_]);
            _loc2_++;
        }
        if (this.duration < 0) {
            Logger.error("Forbidden value (" + this.duration + ") on element duration.");
        }
        this.buffer.writeVarShort(this.duration);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of GameRolePlayArenaFightPropositionMessage.fightId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readDouble();
            if (_loc4_ < -9007199254740990 || _loc4_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of alliesId.");
            }
            this.alliesId.push(_loc4_);
            _loc3_++;
        }
        this.duration = buffer.readVarUhShort();
        if (this.duration < 0) {
            Logger.error("Forbidden value (" + this.duration + ") on element of GameRolePlayArenaFightPropositionMessage.duration.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayArenaRegisterMessage extends ProtocolMessage {
    constructor(battleMode) {
        super(6280);
        this.battleMode = battleMode;
    }
    serialize() {
        this.buffer.writeInt(this.battleMode);
    }
    deserialize(buffer) {
        this.battleMode = buffer.readInt();
        if (this.battleMode < 0) {
            Logger.error("Forbidden value (" + this.battleMode + ") on element of GameRolePlayArenaRegisterMessage.battleMode.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayArenaRegistrationStatusMessage extends ProtocolMessage {
    constructor(registered, step, battleMode) {
        super(6284);
        this.registered = registered;
        this.step = step;
        this.battleMode = battleMode;
    }
    serialize() {
        this.buffer.writeBoolean(this.registered);
        this.buffer.writeByte(this.step);
        this.buffer.writeInt(this.battleMode);
    }
    deserialize(buffer) {
        this.registered = buffer.readBoolean();
        this.step = buffer.readByte();
        if (this.step < 0) {
            Logger.error("Forbidden value (" + this.step + ") on element of GameRolePlayArenaRegistrationStatusMessage.step.");
        }
        this.battleMode = buffer.readInt();
        if (this.battleMode < 0) {
            Logger.error("Forbidden value (" + this.battleMode + ") on element of GameRolePlayArenaRegistrationStatusMessage.battleMode.");
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayArenaSwitchToFightServerMessage extends ProtocolMessage {
    constructor(address, port, ticket) {
        super(6575);
        this.address = address;
        this.port = port;
        this.ticket = ticket;
    }
    serialize() {
        this.buffer.writeUTF(this.address);
        if (this.port < 0 || this.port > 65535) {
            Logger.error("Forbidden value (" + this.port + ") on element port.");
        }
        this.buffer.writeShort(this.port);
        this.buffer.writeVarInt(this.ticket.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ticket.length) {
            this.buffer.writeByte(this.ticket[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.address = buffer.readUTF();
        this.port = buffer.readUnsignedShort();
        if (this.port < 0 || this.port > 65535) {
            Logger.error("Forbidden value (" + this.port + ") on element of GameRolePlayArenaSwitchToFightServerMessage.port.");
        }
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.ticket.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayArenaSwitchToGameServerMessage extends ProtocolMessage {
    constructor(validToken, ticket, homeServerId) {
        super(6574);
        this.validToken = validToken;
        this.ticket = ticket;
        this.homeServerId = homeServerId;
    }
    serialize() {
        this.buffer.writeBoolean(this.validToken);
        this.buffer.writeVarInt(this.ticket.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ticket.length) {
            this.buffer.writeByte(this.ticket[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.homeServerId);
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.validToken = buffer.readBoolean();
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.ticket.push(_loc4_);
            _loc3_++;
        }
        this.homeServerId = buffer.readShort();
    }
}

// Generated by Noxus messages 
export class GameRolePlayArenaUnregisterMessage extends ProtocolMessage {
constructor) {
    super(6282);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GameRolePlayArenaUpdatePlayerInfosMessage extends ProtocolMessage {
    constructor(solo) {
        super(6301);
        this.solo = solo;
    }
    serialize() {
        this.solo.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.solo = new ArenaRankInfos();
        this.solo.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GameRolePlayArenaUpdatePlayerInfosWithTeamMessage extends GameRolePlayArenaUpdatePlayerInfosMessage {
    constructor(param1, param2) {
        super(param1);
        this.team = param2;
        this.messageId = 6640;
    }
    serialize() {
        super.serialize();
        this.team.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.team = new ArenaRankInfos();
        this.team.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ChangeHavenBagRoomRequestMessage extends ProtocolMessage {
    constructor(roomId) {
        super(6638);
        this.roomId = roomId;
    }
    serialize() {
        if (this.roomId < 0) {
            Logger.error("Forbidden value (" + this.roomId + ") on element roomId.");
        }
        this.buffer.writeByte(this.roomId);
    }
    deserialize(buffer) {
        this.roomId = buffer.readByte();
        if (this.roomId < 0) {
            Logger.error("Forbidden value (" + this.roomId + ") on element of ChangeHavenBagRoomRequestMessage.roomId.");
        }
    }
}

// Generated by Noxus messages 
export class ChangeThemeRequestMessage extends ProtocolMessage {
    constructor(theme) {
        super(6639);
        this.theme = theme;
    }
    serialize() {
        this.buffer.writeByte(this.theme);
    }
    deserialize(buffer) {
        this.theme = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class CloseHavenBagFurnitureSequenceRequestMessage extends ProtocolMessage {
constructor) {
    super(6621);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class EditHavenBagCancelRequestMessage extends ProtocolMessage {
constructor) {
    super(6619);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class EditHavenBagFinishedMessage extends ProtocolMessage {
constructor) {
    super(6628);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class EditHavenBagRequestMessage extends ProtocolMessage {
constructor) {
    super(6626);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class EditHavenBagStartMessage extends ProtocolMessage {
constructor) {
    super(6632);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class EnterHavenBagRequestMessage extends ProtocolMessage {
constructor) {
    super(6636);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExitHavenBagRequestMessage extends ProtocolMessage {
constructor) {
    super(6631);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class HavenBagDailyLoteryMessage extends ProtocolMessage {
    constructor(returnType, tokenId) {
        super(6644);
        this.returnType = returnType;
        this.tokenId = tokenId;
    }
    serialize() {
        this.buffer.writeByte(this.returnType);
        this.buffer.writeUTF(this.tokenId);
    }
    deserialize(buffer) {
        this.returnType = buffer.readByte();
        if (this.returnType < 0) {
            Logger.error("Forbidden value (" + this.returnType + ") on element of HavenBagDailyLoteryMessage.returnType.");
        }
        this.tokenId = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class HavenBagFurnituresMessage extends ProtocolMessage {
    constructor(furnituresInfos) {
        super(6634);
        this.furnituresInfos = furnituresInfos;
    }
    serialize() {
        this.buffer.writeShort(this.furnituresInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.furnituresInfos.length) {
            this.furnituresInfos[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new HavenBagFurnitureInformation();
            _loc4_.deserialize(buffer);
            this.furnituresInfos.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class HavenBagFurnituresRequestMessage extends ProtocolMessage {
    constructor(cellIds, funitureIds, orientations) {
        super(6637);
        this.cellIds = cellIds;
        this.funitureIds = funitureIds;
        this.orientations = orientations;
    }
    serialize() {
        this.buffer.writeShort(this.cellIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cellIds.length) {
            if (this.cellIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.cellIds[_loc2_] + ") on element 1 (starting at 1) of cellIds.");
            }
            this.buffer.writeVarShort(this.cellIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.funitureIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.funitureIds.length) {
            this.buffer.writeInt(this.funitureIds[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.orientations.length);
        var _loc4_ = 0;
        while (_loc4_ < this.orientations.length) {
            if (this.orientations[_loc4_] < 0) {
                Logger.error("Forbidden value (" + this.orientations[_loc4_] + ") on element 3 (starting at 1) of orientations.");
            }
            this.buffer.writeByte(this.orientations[_loc4_]);
            _loc4_++;
        }
    }
    deserialize(buffer) {
        var _loc8_ = 0;
        var _loc9_ = 0;
        var _loc10_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = buffer.readVarUhShort();
            if (_loc8_ < 0) {
                Logger.error("Forbidden value (" + _loc8_ + ") on elements of cellIds.");
            }
            this.cellIds.push(_loc8_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc9_ = buffer.readInt();
            this.funitureIds.push(_loc9_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc10_ = buffer.readByte();
            if (_loc10_ < 0) {
                Logger.error("Forbidden value (" + _loc10_ + ") on elements of orientations.");
            }
            this.orientations.push(_loc10_);
            _loc7_++;
        }
    }
}

// Generated by Noxus messages 
export class HavenBagPackListMessage extends ProtocolMessage {
    constructor(packIds) {
        super(6620);
        this.packIds = packIds;
    }
    serialize() {
        this.buffer.writeShort(this.packIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.packIds.length) {
            this.buffer.writeByte(this.packIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.packIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class KickHavenBagRequestMessage extends ProtocolMessage {
    constructor(guestId) {
        super(6652);
        this.guestId = guestId;
    }
    serialize() {
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        this.buffer.writeVarLong(this.guestId);
    }
    deserialize(buffer) {
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element of KickHavenBagRequestMessage.guestId.");
        }
    }
}

// Generated by Noxus messages 
export class OpenHavenBagFurnitureSequenceRequestMessage extends ProtocolMessage {
constructor) {
    super(6635);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class RoomAvailableUpdateMessage extends ProtocolMessage {
    constructor(nbRoom) {
        super(6630);
        this.nbRoom = nbRoom;
    }
    serialize() {
        if (this.nbRoom < 0 || this.nbRoom > 255) {
            Logger.error("Forbidden value (" + this.nbRoom + ") on element nbRoom.");
        }
        this.buffer.writeByte(this.nbRoom);
    }
    deserialize(buffer) {
        this.nbRoom = buffer.readUnsignedByte();
        if (this.nbRoom < 0 || this.nbRoom > 255) {
            Logger.error("Forbidden value (" + this.nbRoom + ") on element of RoomAvailableUpdateMessage.nbRoom.");
        }
    }
}

// Generated by Noxus messages 
export class InviteInHavenBagClosedMessage extends ProtocolMessage {
    constructor(hostInformations) {
        super(6645);
        this.hostInformations = hostInformations;
    }
    serialize() {
        this.hostInformations.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.hostInformations = new CharacterMinimalInformations();
        this.hostInformations.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class InviteInHavenBagMessage extends ProtocolMessage {
    constructor(guestInformations, accept) {
        super(6642);
        this.guestInformations = guestInformations;
        this.accept = accept;
    }
    serialize() {
        this.guestInformations.serialize(this.buffer);
        this.buffer.writeBoolean(this.accept);
    }
    deserialize(buffer) {
        this.guestInformations = new CharacterMinimalInformations();
        this.guestInformations.deserialize(buffer);
        this.accept = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class InviteInHavenBagOfferMessage extends ProtocolMessage {
    constructor(hostInformations, timeLeftBeforeCancel) {
        super(6643);
        this.hostInformations = hostInformations;
        this.timeLeftBeforeCancel = timeLeftBeforeCancel;
    }
    serialize() {
        this.hostInformations.serialize(this.buffer);
        this.buffer.writeVarInt(this.timeLeftBeforeCancel);
    }
    deserialize(buffer) {
        this.hostInformations = new CharacterMinimalInformations();
        this.hostInformations.deserialize(buffer);
        this.timeLeftBeforeCancel = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class TeleportHavenBagAnswerMessage extends ProtocolMessage {
    constructor(accept) {
        super(6646);
        this.accept = accept;
    }
    serialize() {
        this.buffer.writeBoolean(this.accept);
    }
    deserialize(buffer) {
        this.accept = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class TeleportHavenBagRequestMessage extends ProtocolMessage {
    constructor(guestId) {
        super(6647);
        this.guestId = guestId;
    }
    serialize() {
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        this.buffer.writeVarLong(this.guestId);
    }
    deserialize(buffer) {
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element of TeleportHavenBagRequestMessage.guestId.");
        }
    }
}

// Generated by Noxus messages 
export class AccountHouseMessage extends ProtocolMessage {
    constructor(houses) {
        super(6315);
        this.houses = houses;
    }
    serialize() {
        this.buffer.writeShort(this.houses.length);
        var _loc2_ = 0;
        while (_loc2_ < this.houses.length) {
            this.houses[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new AccountHouseInformations();
            _loc4_.deserialize(buffer);
            this.houses.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class HouseBuyRequestMessage extends ProtocolMessage {
    constructor(proposedPrice) {
        super(5738);
        this.proposedPrice = proposedPrice;
    }
    serialize() {
        if (this.proposedPrice < 0) {
            Logger.error("Forbidden value (" + this.proposedPrice + ") on element proposedPrice.");
        }
        this.buffer.writeVarInt(this.proposedPrice);
    }
    deserialize(buffer) {
        this.proposedPrice = buffer.readVarUhInt();
        if (this.proposedPrice < 0) {
            Logger.error("Forbidden value (" + this.proposedPrice + ") on element of HouseBuyRequestMessage.proposedPrice.");
        }
    }
}

// Generated by Noxus messages 
export class HouseBuyResultMessage extends ProtocolMessage {
    constructor(houseId, bought, realPrice) {
        super(5735);
        this.houseId = houseId;
        this.bought = bought;
        this.realPrice = realPrice;
    }
    serialize() {
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        this.buffer.writeBoolean(this.bought);
        if (this.realPrice < 0) {
            Logger.error("Forbidden value (" + this.realPrice + ") on element realPrice.");
        }
        this.buffer.writeVarInt(this.realPrice);
    }
    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element of HouseBuyResultMessage.houseId.");
        }
        this.bought = buffer.readBoolean();
        this.realPrice = buffer.readVarUhInt();
        if (this.realPrice < 0) {
            Logger.error("Forbidden value (" + this.realPrice + ") on element of HouseBuyResultMessage.realPrice.");
        }
    }
}

// Generated by Noxus messages 
export class HouseKickIndoorMerchantRequestMessage extends ProtocolMessage {
    constructor(cellId) {
        super(5661);
        this.cellId = cellId;
    }
    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
    }
    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of HouseKickIndoorMerchantRequestMessage.cellId.");
        }
    }
}

// Generated by Noxus messages 
export class HouseKickRequestMessage extends ProtocolMessage {
    constructor(id) {
        super(5698);
        this.id = id;
    }
    serialize() {
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarLong(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of HouseKickRequestMessage.id.");
        }
    }
}

// Generated by Noxus messages 
export class HouseLockFromInsideRequestMessage extends LockableChangeCodeMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 5885;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class HousePropertiesMessage extends ProtocolMessage {
    constructor(properties) {
        super(5734);
        this.properties = properties;
    }
    serialize() {
        this.buffer.writeShort(this.properties.protocolId);
        this.properties.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.properties = ProtocolTypeManager.getInstance(HouseInformations, _loc2_);
        this.properties.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class HouseSellFromInsideRequestMessage extends HouseSellRequestMessage {
    constructor(param1, param2) {
        super(param1, param2);
        this.messageId = 5884;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class HouseSellRequestMessage extends ProtocolMessage {
    constructor(amount, forSale) {
        super(5697);
        this.amount = amount;
        this.forSale = forSale;
    }
    serialize() {
        if (this.amount < 0) {
            Logger.error("Forbidden value (" + this.amount + ") on element amount.");
        }
        this.buffer.writeVarInt(this.amount);
        this.buffer.writeBoolean(this.forSale);
    }
    deserialize(buffer) {
        this.amount = buffer.readVarUhInt();
        if (this.amount < 0) {
            Logger.error("Forbidden value (" + this.amount + ") on element of HouseSellRequestMessage.amount.");
        }
        this.forSale = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class HouseSoldMessage extends ProtocolMessage {
    constructor(houseId, realPrice, buyerName) {
        super(5737);
        this.houseId = houseId;
        this.realPrice = realPrice;
        this.buyerName = buyerName;
    }
    serialize() {
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        if (this.realPrice < 0) {
            Logger.error("Forbidden value (" + this.realPrice + ") on element realPrice.");
        }
        this.buffer.writeVarInt(this.realPrice);
        this.buffer.writeUTF(this.buyerName);
    }
    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element of HouseSoldMessage.houseId.");
        }
        this.realPrice = buffer.readVarUhInt();
        if (this.realPrice < 0) {
            Logger.error("Forbidden value (" + this.realPrice + ") on element of HouseSoldMessage.realPrice.");
        }
        this.buyerName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class HouseToSellFilterMessage extends ProtocolMessage {
    constructor(areaId, atLeastNbRoom, atLeastNbChest, skillRequested, maxPrice) {
        super(6137);
        this.areaId = areaId;
        this.atLeastNbRoom = atLeastNbRoom;
        this.atLeastNbChest = atLeastNbChest;
        this.skillRequested = skillRequested;
        this.maxPrice = maxPrice;
    }
    serialize() {
        this.buffer.writeInt(this.areaId);
        if (this.atLeastNbRoom < 0) {
            Logger.error("Forbidden value (" + this.atLeastNbRoom + ") on element atLeastNbRoom.");
        }
        this.buffer.writeByte(this.atLeastNbRoom);
        if (this.atLeastNbChest < 0) {
            Logger.error("Forbidden value (" + this.atLeastNbChest + ") on element atLeastNbChest.");
        }
        this.buffer.writeByte(this.atLeastNbChest);
        if (this.skillRequested < 0) {
            Logger.error("Forbidden value (" + this.skillRequested + ") on element skillRequested.");
        }
        this.buffer.writeVarShort(this.skillRequested);
        if (this.maxPrice < 0) {
            Logger.error("Forbidden value (" + this.maxPrice + ") on element maxPrice.");
        }
        this.buffer.writeVarInt(this.maxPrice);
    }
    deserialize(buffer) {
        this.areaId = buffer.readInt();
        this.atLeastNbRoom = buffer.readByte();
        if (this.atLeastNbRoom < 0) {
            Logger.error("Forbidden value (" + this.atLeastNbRoom + ") on element of HouseToSellFilterMessage.atLeastNbRoom.");
        }
        this.atLeastNbChest = buffer.readByte();
        if (this.atLeastNbChest < 0) {
            Logger.error("Forbidden value (" + this.atLeastNbChest + ") on element of HouseToSellFilterMessage.atLeastNbChest.");
        }
        this.skillRequested = buffer.readVarUhShort();
        if (this.skillRequested < 0) {
            Logger.error("Forbidden value (" + this.skillRequested + ") on element of HouseToSellFilterMessage.skillRequested.");
        }
        this.maxPrice = buffer.readVarUhInt();
        if (this.maxPrice < 0) {
            Logger.error("Forbidden value (" + this.maxPrice + ") on element of HouseToSellFilterMessage.maxPrice.");
        }
    }
}

// Generated by Noxus messages 
export class HouseToSellListMessage extends ProtocolMessage {
    constructor(pageIndex, totalPage, houseList) {
        super(6140);
        this.pageIndex = pageIndex;
        this.totalPage = totalPage;
        this.houseList = houseList;
    }
    serialize() {
        if (this.pageIndex < 0) {
            Logger.error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
        }
        this.buffer.writeVarShort(this.pageIndex);
        if (this.totalPage < 0) {
            Logger.error("Forbidden value (" + this.totalPage + ") on element totalPage.");
        }
        this.buffer.writeVarShort(this.totalPage);
        this.buffer.writeShort(this.houseList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.houseList.length) {
            this.houseList[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.pageIndex = buffer.readVarUhShort();
        if (this.pageIndex < 0) {
            Logger.error("Forbidden value (" + this.pageIndex + ") on element of HouseToSellListMessage.pageIndex.");
        }
        this.totalPage = buffer.readVarUhShort();
        if (this.totalPage < 0) {
            Logger.error("Forbidden value (" + this.totalPage + ") on element of HouseToSellListMessage.totalPage.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new HouseInformationsForSell();
            _loc4_.deserialize(buffer);
            this.houseList.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class HouseToSellListRequestMessage extends ProtocolMessage {
    constructor(pageIndex) {
        super(6139);
        this.pageIndex = pageIndex;
    }
    serialize() {
        if (this.pageIndex < 0) {
            Logger.error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
        }
        this.buffer.writeVarShort(this.pageIndex);
    }
    deserialize(buffer) {
        this.pageIndex = buffer.readVarUhShort();
        if (this.pageIndex < 0) {
            Logger.error("Forbidden value (" + this.pageIndex + ") on element of HouseToSellListRequestMessage.pageIndex.");
        }
    }
}

// Generated by Noxus messages 
export class HouseGuildNoneMessage extends ProtocolMessage {
    constructor(houseId) {
        super(5701);
        this.houseId = houseId;
    }
    serialize() {
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
    }
    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element of HouseGuildNoneMessage.houseId.");
        }
    }
}

// Generated by Noxus messages 
export class HouseGuildRightsMessage extends ProtocolMessage {
    constructor(houseId, guildInfo, rights) {
        super(5703);
        this.houseId = houseId;
        this.guildInfo = guildInfo;
        this.rights = rights;
    }
    serialize() {
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
        this.guildInfo.serialize(this.buffer);
        if (this.rights < 0) {
            Logger.error("Forbidden value (" + this.rights + ") on element rights.");
        }
        this.buffer.writeVarInt(this.rights);
    }
    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element of HouseGuildRightsMessage.houseId.");
        }
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
        this.rights = buffer.readVarUhInt();
        if (this.rights < 0) {
            Logger.error("Forbidden value (" + this.rights + ") on element of HouseGuildRightsMessage.rights.");
        }
    }
}

// Generated by Noxus messages 
export class HouseGuildRightsViewMessage extends ProtocolMessage {
constructor) {
    super(5700);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class HouseGuildShareRequestMessage extends ProtocolMessage {
    constructor(enable, rights) {
        super(5704);
        this.enable = enable;
        this.rights = rights;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
        if (this.rights < 0) {
            Logger.error("Forbidden value (" + this.rights + ") on element rights.");
        }
        this.buffer.writeVarInt(this.rights);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
        this.rights = buffer.readVarUhInt();
        if (this.rights < 0) {
            Logger.error("Forbidden value (" + this.rights + ") on element of HouseGuildShareRequestMessage.rights.");
        }
    }
}

// Generated by Noxus messages 
export class JobAllowMultiCraftRequestMessage extends ProtocolMessage {
    constructor(enabled) {
        super(5748);
        this.enabled = enabled;
    }
    serialize() {
        this.buffer.writeBoolean(this.enabled);
    }
    deserialize(buffer) {
        this.enabled = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class JobBookSubscriptionMessage extends ProtocolMessage {
    constructor(subscriptions) {
        super(6593);
        this.subscriptions = subscriptions;
    }
    serialize() {
        this.buffer.writeShort(this.subscriptions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.subscriptions.length) {
            this.subscriptions[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobBookSubscription();
            _loc4_.deserialize(buffer);
            this.subscriptions.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class JobCrafterDirectoryAddMessage extends ProtocolMessage {
    constructor(listEntry) {
        super(5651);
        this.listEntry = listEntry;
    }
    serialize() {
        this.listEntry.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.listEntry = new JobCrafterDirectoryListEntry();
        this.listEntry.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class JobCrafterDirectoryDefineSettingsMessage extends ProtocolMessage {
    constructor(settings) {
        super(5649);
        this.settings = settings;
    }
    serialize() {
        this.settings.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.settings = new JobCrafterDirectorySettings();
        this.settings.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class JobCrafterDirectoryEntryMessage extends ProtocolMessage {
    constructor(playerInfo, jobInfoList, playerLook) {
        super(6044);
        this.playerInfo = playerInfo;
        this.jobInfoList = jobInfoList;
        this.playerLook = playerLook;
    }
    serialize() {
        this.playerInfo.serialize(this.buffer);
        this.buffer.writeShort(this.jobInfoList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.jobInfoList.length) {
            this.jobInfoList[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.playerLook.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
        this.playerInfo.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobCrafterDirectoryEntryJobInfo();
            _loc4_.deserialize(buffer);
            this.jobInfoList.push(_loc4_);
            _loc3_++;
        }
        this.playerLook = new EntityLook();
        this.playerLook.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class JobCrafterDirectoryEntryRequestMessage extends ProtocolMessage {
    constructor(playerId) {
        super(6043);
        this.playerId = playerId;
    }
    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryEntryRequestMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class JobCrafterDirectoryListMessage extends ProtocolMessage {
    constructor(listEntries) {
        super(6046);
        this.listEntries = listEntries;
    }
    serialize() {
        this.buffer.writeShort(this.listEntries.length);
        var _loc2_ = 0;
        while (_loc2_ < this.listEntries.length) {
            this.listEntries[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobCrafterDirectoryListEntry();
            _loc4_.deserialize(buffer);
            this.listEntries.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class JobCrafterDirectoryListRequestMessage extends ProtocolMessage {
    constructor(jobId) {
        super(6047);
        this.jobId = jobId;
    }
    serialize() {
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        this.buffer.writeByte(this.jobId);
    }
    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryListRequestMessage.jobId.");
        }
    }
}

// Generated by Noxus messages 
export class JobCrafterDirectoryRemoveMessage extends ProtocolMessage {
    constructor(jobId, playerId) {
        super(5653);
        this.jobId = jobId;
        this.playerId = playerId;
    }
    serialize() {
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        this.buffer.writeByte(this.jobId);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryRemoveMessage.jobId.");
        }
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryRemoveMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class JobCrafterDirectorySettingsMessage extends ProtocolMessage {
    constructor(craftersSettings) {
        super(5652);
        this.craftersSettings = craftersSettings;
    }
    serialize() {
        this.buffer.writeShort(this.craftersSettings.length);
        var _loc2_ = 0;
        while (_loc2_ < this.craftersSettings.length) {
            this.craftersSettings[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobCrafterDirectorySettings();
            _loc4_.deserialize(buffer);
            this.craftersSettings.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class JobDescriptionMessage extends ProtocolMessage {
    constructor(jobsDescription) {
        super(5655);
        this.jobsDescription = jobsDescription;
    }
    serialize() {
        this.buffer.writeShort(this.jobsDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.jobsDescription.length) {
            this.jobsDescription[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobDescription();
            _loc4_.deserialize(buffer);
            this.jobsDescription.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class JobExperienceMultiUpdateMessage extends ProtocolMessage {
    constructor(experiencesUpdate) {
        super(5809);
        this.experiencesUpdate = experiencesUpdate;
    }
    serialize() {
        this.buffer.writeShort(this.experiencesUpdate.length);
        var _loc2_ = 0;
        while (_loc2_ < this.experiencesUpdate.length) {
            this.experiencesUpdate[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new JobExperience();
            _loc4_.deserialize(buffer);
            this.experiencesUpdate.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class JobExperienceOtherPlayerUpdateMessage extends JobExperienceUpdateMessage {
    constructor(param1, param2) {
        super(param1);
        this.playerId = param2;
        this.messageId = 6599;
    }
    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of JobExperienceOtherPlayerUpdateMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class JobExperienceUpdateMessage extends ProtocolMessage {
    constructor(experiencesUpdate) {
        super(5654);
        this.experiencesUpdate = experiencesUpdate;
    }
    serialize() {
        this.experiencesUpdate.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.experiencesUpdate = new JobExperience();
        this.experiencesUpdate.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class JobLevelUpMessage extends ProtocolMessage {
    constructor(newLevel, jobsDescription) {
        super(5656);
        this.newLevel = newLevel;
        this.jobsDescription = jobsDescription;
    }
    serialize() {
        if (this.newLevel < 0 || this.newLevel > 255) {
            Logger.error("Forbidden value (" + this.newLevel + ") on element newLevel.");
        }
        this.buffer.writeByte(this.newLevel);
        this.jobsDescription.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.newLevel = buffer.readUnsignedByte();
        if (this.newLevel < 0 || this.newLevel > 255) {
            Logger.error("Forbidden value (" + this.newLevel + ") on element of JobLevelUpMessage.newLevel.");
        }
        this.jobsDescription = new JobDescription();
        this.jobsDescription.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class JobMultiCraftAvailableSkillsMessage extends JobAllowMultiCraftRequestMessage {
    constructor(param1, param2, param3) {
        super(param1);
        this.playerId = param2;
        this.skills = param3;
        this.messageId = 5747;
    }
    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeShort(this.skills.length);
        var _loc2_ = 0;
        while (_loc2_ < this.skills.length) {
            if (this.skills[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.skills[_loc2_] + ") on element 2 (starting at 1) of skills.");
            }
            this.buffer.writeVarShort(this.skills[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of JobMultiCraftAvailableSkillsMessage.playerId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of skills.");
            }
            this.skills.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class LockableChangeCodeMessage extends ProtocolMessage {
    constructor(code) {
        super(5666);
        this.code = code;
    }
    serialize() {
        this.buffer.writeUTF(this.code);
    }
    deserialize(buffer) {
        this.code = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class LockableCodeResultMessage extends ProtocolMessage {
    constructor(result) {
        super(5672);
        this.result = result;
    }
    serialize() {
        this.buffer.writeByte(this.result);
    }
    deserialize(buffer) {
        this.result = buffer.readByte();
        if (this.result < 0) {
            Logger.error("Forbidden value (" + this.result + ") on element of LockableCodeResultMessage.result.");
        }
    }
}

// Generated by Noxus messages 
export class LockableShowCodeDialogMessage extends ProtocolMessage {
    constructor(changeOrUse, codeSize) {
        super(5740);
        this.changeOrUse = changeOrUse;
        this.codeSize = codeSize;
    }
    serialize() {
        this.buffer.writeBoolean(this.changeOrUse);
        if (this.codeSize < 0) {
            Logger.error("Forbidden value (" + this.codeSize + ") on element codeSize.");
        }
        this.buffer.writeByte(this.codeSize);
    }
    deserialize(buffer) {
        this.changeOrUse = buffer.readBoolean();
        this.codeSize = buffer.readByte();
        if (this.codeSize < 0) {
            Logger.error("Forbidden value (" + this.codeSize + ") on element of LockableShowCodeDialogMessage.codeSize.");
        }
    }
}

// Generated by Noxus messages 
export class LockableStateUpdateAbstractMessage extends ProtocolMessage {
    constructor(locked) {
        super(5671);
        this.locked = locked;
    }
    serialize() {
        this.buffer.writeBoolean(this.locked);
    }
    deserialize(buffer) {
        this.locked = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class LockableStateUpdateHouseDoorMessage extends LockableStateUpdateAbstractMessage {
    constructor(param1, param2) {
        super(param1);
        this.houseId = param2;
        this.messageId = 5668;
    }
    serialize() {
        super.serialize();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element of LockableStateUpdateHouseDoorMessage.houseId.");
        }
    }
}

// Generated by Noxus messages 
export class LockableStateUpdateStorageMessage extends LockableStateUpdateAbstractMessage {
    constructor(param1, param2, param3) {
        super(param1);
        this.mapId = param2;
        this.elementId = param3;
        this.messageId = 5669;
    }
    serialize() {
        super.serialize();
        this.buffer.writeInt(this.mapId);
        if (this.elementId < 0) {
            Logger.error("Forbidden value (" + this.elementId + ") on element elementId.");
        }
        this.buffer.writeVarInt(this.elementId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.mapId = buffer.readInt();
        this.elementId = buffer.readVarUhInt();
        if (this.elementId < 0) {
            Logger.error("Forbidden value (" + this.elementId + ") on element of LockableStateUpdateStorageMessage.elementId.");
        }
    }
}

// Generated by Noxus messages 
export class LockableUseCodeMessage extends ProtocolMessage {
    constructor(code) {
        super(5667);
        this.code = code;
    }
    serialize() {
        this.buffer.writeUTF(this.code);
    }
    deserialize(buffer) {
        this.code = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class AlliancePrismDialogQuestionMessage extends ProtocolMessage {
constructor) {
    super(6448);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class AllianceTaxCollectorDialogQuestionExtendedMessage extends TaxCollectorDialogQuestionExtendedMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11) {
        super(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
        this.alliance = param11;
        this.messageId = 6445;
    }
    serialize() {
        super.serialize();
        this.alliance.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.alliance = new BasicNamedAllianceInformations();
        this.alliance.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class EntityTalkMessage extends ProtocolMessage {
    constructor(entityId, textId, parameters) {
        super(6110);
        this.entityId = entityId;
        this.textId = textId;
        this.parameters = parameters;
    }
    serialize() {
        if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.entityId + ") on element entityId.");
        }
        this.buffer.writeDouble(this.entityId);
        if (this.textId < 0) {
            Logger.error("Forbidden value (" + this.textId + ") on element textId.");
        }
        this.buffer.writeVarShort(this.textId);
        this.buffer.writeShort(this.parameters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parameters.length) {
            this.buffer.writeUTF(this.parameters[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.entityId = buffer.readDouble();
        if (this.entityId < -9007199254740990 || this.entityId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.entityId + ") on element of EntityTalkMessage.entityId.");
        }
        this.textId = buffer.readVarUhShort();
        if (this.textId < 0) {
            Logger.error("Forbidden value (" + this.textId + ") on element of EntityTalkMessage.textId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.parameters.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class MapNpcsQuestStatusUpdateMessage extends ProtocolMessage {
    constructor(mapId, npcsIdsWithQuest, questFlags, npcsIdsWithoutQuest) {
        super(5642);
        this.mapId = mapId;
        this.npcsIdsWithQuest = npcsIdsWithQuest;
        this.questFlags = questFlags;
        this.npcsIdsWithoutQuest = npcsIdsWithoutQuest;
    }
    serialize() {
        this.buffer.writeInt(this.mapId);
        this.buffer.writeShort(this.npcsIdsWithQuest.length);
        var _loc2_ = 0;
        while (_loc2_ < this.npcsIdsWithQuest.length) {
            this.buffer.writeInt(this.npcsIdsWithQuest[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.questFlags.length);
        var _loc3_ = 0;
        while (_loc3_ < this.questFlags.length) {
            this.questFlags[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
        this.buffer.writeShort(this.npcsIdsWithoutQuest.length);
        var _loc4_ = 0;
        while (_loc4_ < this.npcsIdsWithoutQuest.length) {
            this.buffer.writeInt(this.npcsIdsWithoutQuest[_loc4_]);
            _loc4_++;
        }
    }
    deserialize(buffer) {
        var _loc8_ = 0;
        var _loc9_ = null;
        var _loc10_ = 0;
        this.mapId = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = buffer.readInt();
            this.npcsIdsWithQuest.push(_loc8_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc9_ = new GameRolePlayNpcQuestFlag();
            _loc9_.deserialize(buffer);
            this.questFlags.push(_loc9_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc10_ = buffer.readInt();
            this.npcsIdsWithoutQuest.push(_loc10_);
            _loc7_++;
        }
    }
}

// Generated by Noxus messages 
export class NpcDialogCreationMessage extends ProtocolMessage {
    constructor(mapId, npcId) {
        super(5618);
        this.mapId = mapId;
        this.npcId = npcId;
    }
    serialize() {
        this.buffer.writeInt(this.mapId);
        this.buffer.writeInt(this.npcId);
    }
    deserialize(buffer) {
        this.mapId = buffer.readInt();
        this.npcId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class NpcDialogQuestionMessage extends ProtocolMessage {
    constructor(messageId, dialogParams, visibleReplies) {
        super(5617);
        this.messageId = messageId;
        this.dialogParams = dialogParams;
        this.visibleReplies = visibleReplies;
    }
    serialize() {
        if (this.messageId < 0) {
            Logger.error("Forbidden value (" + this.messageId + ") on element messageId.");
        }
        this.buffer.writeVarShort(this.messageId);
        this.buffer.writeShort(this.dialogParams.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dialogParams.length) {
            this.buffer.writeUTF(this.dialogParams[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.visibleReplies.length);
        var _loc3_ = 0;
        while (_loc3_ < this.visibleReplies.length) {
            if (this.visibleReplies[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.visibleReplies[_loc3_] + ") on element 3 (starting at 1) of visibleReplies.");
            }
            this.buffer.writeVarShort(this.visibleReplies[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = 0;
        this.messageId = buffer.readVarUhShort();
        if (this.messageId < 0) {
            Logger.error("Forbidden value (" + this.messageId + ") on element of NpcDialogQuestionMessage.messageId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUTF();
            this.dialogParams.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of visibleReplies.");
            }
            this.visibleReplies.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class NpcDialogReplyMessage extends ProtocolMessage {
    constructor(replyId) {
        super(5616);
        this.replyId = replyId;
    }
    serialize() {
        if (this.replyId < 0) {
            Logger.error("Forbidden value (" + this.replyId + ") on element replyId.");
        }
        this.buffer.writeVarShort(this.replyId);
    }
    deserialize(buffer) {
        this.replyId = buffer.readVarUhShort();
        if (this.replyId < 0) {
            Logger.error("Forbidden value (" + this.replyId + ") on element of NpcDialogReplyMessage.replyId.");
        }
    }
}

// Generated by Noxus messages 
export class NpcGenericActionFailureMessage extends ProtocolMessage {
constructor) {
    super(5900);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class NpcGenericActionRequestMessage extends ProtocolMessage {
    constructor(npcId, npcActionId, npcMapId) {
        super(5898);
        this.npcId = npcId;
        this.npcActionId = npcActionId;
        this.npcMapId = npcMapId;
    }
    serialize() {
        this.buffer.writeInt(this.npcId);
        if (this.npcActionId < 0) {
            Logger.error("Forbidden value (" + this.npcActionId + ") on element npcActionId.");
        }
        this.buffer.writeByte(this.npcActionId);
        this.buffer.writeInt(this.npcMapId);
    }
    deserialize(buffer) {
        this.npcId = buffer.readInt();
        this.npcActionId = buffer.readByte();
        if (this.npcActionId < 0) {
            Logger.error("Forbidden value (" + this.npcActionId + ") on element of NpcGenericActionRequestMessage.npcActionId.");
        }
        this.npcMapId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class TaxCollectorDialogQuestionBasicMessage extends ProtocolMessage {
    constructor(guildInfo) {
        super(5619);
        this.guildInfo = guildInfo;
    }
    serialize() {
        this.guildInfo.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.guildInfo = new BasicGuildInformations();
        this.guildInfo.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class TaxCollectorDialogQuestionExtendedMessage extends TaxCollectorDialogQuestionBasicMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10) {
        super(param1);
        this.maxPods = param2;
        this.prospecting = param3;
        this.wisdom = param4;
        this.taxCollectorsCount = param5;
        this.taxCollectorAttack = param6;
        this.kamas = param7;
        this.experience = param8;
        this.pods = param9;
        this.itemsValue = param10;
        this.messageId = 5615;
    }
    serialize() {
        super.serialize();
        if (this.maxPods < 0) {
            Logger.error("Forbidden value (" + this.maxPods + ") on element maxPods.");
        }
        this.buffer.writeVarShort(this.maxPods);
        if (this.prospecting < 0) {
            Logger.error("Forbidden value (" + this.prospecting + ") on element prospecting.");
        }
        this.buffer.writeVarShort(this.prospecting);
        if (this.wisdom < 0) {
            Logger.error("Forbidden value (" + this.wisdom + ") on element wisdom.");
        }
        this.buffer.writeVarShort(this.wisdom);
        if (this.taxCollectorsCount < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorsCount + ") on element taxCollectorsCount.");
        }
        this.buffer.writeByte(this.taxCollectorsCount);
        this.buffer.writeInt(this.taxCollectorAttack);
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        this.buffer.writeVarInt(this.kamas);
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element experience.");
        }
        this.buffer.writeVarLong(this.experience);
        if (this.pods < 0) {
            Logger.error("Forbidden value (" + this.pods + ") on element pods.");
        }
        this.buffer.writeVarInt(this.pods);
        if (this.itemsValue < 0) {
            Logger.error("Forbidden value (" + this.itemsValue + ") on element itemsValue.");
        }
        this.buffer.writeVarInt(this.itemsValue);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.maxPods = buffer.readVarUhShort();
        if (this.maxPods < 0) {
            Logger.error("Forbidden value (" + this.maxPods + ") on element of TaxCollectorDialogQuestionExtendedMessage.maxPods.");
        }
        this.prospecting = buffer.readVarUhShort();
        if (this.prospecting < 0) {
            Logger.error("Forbidden value (" + this.prospecting + ") on element of TaxCollectorDialogQuestionExtendedMessage.prospecting.");
        }
        this.wisdom = buffer.readVarUhShort();
        if (this.wisdom < 0) {
            Logger.error("Forbidden value (" + this.wisdom + ") on element of TaxCollectorDialogQuestionExtendedMessage.wisdom.");
        }
        this.taxCollectorsCount = buffer.readByte();
        if (this.taxCollectorsCount < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorsCount + ") on element of TaxCollectorDialogQuestionExtendedMessage.taxCollectorsCount.");
        }
        this.taxCollectorAttack = buffer.readInt();
        this.kamas = buffer.readVarUhInt();
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element of TaxCollectorDialogQuestionExtendedMessage.kamas.");
        }
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element of TaxCollectorDialogQuestionExtendedMessage.experience.");
        }
        this.pods = buffer.readVarUhInt();
        if (this.pods < 0) {
            Logger.error("Forbidden value (" + this.pods + ") on element of TaxCollectorDialogQuestionExtendedMessage.pods.");
        }
        this.itemsValue = buffer.readVarUhInt();
        if (this.itemsValue < 0) {
            Logger.error("Forbidden value (" + this.itemsValue + ") on element of TaxCollectorDialogQuestionExtendedMessage.itemsValue.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectGroundAddedMessage extends ProtocolMessage {
    constructor(cellId, objectGID) {
        super(3017);
        this.cellId = cellId;
        this.objectGID = objectGID;
    }
    serialize() {
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element cellId.");
        }
        this.buffer.writeVarShort(this.cellId);
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
    }
    deserialize(buffer) {
        this.cellId = buffer.readVarUhShort();
        if (this.cellId < 0 || this.cellId > 559) {
            Logger.error("Forbidden value (" + this.cellId + ") on element of ObjectGroundAddedMessage.cellId.");
        }
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element of ObjectGroundAddedMessage.objectGID.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectGroundListAddedMessage extends ProtocolMessage {
    constructor(cells, referenceIds) {
        super(5925);
        this.cells = cells;
        this.referenceIds = referenceIds;
    }
    serialize() {
        this.buffer.writeShort(this.cells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cells.length) {
            if (this.cells[_loc2_] < 0 || this.cells[_loc2_] > 559) {
                Logger.error("Forbidden value (" + this.cells[_loc2_] + ") on element 1 (starting at 1) of cells.");
            }
            this.buffer.writeVarShort(this.cells[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.referenceIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.referenceIds.length) {
            if (this.referenceIds[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.referenceIds[_loc3_] + ") on element 2 (starting at 1) of referenceIds.");
            }
            this.buffer.writeVarShort(this.referenceIds[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0 || _loc6_ > 559) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of cells.");
            }
            this.cells.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of referenceIds.");
            }
            this.referenceIds.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class ObjectGroundRemovedMessage extends ProtocolMessage {
    constructor(cell) {
        super(3014);
        this.cell = cell;
    }
    serialize() {
        if (this.cell < 0 || this.cell > 559) {
            Logger.error("Forbidden value (" + this.cell + ") on element cell.");
        }
        this.buffer.writeVarShort(this.cell);
    }
    deserialize(buffer) {
        this.cell = buffer.readVarUhShort();
        if (this.cell < 0 || this.cell > 559) {
            Logger.error("Forbidden value (" + this.cell + ") on element of ObjectGroundRemovedMessage.cell.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectGroundRemovedMultipleMessage extends ProtocolMessage {
    constructor(cells) {
        super(5944);
        this.cells = cells;
    }
    serialize() {
        this.buffer.writeShort(this.cells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cells.length) {
            if (this.cells[_loc2_] < 0 || this.cells[_loc2_] > 559) {
                Logger.error("Forbidden value (" + this.cells[_loc2_] + ") on element 1 (starting at 1) of cells.");
            }
            this.buffer.writeVarShort(this.cells[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0 || _loc4_ > 559) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of cells.");
            }
            this.cells.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameDataPlayFarmObjectAnimationMessage extends ProtocolMessage {
    constructor(cellId) {
        super(6026);
        this.cellId = cellId;
    }
    serialize() {
        this.buffer.writeShort(this.cellId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.cellId.length) {
            if (this.cellId[_loc2_] < 0 || this.cellId[_loc2_] > 559) {
                Logger.error("Forbidden value (" + this.cellId[_loc2_] + ") on element 1 (starting at 1) of cellId.");
            }
            this.buffer.writeVarShort(this.cellId[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0 || _loc4_ > 559) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of cellId.");
            }
            this.cellId.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class PaddockPropertiesMessage extends ProtocolMessage {
    constructor(properties) {
        super(5824);
        this.properties = properties;
    }
    serialize() {
        this.buffer.writeShort(this.properties.protocolId);
        this.properties.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.properties = ProtocolTypeManager.getInstance(PaddockInformations, _loc2_);
        this.properties.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PaddockSellBuyDialogMessage extends ProtocolMessage {
    constructor(bsell, ownerId, price) {
        super(6018);
        this.bsell = bsell;
        this.ownerId = ownerId;
        this.price = price;
    }
    serialize() {
        this.buffer.writeBoolean(this.bsell);
        if (this.ownerId < 0) {
            Logger.error("Forbidden value (" + this.ownerId + ") on element ownerId.");
        }
        this.buffer.writeVarInt(this.ownerId);
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarInt(this.price);
    }
    deserialize(buffer) {
        this.bsell = buffer.readBoolean();
        this.ownerId = buffer.readVarUhInt();
        if (this.ownerId < 0) {
            Logger.error("Forbidden value (" + this.ownerId + ") on element of PaddockSellBuyDialogMessage.ownerId.");
        }
        this.price = buffer.readVarUhInt();
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element of PaddockSellBuyDialogMessage.price.");
        }
    }
}

// Generated by Noxus messages 
export class PaddockToSellFilterMessage extends ProtocolMessage {
    constructor(areaId, atLeastNbMount, atLeastNbMachine, maxPrice) {
        super(6161);
        this.areaId = areaId;
        this.atLeastNbMount = atLeastNbMount;
        this.atLeastNbMachine = atLeastNbMachine;
        this.maxPrice = maxPrice;
    }
    serialize() {
        this.buffer.writeInt(this.areaId);
        this.buffer.writeByte(this.atLeastNbMount);
        this.buffer.writeByte(this.atLeastNbMachine);
        if (this.maxPrice < 0) {
            Logger.error("Forbidden value (" + this.maxPrice + ") on element maxPrice.");
        }
        this.buffer.writeVarInt(this.maxPrice);
    }
    deserialize(buffer) {
        this.areaId = buffer.readInt();
        this.atLeastNbMount = buffer.readByte();
        this.atLeastNbMachine = buffer.readByte();
        this.maxPrice = buffer.readVarUhInt();
        if (this.maxPrice < 0) {
            Logger.error("Forbidden value (" + this.maxPrice + ") on element of PaddockToSellFilterMessage.maxPrice.");
        }
    }
}

// Generated by Noxus messages 
export class PaddockToSellListMessage extends ProtocolMessage {
    constructor(pageIndex, totalPage, paddockList) {
        super(6138);
        this.pageIndex = pageIndex;
        this.totalPage = totalPage;
        this.paddockList = paddockList;
    }
    serialize() {
        if (this.pageIndex < 0) {
            Logger.error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
        }
        this.buffer.writeVarShort(this.pageIndex);
        if (this.totalPage < 0) {
            Logger.error("Forbidden value (" + this.totalPage + ") on element totalPage.");
        }
        this.buffer.writeVarShort(this.totalPage);
        this.buffer.writeShort(this.paddockList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.paddockList.length) {
            this.paddockList[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.pageIndex = buffer.readVarUhShort();
        if (this.pageIndex < 0) {
            Logger.error("Forbidden value (" + this.pageIndex + ") on element of PaddockToSellListMessage.pageIndex.");
        }
        this.totalPage = buffer.readVarUhShort();
        if (this.totalPage < 0) {
            Logger.error("Forbidden value (" + this.totalPage + ") on element of PaddockToSellListMessage.totalPage.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PaddockInformationsForSell();
            _loc4_.deserialize(buffer);
            this.paddockList.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class PaddockToSellListRequestMessage extends ProtocolMessage {
    constructor(pageIndex) {
        super(6141);
        this.pageIndex = pageIndex;
    }
    serialize() {
        if (this.pageIndex < 0) {
            Logger.error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
        }
        this.buffer.writeVarShort(this.pageIndex);
    }
    deserialize(buffer) {
        this.pageIndex = buffer.readVarUhShort();
        if (this.pageIndex < 0) {
            Logger.error("Forbidden value (" + this.pageIndex + ") on element of PaddockToSellListRequestMessage.pageIndex.");
        }
    }
}

// Generated by Noxus messages 
export class AbstractPartyEventMessage extends AbstractPartyMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6273;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AbstractPartyMessage extends ProtocolMessage {
    constructor(partyId) {
        super(6274);
        this.partyId = partyId;
    }
    serialize() {
        if (this.partyId < 0) {
            Logger.error("Forbidden value (" + this.partyId + ") on element partyId.");
        }
        this.buffer.writeVarInt(this.partyId);
    }
    deserialize(buffer) {
        this.partyId = buffer.readVarUhInt();
        if (this.partyId < 0) {
            Logger.error("Forbidden value (" + this.partyId + ") on element of AbstractPartyMessage.partyId.");
        }
    }
}

// Generated by Noxus messages 
export class DungeonPartyFinderAvailableDungeonsMessage extends ProtocolMessage {
    constructor(dungeonIds) {
        super(6242);
        this.dungeonIds = dungeonIds;
    }
    serialize() {
        this.buffer.writeShort(this.dungeonIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dungeonIds.length) {
            if (this.dungeonIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.dungeonIds[_loc2_] + ") on element 1 (starting at 1) of dungeonIds.");
            }
            this.buffer.writeVarShort(this.dungeonIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of dungeonIds.");
            }
            this.dungeonIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class DungeonPartyFinderAvailableDungeonsRequestMessage extends ProtocolMessage {
constructor) {
    super(6240);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class DungeonPartyFinderListenErrorMessage extends ProtocolMessage {
    constructor(dungeonId) {
        super(6248);
        this.dungeonId = dungeonId;
    }
    serialize() {
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
    }
    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderListenErrorMessage.dungeonId.");
        }
    }
}

// Generated by Noxus messages 
export class DungeonPartyFinderListenRequestMessage extends ProtocolMessage {
    constructor(dungeonId) {
        super(6246);
        this.dungeonId = dungeonId;
    }
    serialize() {
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
    }
    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderListenRequestMessage.dungeonId.");
        }
    }
}

// Generated by Noxus messages 
export class DungeonPartyFinderRegisterErrorMessage extends ProtocolMessage {
constructor) {
    super(6243);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class DungeonPartyFinderRegisterRequestMessage extends ProtocolMessage {
    constructor(dungeonIds) {
        super(6249);
        this.dungeonIds = dungeonIds;
    }
    serialize() {
        this.buffer.writeShort(this.dungeonIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dungeonIds.length) {
            if (this.dungeonIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.dungeonIds[_loc2_] + ") on element 1 (starting at 1) of dungeonIds.");
            }
            this.buffer.writeVarShort(this.dungeonIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of dungeonIds.");
            }
            this.dungeonIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class DungeonPartyFinderRegisterSuccessMessage extends ProtocolMessage {
    constructor(dungeonIds) {
        super(6241);
        this.dungeonIds = dungeonIds;
    }
    serialize() {
        this.buffer.writeShort(this.dungeonIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dungeonIds.length) {
            if (this.dungeonIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.dungeonIds[_loc2_] + ") on element 1 (starting at 1) of dungeonIds.");
            }
            this.buffer.writeVarShort(this.dungeonIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of dungeonIds.");
            }
            this.dungeonIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class DungeonPartyFinderRoomContentMessage extends ProtocolMessage {
    constructor(dungeonId, players) {
        super(6247);
        this.dungeonId = dungeonId;
        this.players = players;
    }
    serialize() {
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        this.buffer.writeShort(this.players.length);
        var _loc2_ = 0;
        while (_loc2_ < this.players.length) {
            this.players[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderRoomContentMessage.dungeonId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DungeonPartyFinderPlayer();
            _loc4_.deserialize(buffer);
            this.players.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class DungeonPartyFinderRoomContentUpdateMessage extends ProtocolMessage {
    constructor(dungeonId, addedPlayers, removedPlayersIds) {
        super(6250);
        this.dungeonId = dungeonId;
        this.addedPlayers = addedPlayers;
        this.removedPlayersIds = removedPlayersIds;
    }
    serialize() {
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        this.buffer.writeShort(this.addedPlayers.length);
        var _loc2_ = 0;
        while (_loc2_ < this.addedPlayers.length) {
            this.addedPlayers[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.removedPlayersIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.removedPlayersIds.length) {
            if (this.removedPlayersIds[_loc3_] < 0 || this.removedPlayersIds[_loc3_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.removedPlayersIds[_loc3_] + ") on element 3 (starting at 1) of removedPlayersIds.");
            }
            this.buffer.writeVarLong(this.removedPlayersIds[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderRoomContentUpdateMessage.dungeonId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new DungeonPartyFinderPlayer();
            _loc6_.deserialize(buffer);
            this.addedPlayers.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhLong();
            if (_loc7_ < 0 || _loc7_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of removedPlayersIds.");
            }
            this.removedPlayersIds.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class PartyAbdicateThroneMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.playerId = param2;
        this.messageId = 6080;
    }
    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of PartyAbdicateThroneMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyAcceptInvitationMessage extends AbstractPartyMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 5580;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PartyCancelInvitationMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.guestId = param2;
        this.messageId = 6254;
    }
    serialize() {
        super.serialize();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        this.buffer.writeVarLong(this.guestId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element of PartyCancelInvitationMessage.guestId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyCancelInvitationNotificationMessage extends AbstractPartyEventMessage {
    constructor(param1, param2, param3) {
        super(param1);
        this.cancelerId = param2;
        this.guestId = param3;
        this.messageId = 6251;
    }
    serialize() {
        super.serialize();
        if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.cancelerId + ") on element cancelerId.");
        }
        this.buffer.writeVarLong(this.cancelerId);
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        this.buffer.writeVarLong(this.guestId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.cancelerId = buffer.readVarUhLong();
        if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.cancelerId + ") on element of PartyCancelInvitationNotificationMessage.cancelerId.");
        }
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element of PartyCancelInvitationNotificationMessage.guestId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyCannotJoinErrorMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.reason = param2;
        this.messageId = 5583;
    }
    serialize() {
        super.serialize();
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of PartyCannotJoinErrorMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class PartyDeletedMessage extends AbstractPartyMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6261;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PartyFollowMemberRequestMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.playerId = param2;
        this.messageId = 5577;
    }
    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of PartyFollowMemberRequestMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyFollowStatusUpdateMessage extends AbstractPartyMessage {
    constructor(param1, param2, param3, param4) {
        super(param1);
        this.success = param2;
        this.isFollowed = param3;
        this.followedId = param4;
        this.messageId = 5581;
    }
    serialize() {
        super.serialize();
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.success);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.isFollowed);
        this.buffer.writeByte(_loc2_);
        if (this.followedId < 0 || this.followedId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.followedId + ") on element followedId.");
        }
        this.buffer.writeVarLong(this.followedId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readByte();
        this.success = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.isFollowed = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.followedId = buffer.readVarUhLong();
        if (this.followedId < 0 || this.followedId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.followedId + ") on element of PartyFollowStatusUpdateMessage.followedId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyFollowThisMemberRequestMessage extends PartyFollowMemberRequestMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.enabled = param3;
        this.messageId = 5588;
    }
    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.enabled);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.enabled = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class PartyInvitationArenaRequestMessage extends PartyInvitationRequestMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6283;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PartyInvitationCancelledForGuestMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.cancelerId = param2;
        this.messageId = 6256;
    }
    serialize() {
        super.serialize();
        if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.cancelerId + ") on element cancelerId.");
        }
        this.buffer.writeVarLong(this.cancelerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.cancelerId = buffer.readVarUhLong();
        if (this.cancelerId < 0 || this.cancelerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.cancelerId + ") on element of PartyInvitationCancelledForGuestMessage.cancelerId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyInvitationDetailsMessage extends AbstractPartyMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8) {
        super(param1);
        this.partyType = param2;
        this.partyName = param3;
        this.fromId = param4;
        this.fromName = param5;
        this.leaderId = param6;
        this.members = param7;
        this.guests = param8;
        this.messageId = 6263;
    }
    serialize() {
        super.serialize();
        this.buffer.writeByte(this.partyType);
        this.buffer.writeUTF(this.partyName);
        if (this.fromId < 0 || this.fromId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fromId + ") on element fromId.");
        }
        this.buffer.writeVarLong(this.fromId);
        this.buffer.writeUTF(this.fromName);
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leaderId + ") on element leaderId.");
        }
        this.buffer.writeVarLong(this.leaderId);
        this.buffer.writeShort(this.members.length);
        var _loc2_ = 0;
        while (_loc2_ < this.members.length) {
            this.members[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.guests.length);
        var _loc3_ = 0;
        while (_loc3_ < this.guests.length) {
            this.guests[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        super.deserialize(buffer);
        this.partyType = buffer.readByte();
        if (this.partyType < 0) {
            Logger.error("Forbidden value (" + this.partyType + ") on element of PartyInvitationDetailsMessage.partyType.");
        }
        this.partyName = buffer.readUTF();
        this.fromId = buffer.readVarUhLong();
        if (this.fromId < 0 || this.fromId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fromId + ") on element of PartyInvitationDetailsMessage.fromId.");
        }
        this.fromName = buffer.readUTF();
        this.leaderId = buffer.readVarUhLong();
        if (this.leaderId < 0 || this.leaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leaderId + ") on element of PartyInvitationDetailsMessage.leaderId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new PartyInvitationMemberInformations();
            _loc6_.deserialize(buffer);
            this.members.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new PartyGuestInformations();
            _loc7_.deserialize(buffer);
            this.guests.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class PartyInvitationDetailsRequestMessage extends AbstractPartyMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6264;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PartyInvitationDungeonDetailsMessage extends PartyInvitationDetailsMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10) {
        super(param1, param2, param3, param4, param5, param6, param7, param8);
        this.dungeonId = param9;
        this.playersDungeonReady = param10;
        this.messageId = 6262;
    }
    serialize() {
        super.serialize();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        this.buffer.writeShort(this.playersDungeonReady.length);
        var _loc2_ = 0;
        while (_loc2_ < this.playersDungeonReady.length) {
            this.buffer.writeBoolean(this.playersDungeonReady[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = false;
        super.deserialize(buffer);
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonDetailsMessage.dungeonId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readBoolean();
            this.playersDungeonReady.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class PartyInvitationDungeonMessage extends PartyInvitationMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8) {
        super(param1, param2, param3, param4, param5, param6, param7);
        this.dungeonId = param8;
        this.messageId = 6244;
    }
    serialize() {
        super.serialize();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonMessage.dungeonId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyInvitationDungeonRequestMessage extends PartyInvitationRequestMessage {
    constructor(param1, param2) {
        super(param1);
        this.dungeonId = param2;
        this.messageId = 6245;
    }
    serialize() {
        super.serialize();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonRequestMessage.dungeonId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyInvitationMessage extends AbstractPartyMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7) {
        super(param1);
        this.partyType = param2;
        this.partyName = param3;
        this.maxParticipants = param4;
        this.fromId = param5;
        this.fromName = param6;
        this.toId = param7;
        this.messageId = 5586;
    }
    serialize() {
        super.serialize();
        this.buffer.writeByte(this.partyType);
        this.buffer.writeUTF(this.partyName);
        if (this.maxParticipants < 0) {
            Logger.error("Forbidden value (" + this.maxParticipants + ") on element maxParticipants.");
        }
        this.buffer.writeByte(this.maxParticipants);
        if (this.fromId < 0 || this.fromId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fromId + ") on element fromId.");
        }
        this.buffer.writeVarLong(this.fromId);
        this.buffer.writeUTF(this.fromName);
        if (this.toId < 0 || this.toId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.toId + ") on element toId.");
        }
        this.buffer.writeVarLong(this.toId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.partyType = buffer.readByte();
        if (this.partyType < 0) {
            Logger.error("Forbidden value (" + this.partyType + ") on element of PartyInvitationMessage.partyType.");
        }
        this.partyName = buffer.readUTF();
        this.maxParticipants = buffer.readByte();
        if (this.maxParticipants < 0) {
            Logger.error("Forbidden value (" + this.maxParticipants + ") on element of PartyInvitationMessage.maxParticipants.");
        }
        this.fromId = buffer.readVarUhLong();
        if (this.fromId < 0 || this.fromId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fromId + ") on element of PartyInvitationMessage.fromId.");
        }
        this.fromName = buffer.readUTF();
        this.toId = buffer.readVarUhLong();
        if (this.toId < 0 || this.toId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.toId + ") on element of PartyInvitationMessage.toId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyInvitationRequestMessage extends ProtocolMessage {
    constructor(name) {
        super(5585);
        this.name = name;
    }
    serialize() {
        this.buffer.writeUTF(this.name);
    }
    deserialize(buffer) {
        this.name = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class PartyJoinMessage extends AbstractPartyMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8) {
        super(param1);
        this.partyType = param2;
        this.partyLeaderId = param3;
        this.maxParticipants = param4;
        this.members = param5;
        this.guests = param6;
        this.restricted = param7;
        this.partyName = param8;
        this.messageId = 5576;
    }
    serialize() {
        super.serialize();
        this.buffer.writeByte(this.partyType);
        if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.partyLeaderId + ") on element partyLeaderId.");
        }
        this.buffer.writeVarLong(this.partyLeaderId);
        if (this.maxParticipants < 0) {
            Logger.error("Forbidden value (" + this.maxParticipants + ") on element maxParticipants.");
        }
        this.buffer.writeByte(this.maxParticipants);
        this.buffer.writeShort(this.members.length);
        var _loc2_ = 0;
        while (_loc2_ < this.members.length) {
            this.buffer.writeShort((this.members[_loc2_]).protocolId);
            this.members[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.guests.length);
        var _loc3_ = 0;
        while (_loc3_ < this.guests.length) {
            this.guests[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
        this.buffer.writeBoolean(this.restricted);
        this.buffer.writeUTF(this.partyName);
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = null;
        super.deserialize(buffer);
        this.partyType = buffer.readByte();
        if (this.partyType < 0) {
            Logger.error("Forbidden value (" + this.partyType + ") on element of PartyJoinMessage.partyType.");
        }
        this.partyLeaderId = buffer.readVarUhLong();
        if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.partyLeaderId + ") on element of PartyJoinMessage.partyLeaderId.");
        }
        this.maxParticipants = buffer.readByte();
        if (this.maxParticipants < 0) {
            Logger.error("Forbidden value (" + this.maxParticipants + ") on element of PartyJoinMessage.maxParticipants.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(PartyMemberInformations, _loc6_);
            _loc7_.deserialize(buffer);
            this.members.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = new PartyGuestInformations();
            _loc8_.deserialize(buffer);
            this.guests.push(_loc8_);
            _loc5_++;
        }
        this.restricted = buffer.readBoolean();
        this.partyName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class PartyKickedByMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.kickerId = param2;
        this.messageId = 5590;
    }
    serialize() {
        super.serialize();
        if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.kickerId + ") on element kickerId.");
        }
        this.buffer.writeVarLong(this.kickerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.kickerId = buffer.readVarUhLong();
        if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.kickerId + ") on element of PartyKickedByMessage.kickerId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyKickRequestMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.playerId = param2;
        this.messageId = 5592;
    }
    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of PartyKickRequestMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyLeaderUpdateMessage extends AbstractPartyEventMessage {
    constructor(param1, param2) {
        super(param1);
        this.partyLeaderId = param2;
        this.messageId = 5578;
    }
    serialize() {
        super.serialize();
        if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.partyLeaderId + ") on element partyLeaderId.");
        }
        this.buffer.writeVarLong(this.partyLeaderId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.partyLeaderId = buffer.readVarUhLong();
        if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.partyLeaderId + ") on element of PartyLeaderUpdateMessage.partyLeaderId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyLeaveMessage extends AbstractPartyMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 5594;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PartyLeaveRequestMessage extends AbstractPartyMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 5593;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PartyLocateMembersMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.geopositions = param2;
        this.messageId = 5595;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.geopositions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.geopositions.length) {
            this.geopositions[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PartyMemberGeoPosition();
            _loc4_.deserialize(buffer);
            this.geopositions.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class PartyLocateMembersRequestMessage extends AbstractPartyMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 5587;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PartyLoyaltyStatusMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.loyal = param2;
        this.messageId = 6270;
    }
    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.loyal);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.loyal = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class PartyMemberEjectedMessage extends PartyMemberRemoveMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.kickerId = param3;
        this.messageId = 6252;
    }
    serialize() {
        super.serialize();
        if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.kickerId + ") on element kickerId.");
        }
        this.buffer.writeVarLong(this.kickerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.kickerId = buffer.readVarUhLong();
        if (this.kickerId < 0 || this.kickerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.kickerId + ") on element of PartyMemberEjectedMessage.kickerId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyMemberInFightMessage extends AbstractPartyMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7, param8) {
        super(param1);
        this.reason = param2;
        this.memberId = param3;
        this.memberAccountId = param4;
        this.memberName = param5;
        this.fightId = param6;
        this.fightMap = param7;
        this.timeBeforeFightStart = param8;
        this.messageId = 6342;
    }
    serialize() {
        super.serialize();
        this.buffer.writeByte(this.reason);
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        if (this.memberAccountId < 0) {
            Logger.error("Forbidden value (" + this.memberAccountId + ") on element memberAccountId.");
        }
        this.buffer.writeInt(this.memberAccountId);
        this.buffer.writeUTF(this.memberName);
        this.buffer.writeInt(this.fightId);
        this.fightMap.serialize(this.buffer);
        this.buffer.writeVarShort(this.timeBeforeFightStart);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of PartyMemberInFightMessage.reason.");
        }
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element of PartyMemberInFightMessage.memberId.");
        }
        this.memberAccountId = buffer.readInt();
        if (this.memberAccountId < 0) {
            Logger.error("Forbidden value (" + this.memberAccountId + ") on element of PartyMemberInFightMessage.memberAccountId.");
        }
        this.memberName = buffer.readUTF();
        this.fightId = buffer.readInt();
        this.fightMap = new MapCoordinatesExtended();
        this.fightMap.deserialize(buffer);
        this.timeBeforeFightStart = buffer.readVarShort();
    }
}

// Generated by Noxus messages 
export class PartyMemberRemoveMessage extends AbstractPartyEventMessage {
    constructor(param1, param2) {
        super(param1);
        this.leavingPlayerId = param2;
        this.messageId = 5579;
    }
    serialize() {
        super.serialize();
        if (this.leavingPlayerId < 0 || this.leavingPlayerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leavingPlayerId + ") on element leavingPlayerId.");
        }
        this.buffer.writeVarLong(this.leavingPlayerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.leavingPlayerId = buffer.readVarUhLong();
        if (this.leavingPlayerId < 0 || this.leavingPlayerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.leavingPlayerId + ") on element of PartyMemberRemoveMessage.leavingPlayerId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyModifiableStatusMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.enabled = param2;
        this.messageId = 6277;
    }
    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.enabled);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.enabled = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class PartyNameSetErrorMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.result = param2;
        this.messageId = 6501;
    }
    serialize() {
        super.serialize();
        this.buffer.writeByte(this.result);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.result = buffer.readByte();
        if (this.result < 0) {
            Logger.error("Forbidden value (" + this.result + ") on element of PartyNameSetErrorMessage.result.");
        }
    }
}

// Generated by Noxus messages 
export class PartyNameSetRequestMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.partyName = param2;
        this.messageId = 6503;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.partyName);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.partyName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class PartyNameUpdateMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.partyName = param2;
        this.messageId = 6502;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.partyName);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.partyName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class PartyNewGuestMessage extends AbstractPartyEventMessage {
    constructor(param1, param2) {
        super(param1);
        this.guest = param2;
        this.messageId = 6260;
    }
    serialize() {
        super.serialize();
        this.guest.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.guest = new PartyGuestInformations();
        this.guest.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PartyNewMemberMessage extends PartyUpdateMessage {
    constructor(param1, param2) {
        super(param1, param2);
        this.messageId = 6306;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PartyPledgeLoyaltyRequestMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.loyal = param2;
        this.messageId = 6269;
    }
    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.loyal);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.loyal = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class PartyRefuseInvitationMessage extends AbstractPartyMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 5582;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PartyRefuseInvitationNotificationMessage extends AbstractPartyEventMessage {
    constructor(param1, param2) {
        super(param1);
        this.guestId = param2;
        this.messageId = 5596;
    }
    serialize() {
        super.serialize();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element guestId.");
        }
        this.buffer.writeVarLong(this.guestId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.guestId = buffer.readVarUhLong();
        if (this.guestId < 0 || this.guestId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.guestId + ") on element of PartyRefuseInvitationNotificationMessage.guestId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyRestrictedMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.restricted = param2;
        this.messageId = 6175;
    }
    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.restricted);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.restricted = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class PartyStopFollowRequestMessage extends AbstractPartyMessage {
    constructor(param1, param2) {
        super(param1);
        this.playerId = param2;
        this.messageId = 5574;
    }
    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of PartyStopFollowRequestMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class PartyUpdateLightMessage extends AbstractPartyEventMessage {
    constructor(param1, param2, param3, param4, param5, param6) {
        super(param1);
        this.id = param2;
        this.lifePoints = param3;
        this.maxLifePoints = param4;
        this.prospecting = param5;
        this.regenRate = param6;
        this.messageId = 6054;
    }
    serialize() {
        super.serialize();
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarLong(this.id);
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
        }
        this.buffer.writeVarInt(this.lifePoints);
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
        }
        this.buffer.writeVarInt(this.maxLifePoints);
        if (this.prospecting < 0) {
            Logger.error("Forbidden value (" + this.prospecting + ") on element prospecting.");
        }
        this.buffer.writeVarShort(this.prospecting);
        if (this.regenRate < 0 || this.regenRate > 255) {
            Logger.error("Forbidden value (" + this.regenRate + ") on element regenRate.");
        }
        this.buffer.writeByte(this.regenRate);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of PartyUpdateLightMessage.id.");
        }
        this.lifePoints = buffer.readVarUhInt();
        if (this.lifePoints < 0) {
            Logger.error("Forbidden value (" + this.lifePoints + ") on element of PartyUpdateLightMessage.lifePoints.");
        }
        this.maxLifePoints = buffer.readVarUhInt();
        if (this.maxLifePoints < 0) {
            Logger.error("Forbidden value (" + this.maxLifePoints + ") on element of PartyUpdateLightMessage.maxLifePoints.");
        }
        this.prospecting = buffer.readVarUhShort();
        if (this.prospecting < 0) {
            Logger.error("Forbidden value (" + this.prospecting + ") on element of PartyUpdateLightMessage.prospecting.");
        }
        this.regenRate = buffer.readUnsignedByte();
        if (this.regenRate < 0 || this.regenRate > 255) {
            Logger.error("Forbidden value (" + this.regenRate + ") on element of PartyUpdateLightMessage.regenRate.");
        }
    }
}

// Generated by Noxus messages 
export class PartyUpdateMessage extends AbstractPartyEventMessage {
    constructor(param1, param2) {
        super(param1);
        this.memberInformations = param2;
        this.messageId = 5575;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.memberInformations.protocolId);
        this.memberInformations.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        this.memberInformations = ProtocolTypeManager.getInstance(PartyMemberInformations, _loc2_);
        this.memberInformations.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PartyCompanionUpdateLightMessage extends PartyUpdateLightMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7) {
        super(param1, param2, param3, param4, param5, param6);
        this.indexId = param7;
        this.messageId = 6472;
    }
    serialize() {
        super.serialize();
        if (this.indexId < 0) {
            Logger.error("Forbidden value (" + this.indexId + ") on element indexId.");
        }
        this.buffer.writeByte(this.indexId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.indexId = buffer.readByte();
        if (this.indexId < 0) {
            Logger.error("Forbidden value (" + this.indexId + ") on element of PartyCompanionUpdateLightMessage.indexId.");
        }
    }
}

// Generated by Noxus messages 
export class PurchasableDialogMessage extends ProtocolMessage {
    constructor(buyOrSell, purchasableId, price) {
        super(5739);
        this.buyOrSell = buyOrSell;
        this.purchasableId = purchasableId;
        this.price = price;
    }
    serialize() {
        this.buffer.writeBoolean(this.buyOrSell);
        if (this.purchasableId < 0) {
            Logger.error("Forbidden value (" + this.purchasableId + ") on element purchasableId.");
        }
        this.buffer.writeVarInt(this.purchasableId);
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarInt(this.price);
    }
    deserialize(buffer) {
        this.buyOrSell = buffer.readBoolean();
        this.purchasableId = buffer.readVarUhInt();
        if (this.purchasableId < 0) {
            Logger.error("Forbidden value (" + this.purchasableId + ") on element of PurchasableDialogMessage.purchasableId.");
        }
        this.price = buffer.readVarUhInt();
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element of PurchasableDialogMessage.price.");
        }
    }
}

// Generated by Noxus messages 
export class GuidedModeQuitRequestMessage extends ProtocolMessage {
constructor) {
    super(6092);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GuidedModeReturnRequestMessage extends ProtocolMessage {
constructor) {
    super(6088);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class QuestListMessage extends ProtocolMessage {
    constructor(finishedQuestsIds, finishedQuestsCounts, activeQuests, reinitDoneQuestsIds) {
        super(5626);
        this.finishedQuestsIds = finishedQuestsIds;
        this.finishedQuestsCounts = finishedQuestsCounts;
        this.activeQuests = activeQuests;
        this.reinitDoneQuestsIds = reinitDoneQuestsIds;
    }
    serialize() {
        this.buffer.writeShort(this.finishedQuestsIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.finishedQuestsIds.length) {
            if (this.finishedQuestsIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.finishedQuestsIds[_loc2_] + ") on element 1 (starting at 1) of finishedQuestsIds.");
            }
            this.buffer.writeVarShort(this.finishedQuestsIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.finishedQuestsCounts.length);
        var _loc3_ = 0;
        while (_loc3_ < this.finishedQuestsCounts.length) {
            if (this.finishedQuestsCounts[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.finishedQuestsCounts[_loc3_] + ") on element 2 (starting at 1) of finishedQuestsCounts.");
            }
            this.buffer.writeVarShort(this.finishedQuestsCounts[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.activeQuests.length);
        var _loc4_ = 0;
        while (_loc4_ < this.activeQuests.length) {
            this.buffer.writeShort((this.activeQuests[_loc4_]).protocolId);
            this.activeQuests[_loc4_].serialize(this.buffer);
            _loc4_++;
        }
        this.buffer.writeShort(this.reinitDoneQuestsIds.length);
        var _loc5_ = 0;
        while (_loc5_ < this.reinitDoneQuestsIds.length) {
            if (this.reinitDoneQuestsIds[_loc5_] < 0) {
                Logger.error("Forbidden value (" + this.reinitDoneQuestsIds[_loc5_] + ") on element 4 (starting at 1) of reinitDoneQuestsIds.");
            }
            this.buffer.writeVarShort(this.reinitDoneQuestsIds[_loc5_]);
            _loc5_++;
        }
    }
    deserialize(buffer) {
        var _loc10_ = 0;
        var _loc11_ = 0;
        var _loc12_ = 0;
        var _loc13_ = null;
        var _loc14_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc10_ = buffer.readVarUhShort();
            if (_loc10_ < 0) {
                Logger.error("Forbidden value (" + _loc10_ + ") on elements of finishedQuestsIds.");
            }
            this.finishedQuestsIds.push(_loc10_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc11_ = buffer.readVarUhShort();
            if (_loc11_ < 0) {
                Logger.error("Forbidden value (" + _loc11_ + ") on elements of finishedQuestsCounts.");
            }
            this.finishedQuestsCounts.push(_loc11_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc12_ = buffer.readUnsignedShort();
            _loc13_ = ProtocolTypeManager.getInstance(QuestActiveInformations, _loc12_);
            _loc13_.deserialize(buffer);
            this.activeQuests.push(_loc13_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc14_ = buffer.readVarUhShort();
            if (_loc14_ < 0) {
                Logger.error("Forbidden value (" + _loc14_ + ") on elements of reinitDoneQuestsIds.");
            }
            this.reinitDoneQuestsIds.push(_loc14_);
            _loc9_++;
        }
    }
}

// Generated by Noxus messages 
export class QuestListRequestMessage extends ProtocolMessage {
constructor) {
    super(5623);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class QuestObjectiveValidatedMessage extends ProtocolMessage {
    constructor(questId, objectiveId) {
        super(6098);
        this.questId = questId;
        this.objectiveId = objectiveId;
    }
    serialize() {
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
        if (this.objectiveId < 0) {
            Logger.error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
        }
        this.buffer.writeVarShort(this.objectiveId);
    }
    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element of QuestObjectiveValidatedMessage.questId.");
        }
        this.objectiveId = buffer.readVarUhShort();
        if (this.objectiveId < 0) {
            Logger.error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveValidatedMessage.objectiveId.");
        }
    }
}

// Generated by Noxus messages 
export class QuestObjectiveValidationMessage extends ProtocolMessage {
    constructor(questId, objectiveId) {
        super(6085);
        this.questId = questId;
        this.objectiveId = objectiveId;
    }
    serialize() {
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
        if (this.objectiveId < 0) {
            Logger.error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
        }
        this.buffer.writeVarShort(this.objectiveId);
    }
    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element of QuestObjectiveValidationMessage.questId.");
        }
        this.objectiveId = buffer.readVarUhShort();
        if (this.objectiveId < 0) {
            Logger.error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveValidationMessage.objectiveId.");
        }
    }
}

// Generated by Noxus messages 
export class QuestStartedMessage extends ProtocolMessage {
    constructor(questId) {
        super(6091);
        this.questId = questId;
    }
    serialize() {
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
    }
    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element of QuestStartedMessage.questId.");
        }
    }
}

// Generated by Noxus messages 
export class QuestStartRequestMessage extends ProtocolMessage {
    constructor(questId) {
        super(5643);
        this.questId = questId;
    }
    serialize() {
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
    }
    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element of QuestStartRequestMessage.questId.");
        }
    }
}

// Generated by Noxus messages 
export class QuestStepInfoMessage extends ProtocolMessage {
    constructor(infos) {
        super(5625);
        this.infos = infos;
    }
    serialize() {
        this.buffer.writeShort(this.infos.protocolId);
        this.infos.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.infos = ProtocolTypeManager.getInstance(QuestActiveInformations, _loc2_);
        this.infos.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class QuestStepInfoRequestMessage extends ProtocolMessage {
    constructor(questId) {
        super(5622);
        this.questId = questId;
    }
    serialize() {
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
    }
    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element of QuestStepInfoRequestMessage.questId.");
        }
    }
}

// Generated by Noxus messages 
export class QuestStepStartedMessage extends ProtocolMessage {
    constructor(questId, stepId) {
        super(6096);
        this.questId = questId;
        this.stepId = stepId;
    }
    serialize() {
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
        if (this.stepId < 0) {
            Logger.error("Forbidden value (" + this.stepId + ") on element stepId.");
        }
        this.buffer.writeVarShort(this.stepId);
    }
    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element of QuestStepStartedMessage.questId.");
        }
        this.stepId = buffer.readVarUhShort();
        if (this.stepId < 0) {
            Logger.error("Forbidden value (" + this.stepId + ") on element of QuestStepStartedMessage.stepId.");
        }
    }
}

// Generated by Noxus messages 
export class QuestStepValidatedMessage extends ProtocolMessage {
    constructor(questId, stepId) {
        super(6099);
        this.questId = questId;
        this.stepId = stepId;
    }
    serialize() {
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
        if (this.stepId < 0) {
            Logger.error("Forbidden value (" + this.stepId + ") on element stepId.");
        }
        this.buffer.writeVarShort(this.stepId);
    }
    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element of QuestStepValidatedMessage.questId.");
        }
        this.stepId = buffer.readVarUhShort();
        if (this.stepId < 0) {
            Logger.error("Forbidden value (" + this.stepId + ") on element of QuestStepValidatedMessage.stepId.");
        }
    }
}

// Generated by Noxus messages 
export class QuestValidatedMessage extends ProtocolMessage {
    constructor(questId) {
        super(6097);
        this.questId = questId;
    }
    serialize() {
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element questId.");
        }
        this.buffer.writeVarShort(this.questId);
    }
    deserialize(buffer) {
        this.questId = buffer.readVarUhShort();
        if (this.questId < 0) {
            Logger.error("Forbidden value (" + this.questId + ") on element of QuestValidatedMessage.questId.");
        }
    }
}

// Generated by Noxus messages 
export class SpellItemBoostMessage extends ProtocolMessage {
    constructor(statId, spellId, value) {
        super(6011);
        this.statId = statId;
        this.spellId = spellId;
        this.value = value;
    }
    serialize() {
        if (this.statId < 0) {
            Logger.error("Forbidden value (" + this.statId + ") on element statId.");
        }
        this.buffer.writeVarInt(this.statId);
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        this.buffer.writeVarShort(this.value);
    }
    deserialize(buffer) {
        this.statId = buffer.readVarUhInt();
        if (this.statId < 0) {
            Logger.error("Forbidden value (" + this.statId + ") on element of SpellItemBoostMessage.statId.");
        }
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of SpellItemBoostMessage.spellId.");
        }
        this.value = buffer.readVarShort();
    }
}

// Generated by Noxus messages 
export class SpellModifyFailureMessage extends ProtocolMessage {
constructor) {
    super(6653);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class SpellModifyRequestMessage extends ProtocolMessage {
    constructor(spellId, spellLevel) {
        super(6655);
        this.spellId = spellId;
        this.spellLevel = spellLevel;
    }
    serialize() {
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        if (this.spellLevel < 1 || this.spellLevel > 6) {
            Logger.error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
        }
        this.buffer.writeByte(this.spellLevel);
    }
    deserialize(buffer) {
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of SpellModifyRequestMessage.spellId.");
        }
        this.spellLevel = buffer.readByte();
        if (this.spellLevel < 1 || this.spellLevel > 6) {
            Logger.error("Forbidden value (" + this.spellLevel + ") on element of SpellModifyRequestMessage.spellLevel.");
        }
    }
}

// Generated by Noxus messages 
export class SpellModifySuccessMessage extends ProtocolMessage {
    constructor(spellId, spellLevel) {
        super(6654);
        this.spellId = spellId;
        this.spellLevel = spellLevel;
    }
    serialize() {
        this.buffer.writeInt(this.spellId);
        if (this.spellLevel < 1 || this.spellLevel > 6) {
            Logger.error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
        }
        this.buffer.writeByte(this.spellLevel);
    }
    deserialize(buffer) {
        this.spellId = buffer.readInt();
        this.spellLevel = buffer.readByte();
        if (this.spellLevel < 1 || this.spellLevel > 6) {
            Logger.error("Forbidden value (" + this.spellLevel + ") on element of SpellModifySuccessMessage.spellLevel.");
        }
    }
}

// Generated by Noxus messages 
export class StatsUpgradeRequestMessage extends ProtocolMessage {
    constructor(useAdditionnal, statId, boostPoint) {
        super(5610);
        this.useAdditionnal = useAdditionnal;
        this.statId = statId;
        this.boostPoint = boostPoint;
    }
    serialize() {
        this.buffer.writeBoolean(this.useAdditionnal);
        this.buffer.writeByte(this.statId);
        if (this.boostPoint < 0) {
            Logger.error("Forbidden value (" + this.boostPoint + ") on element boostPoint.");
        }
        this.buffer.writeVarShort(this.boostPoint);
    }
    deserialize(buffer) {
        this.useAdditionnal = buffer.readBoolean();
        this.statId = buffer.readByte();
        if (this.statId < 0) {
            Logger.error("Forbidden value (" + this.statId + ") on element of StatsUpgradeRequestMessage.statId.");
        }
        this.boostPoint = buffer.readVarUhShort();
        if (this.boostPoint < 0) {
            Logger.error("Forbidden value (" + this.boostPoint + ") on element of StatsUpgradeRequestMessage.boostPoint.");
        }
    }
}

// Generated by Noxus messages 
export class StatsUpgradeResultMessage extends ProtocolMessage {
    constructor(result, nbCharacBoost) {
        super(5609);
        this.result = result;
        this.nbCharacBoost = nbCharacBoost;
    }
    serialize() {
        this.buffer.writeByte(this.result);
        if (this.nbCharacBoost < 0) {
            Logger.error("Forbidden value (" + this.nbCharacBoost + ") on element nbCharacBoost.");
        }
        this.buffer.writeVarShort(this.nbCharacBoost);
    }
    deserialize(buffer) {
        this.result = buffer.readByte();
        this.nbCharacBoost = buffer.readVarUhShort();
        if (this.nbCharacBoost < 0) {
            Logger.error("Forbidden value (" + this.nbCharacBoost + ") on element of StatsUpgradeResultMessage.nbCharacBoost.");
        }
    }
}

// Generated by Noxus messages 
export class PortalUseRequestMessage extends ProtocolMessage {
    constructor(portalId) {
        super(6492);
        this.portalId = portalId;
    }
    serialize() {
        if (this.portalId < 0) {
            Logger.error("Forbidden value (" + this.portalId + ") on element portalId.");
        }
        this.buffer.writeVarInt(this.portalId);
    }
    deserialize(buffer) {
        this.portalId = buffer.readVarUhInt();
        if (this.portalId < 0) {
            Logger.error("Forbidden value (" + this.portalId + ") on element of PortalUseRequestMessage.portalId.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntAvailableRetryCountUpdateMessage extends ProtocolMessage {
    constructor(questType, availableRetryCount) {
        super(6491);
        this.questType = questType;
        this.availableRetryCount = availableRetryCount;
    }
    serialize() {
        this.buffer.writeByte(this.questType);
        this.buffer.writeInt(this.availableRetryCount);
    }
    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            Logger.error("Forbidden value (" + this.questType + ") on element of TreasureHuntAvailableRetryCountUpdateMessage.questType.");
        }
        this.availableRetryCount = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class TreasureHuntDigRequestAnswerFailedMessage extends TreasureHuntDigRequestAnswerMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.wrongFlagCount = param3;
        this.messageId = 6509;
    }
    serialize() {
        super.serialize();
        if (this.wrongFlagCount < 0) {
            Logger.error("Forbidden value (" + this.wrongFlagCount + ") on element wrongFlagCount.");
        }
        this.buffer.writeByte(this.wrongFlagCount);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.wrongFlagCount = buffer.readByte();
        if (this.wrongFlagCount < 0) {
            Logger.error("Forbidden value (" + this.wrongFlagCount + ") on element of TreasureHuntDigRequestAnswerFailedMessage.wrongFlagCount.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntDigRequestAnswerMessage extends ProtocolMessage {
    constructor(questType, result) {
        super(6484);
        this.questType = questType;
        this.result = result;
    }
    serialize() {
        this.buffer.writeByte(this.questType);
        this.buffer.writeByte(this.result);
    }
    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            Logger.error("Forbidden value (" + this.questType + ") on element of TreasureHuntDigRequestAnswerMessage.questType.");
        }
        this.result = buffer.readByte();
        if (this.result < 0) {
            Logger.error("Forbidden value (" + this.result + ") on element of TreasureHuntDigRequestAnswerMessage.result.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntDigRequestMessage extends ProtocolMessage {
    constructor(questType) {
        super(6485);
        this.questType = questType;
    }
    serialize() {
        this.buffer.writeByte(this.questType);
    }
    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            Logger.error("Forbidden value (" + this.questType + ") on element of TreasureHuntDigRequestMessage.questType.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntFinishedMessage extends ProtocolMessage {
    constructor(questType) {
        super(6483);
        this.questType = questType;
    }
    serialize() {
        this.buffer.writeByte(this.questType);
    }
    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            Logger.error("Forbidden value (" + this.questType + ") on element of TreasureHuntFinishedMessage.questType.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntFlagRemoveRequestMessage extends ProtocolMessage {
    constructor(questType, index) {
        super(6510);
        this.questType = questType;
        this.index = index;
    }
    serialize() {
        this.buffer.writeByte(this.questType);
        if (this.index < 0) {
            Logger.error("Forbidden value (" + this.index + ") on element index.");
        }
        this.buffer.writeByte(this.index);
    }
    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            Logger.error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRemoveRequestMessage.questType.");
        }
        this.index = buffer.readByte();
        if (this.index < 0) {
            Logger.error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRemoveRequestMessage.index.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntFlagRequestAnswerMessage extends ProtocolMessage {
    constructor(questType, result, index) {
        super(6507);
        this.questType = questType;
        this.result = result;
        this.index = index;
    }
    serialize() {
        this.buffer.writeByte(this.questType);
        this.buffer.writeByte(this.result);
        if (this.index < 0) {
            Logger.error("Forbidden value (" + this.index + ") on element index.");
        }
        this.buffer.writeByte(this.index);
    }
    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            Logger.error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRequestAnswerMessage.questType.");
        }
        this.result = buffer.readByte();
        if (this.result < 0) {
            Logger.error("Forbidden value (" + this.result + ") on element of TreasureHuntFlagRequestAnswerMessage.result.");
        }
        this.index = buffer.readByte();
        if (this.index < 0) {
            Logger.error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRequestAnswerMessage.index.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntFlagRequestMessage extends ProtocolMessage {
    constructor(questType, index) {
        super(6508);
        this.questType = questType;
        this.index = index;
    }
    serialize() {
        this.buffer.writeByte(this.questType);
        if (this.index < 0) {
            Logger.error("Forbidden value (" + this.index + ") on element index.");
        }
        this.buffer.writeByte(this.index);
    }
    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            Logger.error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRequestMessage.questType.");
        }
        this.index = buffer.readByte();
        if (this.index < 0) {
            Logger.error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRequestMessage.index.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntGiveUpRequestMessage extends ProtocolMessage {
    constructor(questType) {
        super(6487);
        this.questType = questType;
    }
    serialize() {
        this.buffer.writeByte(this.questType);
    }
    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            Logger.error("Forbidden value (" + this.questType + ") on element of TreasureHuntGiveUpRequestMessage.questType.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntLegendaryRequestMessage extends ProtocolMessage {
    constructor(legendaryId) {
        super(6499);
        this.legendaryId = legendaryId;
    }
    serialize() {
        if (this.legendaryId < 0) {
            Logger.error("Forbidden value (" + this.legendaryId + ") on element legendaryId.");
        }
        this.buffer.writeVarShort(this.legendaryId);
    }
    deserialize(buffer) {
        this.legendaryId = buffer.readVarUhShort();
        if (this.legendaryId < 0) {
            Logger.error("Forbidden value (" + this.legendaryId + ") on element of TreasureHuntLegendaryRequestMessage.legendaryId.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntMessage extends ProtocolMessage {
    constructor(questType, startMapId, knownStepsList, totalStepCount, checkPointCurrent, checkPointTotal, availableRetryCount, flags) {
        super(6486);
        this.questType = questType;
        this.startMapId = startMapId;
        this.knownStepsList = knownStepsList;
        this.totalStepCount = totalStepCount;
        this.checkPointCurrent = checkPointCurrent;
        this.checkPointTotal = checkPointTotal;
        this.availableRetryCount = availableRetryCount;
        this.flags = flags;
    }
    serialize() {
        this.buffer.writeByte(this.questType);
        this.buffer.writeInt(this.startMapId);
        this.buffer.writeShort(this.knownStepsList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.knownStepsList.length) {
            this.buffer.writeShort((this.knownStepsList[_loc2_]).protocolId);
            this.knownStepsList[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        if (this.totalStepCount < 0) {
            Logger.error("Forbidden value (" + this.totalStepCount + ") on element totalStepCount.");
        }
        this.buffer.writeByte(this.totalStepCount);
        if (this.checkPointCurrent < 0) {
            Logger.error("Forbidden value (" + this.checkPointCurrent + ") on element checkPointCurrent.");
        }
        this.buffer.writeVarInt(this.checkPointCurrent);
        if (this.checkPointTotal < 0) {
            Logger.error("Forbidden value (" + this.checkPointTotal + ") on element checkPointTotal.");
        }
        this.buffer.writeVarInt(this.checkPointTotal);
        this.buffer.writeInt(this.availableRetryCount);
        this.buffer.writeShort(this.flags.length);
        var _loc3_ = 0;
        while (_loc3_ < this.flags.length) {
            this.flags[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = null;
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            Logger.error("Forbidden value (" + this.questType + ") on element of TreasureHuntMessage.questType.");
        }
        this.startMapId = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(TreasureHuntStep, _loc6_);
            _loc7_.deserialize(buffer);
            this.knownStepsList.push(_loc7_);
            _loc3_++;
        }
        this.totalStepCount = buffer.readByte();
        if (this.totalStepCount < 0) {
            Logger.error("Forbidden value (" + this.totalStepCount + ") on element of TreasureHuntMessage.totalStepCount.");
        }
        this.checkPointCurrent = buffer.readVarUhInt();
        if (this.checkPointCurrent < 0) {
            Logger.error("Forbidden value (" + this.checkPointCurrent + ") on element of TreasureHuntMessage.checkPointCurrent.");
        }
        this.checkPointTotal = buffer.readVarUhInt();
        if (this.checkPointTotal < 0) {
            Logger.error("Forbidden value (" + this.checkPointTotal + ") on element of TreasureHuntMessage.checkPointTotal.");
        }
        this.availableRetryCount = buffer.readInt();
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = new TreasureHuntFlag();
            _loc8_.deserialize(buffer);
            this.flags.push(_loc8_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntRequestAnswerMessage extends ProtocolMessage {
    constructor(questType, result) {
        super(6489);
        this.questType = questType;
        this.result = result;
    }
    serialize() {
        this.buffer.writeByte(this.questType);
        this.buffer.writeByte(this.result);
    }
    deserialize(buffer) {
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            Logger.error("Forbidden value (" + this.questType + ") on element of TreasureHuntRequestAnswerMessage.questType.");
        }
        this.result = buffer.readByte();
        if (this.result < 0) {
            Logger.error("Forbidden value (" + this.result + ") on element of TreasureHuntRequestAnswerMessage.result.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntRequestMessage extends ProtocolMessage {
    constructor(questLevel, questType) {
        super(6488);
        this.questLevel = questLevel;
        this.questType = questType;
    }
    serialize() {
        if (this.questLevel < 1 || this.questLevel > 200) {
            Logger.error("Forbidden value (" + this.questLevel + ") on element questLevel.");
        }
        this.buffer.writeByte(this.questLevel);
        this.buffer.writeByte(this.questType);
    }
    deserialize(buffer) {
        this.questLevel = buffer.readUnsignedByte();
        if (this.questLevel < 1 || this.questLevel > 200) {
            Logger.error("Forbidden value (" + this.questLevel + ") on element of TreasureHuntRequestMessage.questLevel.");
        }
        this.questType = buffer.readByte();
        if (this.questType < 0) {
            Logger.error("Forbidden value (" + this.questType + ") on element of TreasureHuntRequestMessage.questType.");
        }
    }
}

// Generated by Noxus messages 
export class TreasureHuntShowLegendaryUIMessage extends ProtocolMessage {
    constructor(availableLegendaryIds) {
        super(6498);
        this.availableLegendaryIds = availableLegendaryIds;
    }
    serialize() {
        this.buffer.writeShort(this.availableLegendaryIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.availableLegendaryIds.length) {
            if (this.availableLegendaryIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.availableLegendaryIds[_loc2_] + ") on element 1 (starting at 1) of availableLegendaryIds.");
            }
            this.buffer.writeVarShort(this.availableLegendaryIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of availableLegendaryIds.");
            }
            this.availableLegendaryIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlaySpellAnimMessage extends ProtocolMessage {
    constructor(casterId, targetCellId, spellId, spellLevel) {
        super(6114);
        this.casterId = casterId;
        this.targetCellId = targetCellId;
        this.spellId = spellId;
        this.spellLevel = spellLevel;
    }
    serialize() {
        if (this.casterId < 0 || this.casterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.casterId + ") on element casterId.");
        }
        this.buffer.writeVarLong(this.casterId);
        if (this.targetCellId < 0 || this.targetCellId > 559) {
            Logger.error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
        }
        this.buffer.writeVarShort(this.targetCellId);
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeVarShort(this.spellId);
        if (this.spellLevel < 1 || this.spellLevel > 6) {
            Logger.error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
        }
        this.buffer.writeByte(this.spellLevel);
    }
    deserialize(buffer) {
        this.casterId = buffer.readVarUhLong();
        if (this.casterId < 0 || this.casterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.casterId + ") on element of GameRolePlaySpellAnimMessage.casterId.");
        }
        this.targetCellId = buffer.readVarUhShort();
        if (this.targetCellId < 0 || this.targetCellId > 559) {
            Logger.error("Forbidden value (" + this.targetCellId + ") on element of GameRolePlaySpellAnimMessage.targetCellId.");
        }
        this.spellId = buffer.readVarUhShort();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of GameRolePlaySpellAnimMessage.spellId.");
        }
        this.spellLevel = buffer.readByte();
        if (this.spellLevel < 1 || this.spellLevel > 6) {
            Logger.error("Forbidden value (" + this.spellLevel + ") on element of GameRolePlaySpellAnimMessage.spellLevel.");
        }
    }
}

// Generated by Noxus messages 
export class DareCanceledMessage extends ProtocolMessage {
    constructor(dareId) {
        super(6679);
        this.dareId = dareId;
    }
    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
    }
    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element of DareCanceledMessage.dareId.");
        }
    }
}

// Generated by Noxus messages 
export class DareCancelRequestMessage extends ProtocolMessage {
    constructor(dareId) {
        super(6680);
        this.dareId = dareId;
    }
    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
    }
    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element of DareCancelRequestMessage.dareId.");
        }
    }
}

// Generated by Noxus messages 
export class DareCreatedListMessage extends ProtocolMessage {
    constructor(daresFixedInfos, daresVersatilesInfos) {
        super(6663);
        this.daresFixedInfos = daresFixedInfos;
        this.daresVersatilesInfos = daresVersatilesInfos;
    }
    serialize() {
        this.buffer.writeShort(this.daresFixedInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.daresFixedInfos.length) {
            this.daresFixedInfos[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.daresVersatilesInfos.length);
        var _loc3_ = 0;
        while (_loc3_ < this.daresVersatilesInfos.length) {
            this.daresVersatilesInfos[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new DareInformations();
            _loc6_.deserialize(buffer);
            this.daresFixedInfos.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new DareVersatileInformations();
            _loc7_.deserialize(buffer);
            this.daresVersatilesInfos.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class DareCreatedMessage extends ProtocolMessage {
    constructor(dareInfos, needNotifications) {
        super(6668);
        this.dareInfos = dareInfos;
        this.needNotifications = needNotifications;
    }
    serialize() {
        this.dareInfos.serialize(this.buffer);
        this.buffer.writeBoolean(this.needNotifications);
    }
    deserialize(buffer) {
        this.dareInfos = new DareInformations();
        this.dareInfos.deserialize(buffer);
        this.needNotifications = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class DareCreationRequestMessage extends ProtocolMessage {
    constructor(subscriptionFee, jackpot, maxCountWinners, delayBeforeStart, duration, isPrivate, isForGuild, isForAlliance, needNotifications, criterions) {
        super(6665);
        this.subscriptionFee = subscriptionFee;
        this.jackpot = jackpot;
        this.maxCountWinners = maxCountWinners;
        this.delayBeforeStart = delayBeforeStart;
        this.duration = duration;
        this.isPrivate = isPrivate;
        this.isForGuild = isForGuild;
        this.isForAlliance = isForAlliance;
        this.needNotifications = needNotifications;
        this.criterions = criterions;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.isPrivate);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.isForGuild);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 2, this.isForAlliance);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 3, this.needNotifications);
        this.buffer.writeByte(_loc2_);
        if (this.subscriptionFee < 0) {
            Logger.error("Forbidden value (" + this.subscriptionFee + ") on element subscriptionFee.");
        }
        this.buffer.writeInt(this.subscriptionFee);
        if (this.jackpot < 0) {
            Logger.error("Forbidden value (" + this.jackpot + ") on element jackpot.");
        }
        this.buffer.writeInt(this.jackpot);
        if (this.maxCountWinners < 0 || this.maxCountWinners > 65535) {
            Logger.error("Forbidden value (" + this.maxCountWinners + ") on element maxCountWinners.");
        }
        this.buffer.writeShort(this.maxCountWinners);
        if (this.delayBeforeStart < 0 || this.delayBeforeStart > 4294967295) {
            Logger.error("Forbidden value (" + this.delayBeforeStart + ") on element delayBeforeStart.");
        }
        this.buffer.writeUnsignedInt(this.delayBeforeStart);
        if (this.duration < 0 || this.duration > 4294967295) {
            Logger.error("Forbidden value (" + this.duration + ") on element duration.");
        }
        this.buffer.writeUnsignedInt(this.duration);
        this.buffer.writeShort(this.criterions.length);
        var _loc3_ = 0;
        while (_loc3_ < this.criterions.length) {
            this.criterions[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc5_ = null;
        var _loc2_ = buffer.readByte();
        this.isPrivate = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.isForGuild = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.isForAlliance = IO.BooleanByteWrapper.getFlag(_loc2_, 2);
        this.needNotifications = IO.BooleanByteWrapper.getFlag(_loc2_, 3);
        this.subscriptionFee = buffer.readInt();
        if (this.subscriptionFee < 0) {
            Logger.error("Forbidden value (" + this.subscriptionFee + ") on element of DareCreationRequestMessage.subscriptionFee.");
        }
        this.jackpot = buffer.readInt();
        if (this.jackpot < 0) {
            Logger.error("Forbidden value (" + this.jackpot + ") on element of DareCreationRequestMessage.jackpot.");
        }
        this.maxCountWinners = buffer.readUnsignedShort();
        if (this.maxCountWinners < 0 || this.maxCountWinners > 65535) {
            Logger.error("Forbidden value (" + this.maxCountWinners + ") on element of DareCreationRequestMessage.maxCountWinners.");
        }
        this.delayBeforeStart = buffer.readUnsignedInt();
        if (this.delayBeforeStart < 0 || this.delayBeforeStart > 4294967295) {
            Logger.error("Forbidden value (" + this.delayBeforeStart + ") on element of DareCreationRequestMessage.delayBeforeStart.");
        }
        this.duration = buffer.readUnsignedInt();
        if (this.duration < 0 || this.duration > 4294967295) {
            Logger.error("Forbidden value (" + this.duration + ") on element of DareCreationRequestMessage.duration.");
        }
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc5_ = new DareCriteria();
            _loc5_.deserialize(buffer);
            this.criterions.push(_loc5_);
            _loc4_++;
        }
    }
}

// Generated by Noxus messages 
export class DareErrorMessage extends ProtocolMessage {
    constructor(error) {
        super(6667);
        this.error = error;
    }
    serialize() {
        this.buffer.writeByte(this.error);
    }
    deserialize(buffer) {
        this.error = buffer.readByte();
        if (this.error < 0) {
            Logger.error("Forbidden value (" + this.error + ") on element of DareErrorMessage.error.");
        }
    }
}

// Generated by Noxus messages 
export class DareInformationsMessage extends ProtocolMessage {
    constructor(dareFixedInfos, dareVersatilesInfos) {
        super(6656);
        this.dareFixedInfos = dareFixedInfos;
        this.dareVersatilesInfos = dareVersatilesInfos;
    }
    serialize() {
        this.dareFixedInfos.serialize(this.buffer);
        this.dareVersatilesInfos.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.dareFixedInfos = new DareInformations();
        this.dareFixedInfos.deserialize(buffer);
        this.dareVersatilesInfos = new DareVersatileInformations();
        this.dareVersatilesInfos.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class DareInformationsRequestMessage extends ProtocolMessage {
    constructor(dareId) {
        super(6659);
        this.dareId = dareId;
    }
    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
    }
    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element of DareInformationsRequestMessage.dareId.");
        }
    }
}

// Generated by Noxus messages 
export class DareListMessage extends ProtocolMessage {
    constructor(dares) {
        super(6661);
        this.dares = dares;
    }
    serialize() {
        this.buffer.writeShort(this.dares.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dares.length) {
            this.dares[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DareInformations();
            _loc4_.deserialize(buffer);
            this.dares.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class DareRewardConsumeRequestMessage extends ProtocolMessage {
    constructor(dareId, type) {
        super(6676);
        this.dareId = dareId;
        this.type = type;
    }
    serialize() {
        if (this.dareId < -9007199254740990 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
        this.buffer.writeByte(this.type);
    }
    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < -9007199254740990 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element of DareRewardConsumeRequestMessage.dareId.");
        }
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of DareRewardConsumeRequestMessage.type.");
        }
    }
}

// Generated by Noxus messages 
export class DareRewardConsumeValidationMessage extends ProtocolMessage {
    constructor(dareId, type) {
        super(6675);
        this.dareId = dareId;
        this.type = type;
    }
    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
        this.buffer.writeByte(this.type);
    }
    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element of DareRewardConsumeValidationMessage.dareId.");
        }
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of DareRewardConsumeValidationMessage.type.");
        }
    }
}

// Generated by Noxus messages 
export class DareRewardsListMessage extends ProtocolMessage {
    constructor(rewards) {
        super(6677);
        this.rewards = rewards;
    }
    serialize() {
        this.buffer.writeShort(this.rewards.length);
        var _loc2_ = 0;
        while (_loc2_ < this.rewards.length) {
            this.rewards[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DareReward();
            _loc4_.deserialize(buffer);
            this.rewards.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class DareRewardWonMessage extends ProtocolMessage {
    constructor(reward) {
        super(6678);
        this.reward = reward;
    }
    serialize() {
        this.reward.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.reward = new DareReward();
        this.reward.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class DareSubscribedListMessage extends ProtocolMessage {
    constructor(daresFixedInfos, daresVersatilesInfos) {
        super(6658);
        this.daresFixedInfos = daresFixedInfos;
        this.daresVersatilesInfos = daresVersatilesInfos;
    }
    serialize() {
        this.buffer.writeShort(this.daresFixedInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.daresFixedInfos.length) {
            this.daresFixedInfos[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.daresVersatilesInfos.length);
        var _loc3_ = 0;
        while (_loc3_ < this.daresVersatilesInfos.length) {
            this.daresVersatilesInfos[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new DareInformations();
            _loc6_.deserialize(buffer);
            this.daresFixedInfos.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new DareVersatileInformations();
            _loc7_.deserialize(buffer);
            this.daresVersatilesInfos.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class DareSubscribedMessage extends ProtocolMessage {
    constructor(dareId, success, subscribe, dareVersatilesInfos) {
        super(6660);
        this.dareId = dareId;
        this.success = success;
        this.subscribe = subscribe;
        this.dareVersatilesInfos = dareVersatilesInfos;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.success);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.subscribe);
        this.buffer.writeByte(_loc2_);
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
        this.dareVersatilesInfos.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.success = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.subscribe = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element of DareSubscribedMessage.dareId.");
        }
        this.dareVersatilesInfos = new DareVersatileInformations();
        this.dareVersatilesInfos.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class DareSubscribeRequestMessage extends ProtocolMessage {
    constructor(dareId, subscribe) {
        super(6666);
        this.dareId = dareId;
        this.subscribe = subscribe;
    }
    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
        this.buffer.writeBoolean(this.subscribe);
    }
    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element of DareSubscribeRequestMessage.dareId.");
        }
        this.subscribe = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class DareVersatileListMessage extends ProtocolMessage {
    constructor(dares) {
        super(6657);
        this.dares = dares;
    }
    serialize() {
        this.buffer.writeShort(this.dares.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dares.length) {
            this.dares[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DareVersatileInformations();
            _loc4_.deserialize(buffer);
            this.dares.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class DareWonListMessage extends ProtocolMessage {
    constructor(dareId) {
        super(6682);
        this.dareId = dareId;
    }
    serialize() {
        this.buffer.writeShort(this.dareId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.dareId.length) {
            if (this.dareId[_loc2_] < 0 || this.dareId[_loc2_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.dareId[_loc2_] + ") on element 1 (starting at 1) of dareId.");
            }
            this.buffer.writeDouble(this.dareId[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readDouble();
            if (_loc4_ < 0 || _loc4_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of dareId.");
            }
            this.dareId.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class DareWonMessage extends ProtocolMessage {
    constructor(dareId) {
        super(6681);
        this.dareId = dareId;
    }
    serialize() {
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element dareId.");
        }
        this.buffer.writeDouble(this.dareId);
    }
    deserialize(buffer) {
        this.dareId = buffer.readDouble();
        if (this.dareId < 0 || this.dareId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.dareId + ") on element of DareWonMessage.dareId.");
        }
    }
}

// Generated by Noxus messages 
export class LeaveDialogMessage extends ProtocolMessage {
    constructor(dialogType) {
        super(5502);
        this.dialogType = dialogType;
    }
    serialize() {
        this.buffer.writeByte(this.dialogType);
    }
    deserialize(buffer) {
        this.dialogType = buffer.readByte();
        if (this.dialogType < 0) {
            Logger.error("Forbidden value (" + this.dialogType + ") on element of LeaveDialogMessage.dialogType.");
        }
    }
}

// Generated by Noxus messages 
export class LeaveDialogRequestMessage extends ProtocolMessage {
constructor) {
    super(5501);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class PauseDialogMessage extends ProtocolMessage {
    constructor(dialogType) {
        super(6012);
        this.dialogType = dialogType;
    }
    serialize() {
        this.buffer.writeByte(this.dialogType);
    }
    deserialize(buffer) {
        this.dialogType = buffer.readByte();
        if (this.dialogType < 0) {
            Logger.error("Forbidden value (" + this.dialogType + ") on element of PauseDialogMessage.dialogType.");
        }
    }
}

// Generated by Noxus messages 
export class FriendAddedMessage extends ProtocolMessage {
    constructor(friendAdded) {
        super(5599);
        this.friendAdded = friendAdded;
    }
    serialize() {
        this.buffer.writeShort(this.friendAdded.protocolId);
        this.friendAdded.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.friendAdded = ProtocolTypeManager.getInstance(FriendInformations, _loc2_);
        this.friendAdded.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class FriendAddFailureMessage extends ProtocolMessage {
    constructor(reason) {
        super(5600);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of FriendAddFailureMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class FriendAddRequestMessage extends ProtocolMessage {
    constructor(name) {
        super(4004);
        this.name = name;
    }
    serialize() {
        this.buffer.writeUTF(this.name);
    }
    deserialize(buffer) {
        this.name = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class FriendDeleteRequestMessage extends ProtocolMessage {
    constructor(accountId) {
        super(5603);
        this.accountId = accountId;
    }
    serialize() {
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
    }
    deserialize(buffer) {
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of FriendDeleteRequestMessage.accountId.");
        }
    }
}

// Generated by Noxus messages 
export class FriendDeleteResultMessage extends ProtocolMessage {
    constructor(success, name) {
        super(5601);
        this.success = success;
        this.name = name;
    }
    serialize() {
        this.buffer.writeBoolean(this.success);
        this.buffer.writeUTF(this.name);
    }
    deserialize(buffer) {
        this.success = buffer.readBoolean();
        this.name = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class FriendJoinRequestMessage extends ProtocolMessage {
    constructor(name) {
        super(5605);
        this.name = name;
    }
    serialize() {
        this.buffer.writeUTF(this.name);
    }
    deserialize(buffer) {
        this.name = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class FriendSetWarnOnConnectionMessage extends ProtocolMessage {
    constructor(enable) {
        super(5602);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class FriendSetWarnOnLevelGainMessage extends ProtocolMessage {
    constructor(enable) {
        super(6077);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class FriendsGetListMessage extends ProtocolMessage {
constructor) {
    super(4001);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class FriendsListMessage extends ProtocolMessage {
    constructor(friendsList) {
        super(4002);
        this.friendsList = friendsList;
    }
    serialize() {
        this.buffer.writeShort(this.friendsList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.friendsList.length) {
            this.buffer.writeShort((this.friendsList[_loc2_]).protocolId);
            this.friendsList[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(FriendInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.friendsList.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class FriendSpouseFollowWithCompassRequestMessage extends ProtocolMessage {
    constructor(enable) {
        super(5606);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class FriendSpouseJoinRequestMessage extends ProtocolMessage {
constructor) {
    super(5604);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class FriendUpdateMessage extends ProtocolMessage {
    constructor(friendUpdated) {
        super(5924);
        this.friendUpdated = friendUpdated;
    }
    serialize() {
        this.buffer.writeShort(this.friendUpdated.protocolId);
        this.friendUpdated.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.friendUpdated = ProtocolTypeManager.getInstance(FriendInformations, _loc2_);
        this.friendUpdated.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class FriendWarnOnConnectionStateMessage extends ProtocolMessage {
    constructor(enable) {
        super(5630);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class FriendWarnOnLevelGainStateMessage extends ProtocolMessage {
    constructor(enable) {
        super(6078);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GuildMemberSetWarnOnConnectionMessage extends ProtocolMessage {
    constructor(enable) {
        super(6159);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GuildMemberWarnOnConnectionStateMessage extends ProtocolMessage {
    constructor(enable) {
        super(6160);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class IgnoredAddedMessage extends ProtocolMessage {
    constructor(ignoreAdded, session) {
        super(5678);
        this.ignoreAdded = ignoreAdded;
        this.session = session;
    }
    serialize() {
        this.buffer.writeShort(this.ignoreAdded.protocolId);
        this.ignoreAdded.serialize(this.buffer);
        this.buffer.writeBoolean(this.session);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.ignoreAdded = ProtocolTypeManager.getInstance(IgnoredInformations, _loc2_);
        this.ignoreAdded.deserialize(buffer);
        this.session = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class IgnoredAddFailureMessage extends ProtocolMessage {
    constructor(reason) {
        super(5679);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of IgnoredAddFailureMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class IgnoredAddRequestMessage extends ProtocolMessage {
    constructor(name, session) {
        super(5673);
        this.name = name;
        this.session = session;
    }
    serialize() {
        this.buffer.writeUTF(this.name);
        this.buffer.writeBoolean(this.session);
    }
    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.session = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class IgnoredDeleteRequestMessage extends ProtocolMessage {
    constructor(accountId, session) {
        super(5680);
        this.accountId = accountId;
        this.session = session;
    }
    serialize() {
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element accountId.");
        }
        this.buffer.writeInt(this.accountId);
        this.buffer.writeBoolean(this.session);
    }
    deserialize(buffer) {
        this.accountId = buffer.readInt();
        if (this.accountId < 0) {
            Logger.error("Forbidden value (" + this.accountId + ") on element of IgnoredDeleteRequestMessage.accountId.");
        }
        this.session = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class IgnoredDeleteResultMessage extends ProtocolMessage {
    constructor(success, name, session) {
        super(5677);
        this.success = success;
        this.name = name;
        this.session = session;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.success);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.session);
        this.buffer.writeByte(_loc2_);
        this.buffer.writeUTF(this.name);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.success = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.session = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.name = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class IgnoredGetListMessage extends ProtocolMessage {
constructor) {
    super(5676);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class IgnoredListMessage extends ProtocolMessage {
    constructor(ignoredList) {
        super(5674);
        this.ignoredList = ignoredList;
    }
    serialize() {
        this.buffer.writeShort(this.ignoredList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ignoredList.length) {
            this.buffer.writeShort((this.ignoredList[_loc2_]).protocolId);
            this.ignoredList[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(IgnoredInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.ignoredList.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class SpouseGetInformationsMessage extends ProtocolMessage {
constructor) {
    super(6355);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class SpouseInformationsMessage extends ProtocolMessage {
    constructor(spouse) {
        super(6356);
        this.spouse = spouse;
    }
    serialize() {
        this.buffer.writeShort(this.spouse.protocolId);
        this.spouse.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.spouse = ProtocolTypeManager.getInstance(FriendSpouseInformations, _loc2_);
        this.spouse.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class SpouseStatusMessage extends ProtocolMessage {
    constructor(hasSpouse) {
        super(6265);
        this.hasSpouse = hasSpouse;
    }
    serialize() {
        this.buffer.writeBoolean(this.hasSpouse);
    }
    deserialize(buffer) {
        this.hasSpouse = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class WarnOnPermaDeathStateMessage extends ProtocolMessage {
    constructor(enable) {
        super(6513);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GuestLimitationMessage extends ProtocolMessage {
    constructor(reason) {
        super(6506);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of GuestLimitationMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class GuestModeMessage extends ProtocolMessage {
    constructor(active) {
        super(6505);
        this.active = active;
    }
    serialize() {
        this.buffer.writeBoolean(this.active);
    }
    deserialize(buffer) {
        this.active = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class ChallengeFightJoinRefusedMessage extends ProtocolMessage {
    constructor(playerId, reason) {
        super(5908);
        this.playerId = playerId;
        this.reason = reason;
    }
    serialize() {
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of ChallengeFightJoinRefusedMessage.playerId.");
        }
        this.reason = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class GuildBulletinMessage extends BulletinMessage {
    constructor(param1, param2, param3, param4, param5) {
        super(param1, param2, param3, param4, param5);
        this.messageId = 6689;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildBulletinSetErrorMessage extends SocialNoticeSetErrorMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6691;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildBulletinSetRequestMessage extends SocialNoticeSetRequestMessage {
    constructor(param1, param2) {
        this.content = param1;
        this.notifyMembers = param2;
        this.messageId = 6694;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.content);
        this.buffer.writeBoolean(this.notifyMembers);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.content = buffer.readUTF();
        this.notifyMembers = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GuildChangeMemberParametersMessage extends ProtocolMessage {
    constructor(memberId, rank, experienceGivenPercent, rights) {
        super(5549);
        this.memberId = memberId;
        this.rank = rank;
        this.experienceGivenPercent = experienceGivenPercent;
        this.rights = rights;
    }
    serialize() {
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        if (this.rank < 0) {
            Logger.error("Forbidden value (" + this.rank + ") on element rank.");
        }
        this.buffer.writeVarShort(this.rank);
        if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
            Logger.error("Forbidden value (" + this.experienceGivenPercent + ") on element experienceGivenPercent.");
        }
        this.buffer.writeByte(this.experienceGivenPercent);
        if (this.rights < 0) {
            Logger.error("Forbidden value (" + this.rights + ") on element rights.");
        }
        this.buffer.writeVarInt(this.rights);
    }
    deserialize(buffer) {
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element of GuildChangeMemberParametersMessage.memberId.");
        }
        this.rank = buffer.readVarUhShort();
        if (this.rank < 0) {
            Logger.error("Forbidden value (" + this.rank + ") on element of GuildChangeMemberParametersMessage.rank.");
        }
        this.experienceGivenPercent = buffer.readByte();
        if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
            Logger.error("Forbidden value (" + this.experienceGivenPercent + ") on element of GuildChangeMemberParametersMessage.experienceGivenPercent.");
        }
        this.rights = buffer.readVarUhInt();
        if (this.rights < 0) {
            Logger.error("Forbidden value (" + this.rights + ") on element of GuildChangeMemberParametersMessage.rights.");
        }
    }
}

// Generated by Noxus messages 
export class GuildCharacsUpgradeRequestMessage extends ProtocolMessage {
    constructor(charaTypeTarget) {
        super(5706);
        this.charaTypeTarget = charaTypeTarget;
    }
    serialize() {
        this.buffer.writeByte(this.charaTypeTarget);
    }
    deserialize(buffer) {
        this.charaTypeTarget = buffer.readByte();
        if (this.charaTypeTarget < 0) {
            Logger.error("Forbidden value (" + this.charaTypeTarget + ") on element of GuildCharacsUpgradeRequestMessage.charaTypeTarget.");
        }
    }
}

// Generated by Noxus messages 
export class GuildCreationResultMessage extends ProtocolMessage {
    constructor(result) {
        super(5554);
        this.result = result;
    }
    serialize() {
        this.buffer.writeByte(this.result);
    }
    deserialize(buffer) {
        this.result = buffer.readByte();
        if (this.result < 0) {
            Logger.error("Forbidden value (" + this.result + ") on element of GuildCreationResultMessage.result.");
        }
    }
}

// Generated by Noxus messages 
export class GuildCreationStartedMessage extends ProtocolMessage {
constructor) {
    super(5920);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GuildCreationValidMessage extends ProtocolMessage {
    constructor(guildName, guildEmblem) {
        super(5546);
        this.guildName = guildName;
        this.guildEmblem = guildEmblem;
    }
    serialize() {
        this.buffer.writeUTF(this.guildName);
        this.guildEmblem.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.guildName = buffer.readUTF();
        this.guildEmblem = new GuildEmblem();
        this.guildEmblem.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildFactsErrorMessage extends ProtocolMessage {
    constructor(guildId) {
        super(6424);
        this.guildId = guildId;
    }
    serialize() {
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
    }
    deserialize(buffer) {
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element of GuildFactsErrorMessage.guildId.");
        }
    }
}

// Generated by Noxus messages 
export class GuildFactsMessage extends ProtocolMessage {
    constructor(infos, creationDate, nbTaxCollectors, enabled, members) {
        super(6415);
        this.infos = infos;
        this.creationDate = creationDate;
        this.nbTaxCollectors = nbTaxCollectors;
        this.enabled = enabled;
        this.members = members;
    }
    serialize() {
        this.buffer.writeShort(this.infos.protocolId);
        this.infos.serialize(this.buffer);
        if (this.creationDate < 0) {
            Logger.error("Forbidden value (" + this.creationDate + ") on element creationDate.");
        }
        this.buffer.writeInt(this.creationDate);
        if (this.nbTaxCollectors < 0) {
            Logger.error("Forbidden value (" + this.nbTaxCollectors + ") on element nbTaxCollectors.");
        }
        this.buffer.writeVarShort(this.nbTaxCollectors);
        this.buffer.writeBoolean(this.enabled);
        this.buffer.writeShort(this.members.length);
        var _loc2_ = 0;
        while (_loc2_ < this.members.length) {
            this.members[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        this.infos = ProtocolTypeManager.getInstance(GuildFactSheetInformations, _loc2_);
        this.infos.deserialize(buffer);
        this.creationDate = buffer.readInt();
        if (this.creationDate < 0) {
            Logger.error("Forbidden value (" + this.creationDate + ") on element of GuildFactsMessage.creationDate.");
        }
        this.nbTaxCollectors = buffer.readVarUhShort();
        if (this.nbTaxCollectors < 0) {
            Logger.error("Forbidden value (" + this.nbTaxCollectors + ") on element of GuildFactsMessage.nbTaxCollectors.");
        }
        this.enabled = buffer.readBoolean();
        var _loc3_ = buffer.readUnsignedShort();
        var _loc4_ = 0;
        while (_loc4_ < _loc3_) {
            _loc5_ = new CharacterMinimalInformations();
            _loc5_.deserialize(buffer);
            this.members.push(_loc5_);
            _loc4_++;
        }
    }
}

// Generated by Noxus messages 
export class GuildFactsRequestMessage extends ProtocolMessage {
    constructor(guildId) {
        super(6404);
        this.guildId = guildId;
    }
    serialize() {
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element guildId.");
        }
        this.buffer.writeVarInt(this.guildId);
    }
    deserialize(buffer) {
        this.guildId = buffer.readVarUhInt();
        if (this.guildId < 0) {
            Logger.error("Forbidden value (" + this.guildId + ") on element of GuildFactsRequestMessage.guildId.");
        }
    }
}

// Generated by Noxus messages 
export class GuildGetInformationsMessage extends ProtocolMessage {
    constructor(infoType) {
        super(5550);
        this.infoType = infoType;
    }
    serialize() {
        this.buffer.writeByte(this.infoType);
    }
    deserialize(buffer) {
        this.infoType = buffer.readByte();
        if (this.infoType < 0) {
            Logger.error("Forbidden value (" + this.infoType + ") on element of GuildGetInformationsMessage.infoType.");
        }
    }
}

// Generated by Noxus messages 
export class GuildHouseRemoveMessage extends ProtocolMessage {
    constructor(houseId) {
        super(6180);
        this.houseId = houseId;
    }
    serialize() {
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
    }
    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element of GuildHouseRemoveMessage.houseId.");
        }
    }
}

// Generated by Noxus messages 
export class GuildHousesInformationMessage extends ProtocolMessage {
    constructor(housesInformations) {
        super(5919);
        this.housesInformations = housesInformations;
    }
    serialize() {
        this.buffer.writeShort(this.housesInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.housesInformations.length) {
            this.housesInformations[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new HouseInformationsForGuild();
            _loc4_.deserialize(buffer);
            this.housesInformations.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GuildHouseTeleportRequestMessage extends ProtocolMessage {
    constructor(houseId) {
        super(5712);
        this.houseId = houseId;
    }
    serialize() {
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element houseId.");
        }
        this.buffer.writeVarInt(this.houseId);
    }
    deserialize(buffer) {
        this.houseId = buffer.readVarUhInt();
        if (this.houseId < 0) {
            Logger.error("Forbidden value (" + this.houseId + ") on element of GuildHouseTeleportRequestMessage.houseId.");
        }
    }
}

// Generated by Noxus messages 
export class GuildHouseUpdateInformationMessage extends ProtocolMessage {
    constructor(housesInformations) {
        super(6181);
        this.housesInformations = housesInformations;
    }
    serialize() {
        this.housesInformations.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.housesInformations = new HouseInformationsForGuild();
        this.housesInformations.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildInAllianceFactsMessage extends GuildFactsMessage {
    constructor(param1, param2, param3, param4, param5, param6) {
        super(param1, param2, param3, param4, param5);
        this.allianceInfos = param6;
        this.messageId = 6422;
    }
    serialize() {
        super.serialize();
        this.allianceInfos.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.allianceInfos = new BasicNamedAllianceInformations();
        this.allianceInfos.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildInformationsGeneralMessage extends ProtocolMessage {
    constructor(enabled, abandonnedPaddock, level, expLevelFloor, experience, expNextLevelFloor, creationDate, nbTotalMembers, nbConnectedMembers) {
        super(5557);
        this.enabled = enabled;
        this.abandonnedPaddock = abandonnedPaddock;
        this.level = level;
        this.expLevelFloor = expLevelFloor;
        this.experience = experience;
        this.expNextLevelFloor = expNextLevelFloor;
        this.creationDate = creationDate;
        this.nbTotalMembers = nbTotalMembers;
        this.nbConnectedMembers = nbConnectedMembers;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.enabled);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.abandonnedPaddock);
        this.buffer.writeByte(_loc2_);
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element level.");
        }
        this.buffer.writeByte(this.level);
        if (this.expLevelFloor < 0 || this.expLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.expLevelFloor + ") on element expLevelFloor.");
        }
        this.buffer.writeVarLong(this.expLevelFloor);
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element experience.");
        }
        this.buffer.writeVarLong(this.experience);
        if (this.expNextLevelFloor < 0 || this.expNextLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.expNextLevelFloor + ") on element expNextLevelFloor.");
        }
        this.buffer.writeVarLong(this.expNextLevelFloor);
        if (this.creationDate < 0) {
            Logger.error("Forbidden value (" + this.creationDate + ") on element creationDate.");
        }
        this.buffer.writeInt(this.creationDate);
        if (this.nbTotalMembers < 0) {
            Logger.error("Forbidden value (" + this.nbTotalMembers + ") on element nbTotalMembers.");
        }
        this.buffer.writeVarShort(this.nbTotalMembers);
        if (this.nbConnectedMembers < 0) {
            Logger.error("Forbidden value (" + this.nbConnectedMembers + ") on element nbConnectedMembers.");
        }
        this.buffer.writeVarShort(this.nbConnectedMembers);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.enabled = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.abandonnedPaddock = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.level = buffer.readUnsignedByte();
        if (this.level < 0 || this.level > 255) {
            Logger.error("Forbidden value (" + this.level + ") on element of GuildInformationsGeneralMessage.level.");
        }
        this.expLevelFloor = buffer.readVarUhLong();
        if (this.expLevelFloor < 0 || this.expLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.expLevelFloor + ") on element of GuildInformationsGeneralMessage.expLevelFloor.");
        }
        this.experience = buffer.readVarUhLong();
        if (this.experience < 0 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element of GuildInformationsGeneralMessage.experience.");
        }
        this.expNextLevelFloor = buffer.readVarUhLong();
        if (this.expNextLevelFloor < 0 || this.expNextLevelFloor > 9007199254740990) {
            Logger.error("Forbidden value (" + this.expNextLevelFloor + ") on element of GuildInformationsGeneralMessage.expNextLevelFloor.");
        }
        this.creationDate = buffer.readInt();
        if (this.creationDate < 0) {
            Logger.error("Forbidden value (" + this.creationDate + ") on element of GuildInformationsGeneralMessage.creationDate.");
        }
        this.nbTotalMembers = buffer.readVarUhShort();
        if (this.nbTotalMembers < 0) {
            Logger.error("Forbidden value (" + this.nbTotalMembers + ") on element of GuildInformationsGeneralMessage.nbTotalMembers.");
        }
        this.nbConnectedMembers = buffer.readVarUhShort();
        if (this.nbConnectedMembers < 0) {
            Logger.error("Forbidden value (" + this.nbConnectedMembers + ") on element of GuildInformationsGeneralMessage.nbConnectedMembers.");
        }
    }
}

// Generated by Noxus messages 
export class GuildInformationsMembersMessage extends ProtocolMessage {
    constructor(members) {
        super(5558);
        this.members = members;
    }
    serialize() {
        this.buffer.writeShort(this.members.length);
        var _loc2_ = 0;
        while (_loc2_ < this.members.length) {
            this.members[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GuildMember();
            _loc4_.deserialize(buffer);
            this.members.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GuildInformationsMemberUpdateMessage extends ProtocolMessage {
    constructor(member) {
        super(5597);
        this.member = member;
    }
    serialize() {
        this.member.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.member = new GuildMember();
        this.member.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildInformationsPaddocksMessage extends ProtocolMessage {
    constructor(nbPaddockMax, paddocksInformations) {
        super(5959);
        this.nbPaddockMax = nbPaddockMax;
        this.paddocksInformations = paddocksInformations;
    }
    serialize() {
        if (this.nbPaddockMax < 0) {
            Logger.error("Forbidden value (" + this.nbPaddockMax + ") on element nbPaddockMax.");
        }
        this.buffer.writeByte(this.nbPaddockMax);
        this.buffer.writeShort(this.paddocksInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.paddocksInformations.length) {
            this.paddocksInformations[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.nbPaddockMax = buffer.readByte();
        if (this.nbPaddockMax < 0) {
            Logger.error("Forbidden value (" + this.nbPaddockMax + ") on element of GuildInformationsPaddocksMessage.nbPaddockMax.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PaddockContentInformations();
            _loc4_.deserialize(buffer);
            this.paddocksInformations.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GuildInfosUpgradeMessage extends ProtocolMessage {
    constructor(maxTaxCollectorsCount, taxCollectorsCount, taxCollectorLifePoints, taxCollectorDamagesBonuses, taxCollectorPods, taxCollectorProspecting, taxCollectorWisdom, boostPoints, spellId, spellLevel) {
        super(5636);
        this.maxTaxCollectorsCount = maxTaxCollectorsCount;
        this.taxCollectorsCount = taxCollectorsCount;
        this.taxCollectorLifePoints = taxCollectorLifePoints;
        this.taxCollectorDamagesBonuses = taxCollectorDamagesBonuses;
        this.taxCollectorPods = taxCollectorPods;
        this.taxCollectorProspecting = taxCollectorProspecting;
        this.taxCollectorWisdom = taxCollectorWisdom;
        this.boostPoints = boostPoints;
        this.spellId = spellId;
        this.spellLevel = spellLevel;
    }
    serialize() {
        if (this.maxTaxCollectorsCount < 0) {
            Logger.error("Forbidden value (" + this.maxTaxCollectorsCount + ") on element maxTaxCollectorsCount.");
        }
        this.buffer.writeByte(this.maxTaxCollectorsCount);
        if (this.taxCollectorsCount < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorsCount + ") on element taxCollectorsCount.");
        }
        this.buffer.writeByte(this.taxCollectorsCount);
        if (this.taxCollectorLifePoints < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorLifePoints + ") on element taxCollectorLifePoints.");
        }
        this.buffer.writeVarShort(this.taxCollectorLifePoints);
        if (this.taxCollectorDamagesBonuses < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorDamagesBonuses + ") on element taxCollectorDamagesBonuses.");
        }
        this.buffer.writeVarShort(this.taxCollectorDamagesBonuses);
        if (this.taxCollectorPods < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorPods + ") on element taxCollectorPods.");
        }
        this.buffer.writeVarShort(this.taxCollectorPods);
        if (this.taxCollectorProspecting < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorProspecting + ") on element taxCollectorProspecting.");
        }
        this.buffer.writeVarShort(this.taxCollectorProspecting);
        if (this.taxCollectorWisdom < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorWisdom + ") on element taxCollectorWisdom.");
        }
        this.buffer.writeVarShort(this.taxCollectorWisdom);
        if (this.boostPoints < 0) {
            Logger.error("Forbidden value (" + this.boostPoints + ") on element boostPoints.");
        }
        this.buffer.writeVarShort(this.boostPoints);
        this.buffer.writeShort(this.spellId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.spellId.length) {
            if (this.spellId[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.spellId[_loc2_] + ") on element 9 (starting at 1) of spellId.");
            }
            this.buffer.writeVarShort(this.spellId[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.spellLevel.length);
        var _loc3_ = 0;
        while (_loc3_ < this.spellLevel.length) {
            if (this.spellLevel[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.spellLevel[_loc3_] + ") on element 10 (starting at 1) of spellLevel.");
            }
            this.buffer.writeByte(this.spellLevel[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        this.maxTaxCollectorsCount = buffer.readByte();
        if (this.maxTaxCollectorsCount < 0) {
            Logger.error("Forbidden value (" + this.maxTaxCollectorsCount + ") on element of GuildInfosUpgradeMessage.maxTaxCollectorsCount.");
        }
        this.taxCollectorsCount = buffer.readByte();
        if (this.taxCollectorsCount < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorsCount + ") on element of GuildInfosUpgradeMessage.taxCollectorsCount.");
        }
        this.taxCollectorLifePoints = buffer.readVarUhShort();
        if (this.taxCollectorLifePoints < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorLifePoints + ") on element of GuildInfosUpgradeMessage.taxCollectorLifePoints.");
        }
        this.taxCollectorDamagesBonuses = buffer.readVarUhShort();
        if (this.taxCollectorDamagesBonuses < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorDamagesBonuses + ") on element of GuildInfosUpgradeMessage.taxCollectorDamagesBonuses.");
        }
        this.taxCollectorPods = buffer.readVarUhShort();
        if (this.taxCollectorPods < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorPods + ") on element of GuildInfosUpgradeMessage.taxCollectorPods.");
        }
        this.taxCollectorProspecting = buffer.readVarUhShort();
        if (this.taxCollectorProspecting < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorProspecting + ") on element of GuildInfosUpgradeMessage.taxCollectorProspecting.");
        }
        this.taxCollectorWisdom = buffer.readVarUhShort();
        if (this.taxCollectorWisdom < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorWisdom + ") on element of GuildInfosUpgradeMessage.taxCollectorWisdom.");
        }
        this.boostPoints = buffer.readVarUhShort();
        if (this.boostPoints < 0) {
            Logger.error("Forbidden value (" + this.boostPoints + ") on element of GuildInfosUpgradeMessage.boostPoints.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of spellId.");
            }
            this.spellId.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readByte();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of spellLevel.");
            }
            this.spellLevel.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class GuildInvitationAnswerMessage extends ProtocolMessage {
    constructor(accept) {
        super(5556);
        this.accept = accept;
    }
    serialize() {
        this.buffer.writeBoolean(this.accept);
    }
    deserialize(buffer) {
        this.accept = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GuildInvitationByNameMessage extends ProtocolMessage {
    constructor(name) {
        super(6115);
        this.name = name;
    }
    serialize() {
        this.buffer.writeUTF(this.name);
    }
    deserialize(buffer) {
        this.name = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class GuildInvitationMessage extends ProtocolMessage {
    constructor(targetId) {
        super(5551);
        this.targetId = targetId;
    }
    serialize() {
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
    }
    deserialize(buffer) {
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of GuildInvitationMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class GuildInvitationStateRecrutedMessage extends ProtocolMessage {
    constructor(invitationState) {
        super(5548);
        this.invitationState = invitationState;
    }
    serialize() {
        this.buffer.writeByte(this.invitationState);
    }
    deserialize(buffer) {
        this.invitationState = buffer.readByte();
        if (this.invitationState < 0) {
            Logger.error("Forbidden value (" + this.invitationState + ") on element of GuildInvitationStateRecrutedMessage.invitationState.");
        }
    }
}

// Generated by Noxus messages 
export class GuildInvitationStateRecruterMessage extends ProtocolMessage {
    constructor(recrutedName, invitationState) {
        super(5563);
        this.recrutedName = recrutedName;
        this.invitationState = invitationState;
    }
    serialize() {
        this.buffer.writeUTF(this.recrutedName);
        this.buffer.writeByte(this.invitationState);
    }
    deserialize(buffer) {
        this.recrutedName = buffer.readUTF();
        this.invitationState = buffer.readByte();
        if (this.invitationState < 0) {
            Logger.error("Forbidden value (" + this.invitationState + ") on element of GuildInvitationStateRecruterMessage.invitationState.");
        }
    }
}

// Generated by Noxus messages 
export class GuildInvitedMessage extends ProtocolMessage {
    constructor(recruterId, recruterName, guildInfo) {
        super(5552);
        this.recruterId = recruterId;
        this.recruterName = recruterName;
        this.guildInfo = guildInfo;
    }
    serialize() {
        if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.recruterId + ") on element recruterId.");
        }
        this.buffer.writeVarLong(this.recruterId);
        this.buffer.writeUTF(this.recruterName);
        this.guildInfo.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.recruterId = buffer.readVarUhLong();
        if (this.recruterId < 0 || this.recruterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.recruterId + ") on element of GuildInvitedMessage.recruterId.");
        }
        this.recruterName = buffer.readUTF();
        this.guildInfo = new BasicGuildInformations();
        this.guildInfo.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildJoinedMessage extends ProtocolMessage {
    constructor(guildInfo, memberRights, enabled) {
        super(5564);
        this.guildInfo = guildInfo;
        this.memberRights = memberRights;
        this.enabled = enabled;
    }
    serialize() {
        this.guildInfo.serialize(this.buffer);
        if (this.memberRights < 0) {
            Logger.error("Forbidden value (" + this.memberRights + ") on element memberRights.");
        }
        this.buffer.writeVarInt(this.memberRights);
        this.buffer.writeBoolean(this.enabled);
    }
    deserialize(buffer) {
        this.guildInfo = new GuildInformations();
        this.guildInfo.deserialize(buffer);
        this.memberRights = buffer.readVarUhInt();
        if (this.memberRights < 0) {
            Logger.error("Forbidden value (" + this.memberRights + ") on element of GuildJoinedMessage.memberRights.");
        }
        this.enabled = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GuildKickRequestMessage extends ProtocolMessage {
    constructor(kickedId) {
        super(5887);
        this.kickedId = kickedId;
    }
    serialize() {
        if (this.kickedId < 0 || this.kickedId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.kickedId + ") on element kickedId.");
        }
        this.buffer.writeVarLong(this.kickedId);
    }
    deserialize(buffer) {
        this.kickedId = buffer.readVarUhLong();
        if (this.kickedId < 0 || this.kickedId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.kickedId + ") on element of GuildKickRequestMessage.kickedId.");
        }
    }
}

// Generated by Noxus messages 
export class GuildLeftMessage extends ProtocolMessage {
constructor) {
    super(5562);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class GuildLevelUpMessage extends ProtocolMessage {
    constructor(newLevel) {
        super(6062);
        this.newLevel = newLevel;
    }
    serialize() {
        if (this.newLevel < 2 || this.newLevel > 200) {
            Logger.error("Forbidden value (" + this.newLevel + ") on element newLevel.");
        }
        this.buffer.writeByte(this.newLevel);
    }
    deserialize(buffer) {
        this.newLevel = buffer.readUnsignedByte();
        if (this.newLevel < 2 || this.newLevel > 200) {
            Logger.error("Forbidden value (" + this.newLevel + ") on element of GuildLevelUpMessage.newLevel.");
        }
    }
}

// Generated by Noxus messages 
export class GuildListMessage extends ProtocolMessage {
    constructor(guilds) {
        super(6413);
        this.guilds = guilds;
    }
    serialize() {
        this.buffer.writeShort(this.guilds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.guilds.length) {
            this.guilds[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new GuildInformations();
            _loc4_.deserialize(buffer);
            this.guilds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GuildMemberLeavingMessage extends ProtocolMessage {
    constructor(kicked, memberId) {
        super(5923);
        this.kicked = kicked;
        this.memberId = memberId;
    }
    serialize() {
        this.buffer.writeBoolean(this.kicked);
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
    }
    deserialize(buffer) {
        this.kicked = buffer.readBoolean();
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element of GuildMemberLeavingMessage.memberId.");
        }
    }
}

// Generated by Noxus messages 
export class GuildMemberOnlineStatusMessage extends ProtocolMessage {
    constructor(memberId, online) {
        super(6061);
        this.memberId = memberId;
        this.online = online;
    }
    serialize() {
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        this.buffer.writeBoolean(this.online);
    }
    deserialize(buffer) {
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element of GuildMemberOnlineStatusMessage.memberId.");
        }
        this.online = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class GuildMembershipMessage extends GuildJoinedMessage {
    constructor(param1, param2, param3) {
        super(param1, param2, param3);
        this.messageId = 5835;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildModificationEmblemValidMessage extends ProtocolMessage {
    constructor(guildEmblem) {
        super(6328);
        this.guildEmblem = guildEmblem;
    }
    serialize() {
        this.guildEmblem.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.guildEmblem = new GuildEmblem();
        this.guildEmblem.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildModificationNameValidMessage extends ProtocolMessage {
    constructor(guildName) {
        super(6327);
        this.guildName = guildName;
    }
    serialize() {
        this.buffer.writeUTF(this.guildName);
    }
    deserialize(buffer) {
        this.guildName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class GuildModificationStartedMessage extends ProtocolMessage {
    constructor(canChangeName, canChangeEmblem) {
        super(6324);
        this.canChangeName = canChangeName;
        this.canChangeEmblem = canChangeEmblem;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.canChangeName);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.canChangeEmblem);
        this.buffer.writeByte(_loc2_);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.canChangeName = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.canChangeEmblem = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
    }
}

// Generated by Noxus messages 
export class GuildModificationValidMessage extends ProtocolMessage {
    constructor(guildName, guildEmblem) {
        super(6323);
        this.guildName = guildName;
        this.guildEmblem = guildEmblem;
    }
    serialize() {
        this.buffer.writeUTF(this.guildName);
        this.guildEmblem.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.guildName = buffer.readUTF();
        this.guildEmblem = new GuildEmblem();
        this.guildEmblem.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildMotdMessage extends SocialNoticeMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2, param3, param4);
        this.messageId = 6590;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildMotdSetErrorMessage extends SocialNoticeSetErrorMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6591;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildMotdSetRequestMessage extends SocialNoticeSetRequestMessage {
    constructor(param1) {
        this.content = param1;
        this.messageId = 6588;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.content);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.content = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class GuildPaddockBoughtMessage extends ProtocolMessage {
    constructor(paddockInfo) {
        super(5952);
        this.paddockInfo = paddockInfo;
    }
    serialize() {
        this.paddockInfo.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.paddockInfo = new PaddockContentInformations();
        this.paddockInfo.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildPaddockRemovedMessage extends ProtocolMessage {
    constructor(paddockId) {
        super(5955);
        this.paddockId = paddockId;
    }
    serialize() {
        this.buffer.writeInt(this.paddockId);
    }
    deserialize(buffer) {
        this.paddockId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class GuildPaddockTeleportRequestMessage extends ProtocolMessage {
    constructor(paddockId) {
        super(5957);
        this.paddockId = paddockId;
    }
    serialize() {
        this.buffer.writeInt(this.paddockId);
    }
    deserialize(buffer) {
        this.paddockId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class GuildSpellUpgradeRequestMessage extends ProtocolMessage {
    constructor(spellId) {
        super(5699);
        this.spellId = spellId;
    }
    serialize() {
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element spellId.");
        }
        this.buffer.writeInt(this.spellId);
    }
    deserialize(buffer) {
        this.spellId = buffer.readInt();
        if (this.spellId < 0) {
            Logger.error("Forbidden value (" + this.spellId + ") on element of GuildSpellUpgradeRequestMessage.spellId.");
        }
    }
}

// Generated by Noxus messages 
export class GuildVersatileInfoListMessage extends ProtocolMessage {
    constructor(guilds) {
        super(6435);
        this.guilds = guilds;
    }
    serialize() {
        this.buffer.writeShort(this.guilds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.guilds.length) {
            this.buffer.writeShort((this.guilds[_loc2_]).protocolId);
            this.guilds[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(GuildVersatileInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.guilds.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class AbstractTaxCollectorListMessage extends ProtocolMessage {
    constructor(informations) {
        super(6568);
        this.informations = informations;
    }
    serialize() {
        this.buffer.writeShort(this.informations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.informations.length) {
            this.buffer.writeShort((this.informations[_loc2_]).protocolId);
            this.informations[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(TaxCollectorInformations, _loc4_);
            _loc5_.deserialize(buffer);
            this.informations.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GameRolePlayTaxCollectorFightRequestMessage extends ProtocolMessage {
    constructor(taxCollectorId) {
        super(5954);
        this.taxCollectorId = taxCollectorId;
    }
    serialize() {
        this.buffer.writeInt(this.taxCollectorId);
    }
    deserialize(buffer) {
        this.taxCollectorId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class GuildFightJoinRequestMessage extends ProtocolMessage {
    constructor(taxCollectorId) {
        super(5717);
        this.taxCollectorId = taxCollectorId;
    }
    serialize() {
        this.buffer.writeInt(this.taxCollectorId);
    }
    deserialize(buffer) {
        this.taxCollectorId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class GuildFightLeaveRequestMessage extends ProtocolMessage {
    constructor(taxCollectorId, characterId) {
        super(5715);
        this.taxCollectorId = taxCollectorId;
        this.characterId = characterId;
    }
    serialize() {
        if (this.taxCollectorId < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorId + ") on element taxCollectorId.");
        }
        this.buffer.writeInt(this.taxCollectorId);
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
    }
    deserialize(buffer) {
        this.taxCollectorId = buffer.readInt();
        if (this.taxCollectorId < 0) {
            Logger.error("Forbidden value (" + this.taxCollectorId + ") on element of GuildFightLeaveRequestMessage.taxCollectorId.");
        }
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element of GuildFightLeaveRequestMessage.characterId.");
        }
    }
}

// Generated by Noxus messages 
export class GuildFightPlayersEnemiesListMessage extends ProtocolMessage {
    constructor(fightId, playerInfo) {
        super(5928);
        this.fightId = fightId;
        this.playerInfo = playerInfo;
    }
    serialize() {
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        this.buffer.writeShort(this.playerInfo.length);
        var _loc2_ = 0;
        while (_loc2_ < this.playerInfo.length) {
            this.playerInfo[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersEnemiesListMessage.fightId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new CharacterMinimalPlusLookInformations();
            _loc4_.deserialize(buffer);
            this.playerInfo.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class GuildFightPlayersEnemyRemoveMessage extends ProtocolMessage {
    constructor(fightId, playerId) {
        super(5929);
        this.fightId = fightId;
        this.playerId = playerId;
    }
    serialize() {
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersEnemyRemoveMessage.fightId.");
        }
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of GuildFightPlayersEnemyRemoveMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class GuildFightPlayersHelpersJoinMessage extends ProtocolMessage {
    constructor(fightId, playerInfo) {
        super(5720);
        this.fightId = fightId;
        this.playerInfo = playerInfo;
    }
    serialize() {
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        this.playerInfo.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersHelpersJoinMessage.fightId.");
        }
        this.playerInfo = new CharacterMinimalPlusLookInformations();
        this.playerInfo.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class GuildFightPlayersHelpersLeaveMessage extends ProtocolMessage {
    constructor(fightId, playerId) {
        super(5719);
        this.fightId = fightId;
        this.playerId = playerId;
    }
    serialize() {
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeInt(this.fightId);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        this.fightId = buffer.readInt();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of GuildFightPlayersHelpersLeaveMessage.fightId.");
        }
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of GuildFightPlayersHelpersLeaveMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class GuildFightTakePlaceRequestMessage extends GuildFightJoinRequestMessage {
    constructor(param1, param2) {
        super(param1);
        this.replacedCharacterId = param2;
        this.messageId = 6235;
    }
    serialize() {
        super.serialize();
        this.buffer.writeInt(this.replacedCharacterId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.replacedCharacterId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class TaxCollectorAttackedMessage extends ProtocolMessage {
    constructor(firstNameId, lastNameId, worldX, worldY, mapId, subAreaId, guild) {
        super(5918);
        this.firstNameId = firstNameId;
        this.lastNameId = lastNameId;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.guild = guild;
    }
    serialize() {
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
        }
        this.buffer.writeVarShort(this.firstNameId);
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
        }
        this.buffer.writeVarShort(this.lastNameId);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.guild.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.firstNameId = buffer.readVarUhShort();
        if (this.firstNameId < 0) {
            Logger.error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorAttackedMessage.firstNameId.");
        }
        this.lastNameId = buffer.readVarUhShort();
        if (this.lastNameId < 0) {
            Logger.error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorAttackedMessage.lastNameId.");
        }
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of TaxCollectorAttackedMessage.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of TaxCollectorAttackedMessage.worldY.");
        }
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorAttackedMessage.subAreaId.");
        }
        this.guild = new BasicGuildInformations();
        this.guild.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class TaxCollectorAttackedResultMessage extends ProtocolMessage {
    constructor(deadOrAlive, basicInfos, guild) {
        super(5635);
        this.deadOrAlive = deadOrAlive;
        this.basicInfos = basicInfos;
        this.guild = guild;
    }
    serialize() {
        this.buffer.writeBoolean(this.deadOrAlive);
        this.basicInfos.serialize(this.buffer);
        this.guild.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.deadOrAlive = buffer.readBoolean();
        this.basicInfos = new TaxCollectorBasicInformations();
        this.basicInfos.deserialize(buffer);
        this.guild = new BasicGuildInformations();
        this.guild.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class TaxCollectorErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(5634);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class TaxCollectorListMessage extends AbstractTaxCollectorListMessage {
    constructor(param1, param2, param3) {
        super(param1);
        this.nbcollectorMax = param2;
        this.fightersInformations = param3;
        this.messageId = 5930;
    }
    serialize() {
        super.serialize();
        if (this.nbcollectorMax < 0) {
            Logger.error("Forbidden value (" + this.nbcollectorMax + ") on element nbcollectorMax.");
        }
        this.buffer.writeByte(this.nbcollectorMax);
        this.buffer.writeShort(this.fightersInformations.length);
        var _loc2_ = 0;
        while (_loc2_ < this.fightersInformations.length) {
            this.fightersInformations[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        this.nbcollectorMax = buffer.readByte();
        if (this.nbcollectorMax < 0) {
            Logger.error("Forbidden value (" + this.nbcollectorMax + ") on element of TaxCollectorListMessage.nbcollectorMax.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new TaxCollectorFightersInformation();
            _loc4_.deserialize(buffer);
            this.fightersInformations.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class TaxCollectorMovementAddMessage extends ProtocolMessage {
    constructor(informations) {
        super(5917);
        this.informations = informations;
    }
    serialize() {
        this.buffer.writeShort(this.informations.protocolId);
        this.informations.serialize(this.buffer);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readUnsignedShort();
        this.informations = ProtocolTypeManager.getInstance(TaxCollectorInformations, _loc2_);
        this.informations.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class TaxCollectorMovementMessage extends ProtocolMessage {
    constructor(movementType, basicInfos, playerId, playerName) {
        super(5633);
        this.movementType = movementType;
        this.basicInfos = basicInfos;
        this.playerId = playerId;
        this.playerName = playerName;
    }
    serialize() {
        this.buffer.writeByte(this.movementType);
        this.basicInfos.serialize(this.buffer);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.buffer.writeUTF(this.playerName);
    }
    deserialize(buffer) {
        this.movementType = buffer.readByte();
        if (this.movementType < 0) {
            Logger.error("Forbidden value (" + this.movementType + ") on element of TaxCollectorMovementMessage.movementType.");
        }
        this.basicInfos = new TaxCollectorBasicInformations();
        this.basicInfos.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of TaxCollectorMovementMessage.playerId.");
        }
        this.playerName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class TaxCollectorMovementRemoveMessage extends ProtocolMessage {
    constructor(collectorId) {
        super(5915);
        this.collectorId = collectorId;
    }
    serialize() {
        this.buffer.writeInt(this.collectorId);
    }
    deserialize(buffer) {
        this.collectorId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class TaxCollectorMovementsOfflineMessage extends ProtocolMessage {
    constructor(movements) {
        super(6611);
        this.movements = movements;
    }
    serialize() {
        this.buffer.writeShort(this.movements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.movements.length) {
            this.movements[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new TaxCollectorMovement();
            _loc4_.deserialize(buffer);
            this.movements.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class TaxCollectorStateUpdateMessage extends ProtocolMessage {
    constructor(uniqueId, state) {
        super(6455);
        this.uniqueId = uniqueId;
        this.state = state;
    }
    serialize() {
        this.buffer.writeInt(this.uniqueId);
        this.buffer.writeByte(this.state);
    }
    deserialize(buffer) {
        this.uniqueId = buffer.readInt();
        this.state = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class TopTaxCollectorListMessage extends AbstractTaxCollectorListMessage {
    constructor(param1, param2) {
        super(param1);
        this.isDungeon = param2;
        this.messageId = 6565;
    }
    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.isDungeon);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.isDungeon = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class IdolFightPreparationUpdateMessage extends ProtocolMessage {
    constructor(idolSource, idols) {
        super(6586);
        this.idolSource = idolSource;
        this.idols = idols;
    }
    serialize() {
        this.buffer.writeByte(this.idolSource);
        this.buffer.writeShort(this.idols.length);
        var _loc2_ = 0;
        while (_loc2_ < this.idols.length) {
            this.buffer.writeShort((this.idols[_loc2_]).protocolId);
            this.idols[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.idolSource = buffer.readByte();
        if (this.idolSource < 0) {
            Logger.error("Forbidden value (" + this.idolSource + ") on element of IdolFightPreparationUpdateMessage.idolSource.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(Idol, _loc4_);
            _loc5_.deserialize(buffer);
            this.idols.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class IdolListMessage extends ProtocolMessage {
    constructor(chosenIdols, partyChosenIdols, partyIdols) {
        super(6585);
        this.chosenIdols = chosenIdols;
        this.partyChosenIdols = partyChosenIdols;
        this.partyIdols = partyIdols;
    }
    serialize() {
        this.buffer.writeShort(this.chosenIdols.length);
        var _loc2_ = 0;
        while (_loc2_ < this.chosenIdols.length) {
            if (this.chosenIdols[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.chosenIdols[_loc2_] + ") on element 1 (starting at 1) of chosenIdols.");
            }
            this.buffer.writeVarShort(this.chosenIdols[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.partyChosenIdols.length);
        var _loc3_ = 0;
        while (_loc3_ < this.partyChosenIdols.length) {
            if (this.partyChosenIdols[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.partyChosenIdols[_loc3_] + ") on element 2 (starting at 1) of partyChosenIdols.");
            }
            this.buffer.writeVarShort(this.partyChosenIdols[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.partyIdols.length);
        var _loc4_ = 0;
        while (_loc4_ < this.partyIdols.length) {
            this.buffer.writeShort((this.partyIdols[_loc4_]).protocolId);
            this.partyIdols[_loc4_].serialize(this.buffer);
            _loc4_++;
        }
    }
    deserialize(buffer) {
        var _loc8_ = 0;
        var _loc9_ = 0;
        var _loc10_ = 0;
        var _loc11_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc8_ = buffer.readVarUhShort();
            if (_loc8_ < 0) {
                Logger.error("Forbidden value (" + _loc8_ + ") on elements of chosenIdols.");
            }
            this.chosenIdols.push(_loc8_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc9_ = buffer.readVarUhShort();
            if (_loc9_ < 0) {
                Logger.error("Forbidden value (" + _loc9_ + ") on elements of partyChosenIdols.");
            }
            this.partyChosenIdols.push(_loc9_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc10_ = buffer.readUnsignedShort();
            _loc11_ = ProtocolTypeManager.getInstance(PartyIdol, _loc10_);
            _loc11_.deserialize(buffer);
            this.partyIdols.push(_loc11_);
            _loc7_++;
        }
    }
}

// Generated by Noxus messages 
export class IdolPartyLostMessage extends ProtocolMessage {
    constructor(idolId) {
        super(6580);
        this.idolId = idolId;
    }
    serialize() {
        if (this.idolId < 0) {
            Logger.error("Forbidden value (" + this.idolId + ") on element idolId.");
        }
        this.buffer.writeVarShort(this.idolId);
    }
    deserialize(buffer) {
        this.idolId = buffer.readVarUhShort();
        if (this.idolId < 0) {
            Logger.error("Forbidden value (" + this.idolId + ") on element of IdolPartyLostMessage.idolId.");
        }
    }
}

// Generated by Noxus messages 
export class IdolPartyRefreshMessage extends ProtocolMessage {
    constructor(partyIdol) {
        super(6583);
        this.partyIdol = partyIdol;
    }
    serialize() {
        this.partyIdol.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.partyIdol = new PartyIdol();
        this.partyIdol.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class IdolPartyRegisterRequestMessage extends ProtocolMessage {
    constructor(register) {
        super(6582);
        this.register = register;
    }
    serialize() {
        this.buffer.writeBoolean(this.register);
    }
    deserialize(buffer) {
        this.register = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class IdolSelectedMessage extends ProtocolMessage {
    constructor(idolId, activate, party) {
        super(6581);
        this.idolId = idolId;
        this.activate = activate;
        this.party = party;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.activate);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.party);
        this.buffer.writeByte(_loc2_);
        if (this.idolId < 0) {
            Logger.error("Forbidden value (" + this.idolId + ") on element idolId.");
        }
        this.buffer.writeVarShort(this.idolId);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.activate = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.party = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.idolId = buffer.readVarUhShort();
        if (this.idolId < 0) {
            Logger.error("Forbidden value (" + this.idolId + ") on element of IdolSelectedMessage.idolId.");
        }
    }
}

// Generated by Noxus messages 
export class IdolSelectErrorMessage extends ProtocolMessage {
    constructor(reason, idolId, activate, party) {
        super(6584);
        this.reason = reason;
        this.idolId = idolId;
        this.activate = activate;
        this.party = party;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.activate);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.party);
        this.buffer.writeByte(_loc2_);
        this.buffer.writeByte(this.reason);
        if (this.idolId < 0) {
            Logger.error("Forbidden value (" + this.idolId + ") on element idolId.");
        }
        this.buffer.writeVarShort(this.idolId);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.activate = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.party = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of IdolSelectErrorMessage.reason.");
        }
        this.idolId = buffer.readVarUhShort();
        if (this.idolId < 0) {
            Logger.error("Forbidden value (" + this.idolId + ") on element of IdolSelectErrorMessage.idolId.");
        }
    }
}

// Generated by Noxus messages 
export class IdolSelectRequestMessage extends ProtocolMessage {
    constructor(idolId, activate, party) {
        super(6587);
        this.idolId = idolId;
        this.activate = activate;
        this.party = party;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.activate);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.party);
        this.buffer.writeByte(_loc2_);
        if (this.idolId < 0) {
            Logger.error("Forbidden value (" + this.idolId + ") on element idolId.");
        }
        this.buffer.writeVarShort(this.idolId);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.activate = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.party = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.idolId = buffer.readVarUhShort();
        if (this.idolId < 0) {
            Logger.error("Forbidden value (" + this.idolId + ") on element of IdolSelectRequestMessage.idolId.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterCapabilitiesMessage extends ProtocolMessage {
    constructor(guildEmblemSymbolCategories) {
        super(6339);
        this.guildEmblemSymbolCategories = guildEmblemSymbolCategories;
    }
    serialize() {
        if (this.guildEmblemSymbolCategories < 0) {
            Logger.error("Forbidden value (" + this.guildEmblemSymbolCategories + ") on element guildEmblemSymbolCategories.");
        }
        this.buffer.writeVarInt(this.guildEmblemSymbolCategories);
    }
    deserialize(buffer) {
        this.guildEmblemSymbolCategories = buffer.readVarUhInt();
        if (this.guildEmblemSymbolCategories < 0) {
            Logger.error("Forbidden value (" + this.guildEmblemSymbolCategories + ") on element of CharacterCapabilitiesMessage.guildEmblemSymbolCategories.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterLoadingCompleteMessage extends ProtocolMessage {
constructor) {
    super(6471);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class OnConnectionEventMessage extends ProtocolMessage {
    constructor(eventType) {
        super(5726);
        this.eventType = eventType;
    }
    serialize() {
        this.buffer.writeByte(this.eventType);
    }
    deserialize(buffer) {
        this.eventType = buffer.readByte();
        if (this.eventType < 0) {
            Logger.error("Forbidden value (" + this.eventType + ") on element of OnConnectionEventMessage.eventType.");
        }
    }
}

// Generated by Noxus messages 
export class ServerExperienceModificatorMessage extends ProtocolMessage {
    constructor(experiencePercent) {
        super(6237);
        this.experiencePercent = experiencePercent;
    }
    serialize() {
        if (this.experiencePercent < 0) {
            Logger.error("Forbidden value (" + this.experiencePercent + ") on element experiencePercent.");
        }
        this.buffer.writeVarShort(this.experiencePercent);
    }
    deserialize(buffer) {
        this.experiencePercent = buffer.readVarUhShort();
        if (this.experiencePercent < 0) {
            Logger.error("Forbidden value (" + this.experiencePercent + ") on element of ServerExperienceModificatorMessage.experiencePercent.");
        }
    }
}

// Generated by Noxus messages 
export class SetCharacterRestrictionsMessage extends ProtocolMessage {
    constructor(actorId, restrictions) {
        super(170);
        this.actorId = actorId;
        this.restrictions = restrictions;
    }
    serialize() {
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.actorId + ") on element actorId.");
        }
        this.buffer.writeDouble(this.actorId);
        this.restrictions.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.actorId = buffer.readDouble();
        if (this.actorId < -9007199254740990 || this.actorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.actorId + ") on element of SetCharacterRestrictionsMessage.actorId.");
        }
        this.restrictions = new ActorRestrictionsInformations();
        this.restrictions.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class InteractiveElementUpdatedMessage extends ProtocolMessage {
    constructor(interactiveElement) {
        super(5708);
        this.interactiveElement = interactiveElement;
    }
    serialize() {
        this.interactiveElement.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.interactiveElement = new InteractiveElement();
        this.interactiveElement.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class InteractiveMapUpdateMessage extends ProtocolMessage {
    constructor(interactiveElements) {
        super(5002);
        this.interactiveElements = interactiveElements;
    }
    serialize() {
        this.buffer.writeShort(this.interactiveElements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.interactiveElements.length) {
            this.buffer.writeShort((this.interactiveElements[_loc2_]).protocolId);
            this.interactiveElements[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(InteractiveElement, _loc4_);
            _loc5_.deserialize(buffer);
            this.interactiveElements.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class InteractiveUsedMessage extends ProtocolMessage {
    constructor(entityId, elemId, skillId, duration, canMove) {
        super(5745);
        this.entityId = entityId;
        this.elemId = elemId;
        this.skillId = skillId;
        this.duration = duration;
        this.canMove = canMove;
    }
    serialize() {
        if (this.entityId < 0 || this.entityId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.entityId + ") on element entityId.");
        }
        this.buffer.writeVarLong(this.entityId);
        if (this.elemId < 0) {
            Logger.error("Forbidden value (" + this.elemId + ") on element elemId.");
        }
        this.buffer.writeVarInt(this.elemId);
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarShort(this.skillId);
        if (this.duration < 0) {
            Logger.error("Forbidden value (" + this.duration + ") on element duration.");
        }
        this.buffer.writeVarShort(this.duration);
        this.buffer.writeBoolean(this.canMove);
    }
    deserialize(buffer) {
        this.entityId = buffer.readVarUhLong();
        if (this.entityId < 0 || this.entityId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.entityId + ") on element of InteractiveUsedMessage.entityId.");
        }
        this.elemId = buffer.readVarUhInt();
        if (this.elemId < 0) {
            Logger.error("Forbidden value (" + this.elemId + ") on element of InteractiveUsedMessage.elemId.");
        }
        this.skillId = buffer.readVarUhShort();
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element of InteractiveUsedMessage.skillId.");
        }
        this.duration = buffer.readVarUhShort();
        if (this.duration < 0) {
            Logger.error("Forbidden value (" + this.duration + ") on element of InteractiveUsedMessage.duration.");
        }
        this.canMove = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class InteractiveUseEndedMessage extends ProtocolMessage {
    constructor(elemId, skillId) {
        super(6112);
        this.elemId = elemId;
        this.skillId = skillId;
    }
    serialize() {
        if (this.elemId < 0) {
            Logger.error("Forbidden value (" + this.elemId + ") on element elemId.");
        }
        this.buffer.writeVarInt(this.elemId);
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarShort(this.skillId);
    }
    deserialize(buffer) {
        this.elemId = buffer.readVarUhInt();
        if (this.elemId < 0) {
            Logger.error("Forbidden value (" + this.elemId + ") on element of InteractiveUseEndedMessage.elemId.");
        }
        this.skillId = buffer.readVarUhShort();
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element of InteractiveUseEndedMessage.skillId.");
        }
    }
}

// Generated by Noxus messages 
export class InteractiveUseErrorMessage extends ProtocolMessage {
    constructor(elemId, skillInstanceUid) {
        super(6384);
        this.elemId = elemId;
        this.skillInstanceUid = skillInstanceUid;
    }
    serialize() {
        if (this.elemId < 0) {
            Logger.error("Forbidden value (" + this.elemId + ") on element elemId.");
        }
        this.buffer.writeVarInt(this.elemId);
        if (this.skillInstanceUid < 0) {
            Logger.error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
        }
        this.buffer.writeVarInt(this.skillInstanceUid);
    }
    deserialize(buffer) {
        this.elemId = buffer.readVarUhInt();
        if (this.elemId < 0) {
            Logger.error("Forbidden value (" + this.elemId + ") on element of InteractiveUseErrorMessage.elemId.");
        }
        this.skillInstanceUid = buffer.readVarUhInt();
        if (this.skillInstanceUid < 0) {
            Logger.error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveUseErrorMessage.skillInstanceUid.");
        }
    }
}

// Generated by Noxus messages 
export class InteractiveUseRequestMessage extends ProtocolMessage {
    constructor(elemId, skillInstanceUid) {
        super(5001);
        this.elemId = elemId;
        this.skillInstanceUid = skillInstanceUid;
    }
    serialize() {
        if (this.elemId < 0) {
            Logger.error("Forbidden value (" + this.elemId + ") on element elemId.");
        }
        this.buffer.writeVarInt(this.elemId);
        if (this.skillInstanceUid < 0) {
            Logger.error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
        }
        this.buffer.writeVarInt(this.skillInstanceUid);
    }
    deserialize(buffer) {
        this.elemId = buffer.readVarUhInt();
        if (this.elemId < 0) {
            Logger.error("Forbidden value (" + this.elemId + ") on element of InteractiveUseRequestMessage.elemId.");
        }
        this.skillInstanceUid = buffer.readVarUhInt();
        if (this.skillInstanceUid < 0) {
            Logger.error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveUseRequestMessage.skillInstanceUid.");
        }
    }
}

// Generated by Noxus messages 
export class StatedElementUpdatedMessage extends ProtocolMessage {
    constructor(statedElement) {
        super(5709);
        this.statedElement = statedElement;
    }
    serialize() {
        this.statedElement.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.statedElement = new StatedElement();
        this.statedElement.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class StatedMapUpdateMessage extends ProtocolMessage {
    constructor(statedElements) {
        super(5716);
        this.statedElements = statedElements;
    }
    serialize() {
        this.buffer.writeShort(this.statedElements.length);
        var _loc2_ = 0;
        while (_loc2_ < this.statedElements.length) {
            this.statedElements[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new StatedElement();
            _loc4_.deserialize(buffer);
            this.statedElements.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class TeleportBuddiesAnswerMessage extends ProtocolMessage {
    constructor(accept) {
        super(6294);
        this.accept = accept;
    }
    serialize() {
        this.buffer.writeBoolean(this.accept);
    }
    deserialize(buffer) {
        this.accept = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class TeleportBuddiesMessage extends ProtocolMessage {
    constructor(dungeonId) {
        super(6289);
        this.dungeonId = dungeonId;
    }
    serialize() {
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
    }
    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of TeleportBuddiesMessage.dungeonId.");
        }
    }
}

// Generated by Noxus messages 
export class TeleportBuddiesRequestedMessage extends ProtocolMessage {
    constructor(dungeonId, inviterId, invalidBuddiesIds) {
        super(6302);
        this.dungeonId = dungeonId;
        this.inviterId = inviterId;
        this.invalidBuddiesIds = invalidBuddiesIds;
    }
    serialize() {
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        if (this.inviterId < 0 || this.inviterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.inviterId + ") on element inviterId.");
        }
        this.buffer.writeVarLong(this.inviterId);
        this.buffer.writeShort(this.invalidBuddiesIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.invalidBuddiesIds.length) {
            if (this.invalidBuddiesIds[_loc2_] < 0 || this.invalidBuddiesIds[_loc2_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.invalidBuddiesIds[_loc2_] + ") on element 3 (starting at 1) of invalidBuddiesIds.");
            }
            this.buffer.writeVarLong(this.invalidBuddiesIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of TeleportBuddiesRequestedMessage.dungeonId.");
        }
        this.inviterId = buffer.readVarUhLong();
        if (this.inviterId < 0 || this.inviterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.inviterId + ") on element of TeleportBuddiesRequestedMessage.inviterId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhLong();
            if (_loc4_ < 0 || _loc4_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of invalidBuddiesIds.");
            }
            this.invalidBuddiesIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class TeleportToBuddyAnswerMessage extends ProtocolMessage {
    constructor(dungeonId, buddyId, accept) {
        super(6293);
        this.dungeonId = dungeonId;
        this.buddyId = buddyId;
        this.accept = accept;
    }
    serialize() {
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.buddyId + ") on element buddyId.");
        }
        this.buffer.writeVarLong(this.buddyId);
        this.buffer.writeBoolean(this.accept);
    }
    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyAnswerMessage.dungeonId.");
        }
        this.buddyId = buffer.readVarUhLong();
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyAnswerMessage.buddyId.");
        }
        this.accept = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class TeleportToBuddyCloseMessage extends ProtocolMessage {
    constructor(dungeonId, buddyId) {
        super(6303);
        this.dungeonId = dungeonId;
        this.buddyId = buddyId;
    }
    serialize() {
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.buddyId + ") on element buddyId.");
        }
        this.buffer.writeVarLong(this.buddyId);
    }
    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyCloseMessage.dungeonId.");
        }
        this.buddyId = buffer.readVarUhLong();
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyCloseMessage.buddyId.");
        }
    }
}

// Generated by Noxus messages 
export class TeleportToBuddyOfferMessage extends ProtocolMessage {
    constructor(dungeonId, buddyId, timeLeft) {
        super(6287);
        this.dungeonId = dungeonId;
        this.buddyId = buddyId;
        this.timeLeft = timeLeft;
    }
    serialize() {
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
        }
        this.buffer.writeVarShort(this.dungeonId);
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.buddyId + ") on element buddyId.");
        }
        this.buffer.writeVarLong(this.buddyId);
        if (this.timeLeft < 0) {
            Logger.error("Forbidden value (" + this.timeLeft + ") on element timeLeft.");
        }
        this.buffer.writeVarInt(this.timeLeft);
    }
    deserialize(buffer) {
        this.dungeonId = buffer.readVarUhShort();
        if (this.dungeonId < 0) {
            Logger.error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyOfferMessage.dungeonId.");
        }
        this.buddyId = buffer.readVarUhLong();
        if (this.buddyId < 0 || this.buddyId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyOfferMessage.buddyId.");
        }
        this.timeLeft = buffer.readVarUhInt();
        if (this.timeLeft < 0) {
            Logger.error("Forbidden value (" + this.timeLeft + ") on element of TeleportToBuddyOfferMessage.timeLeft.");
        }
    }
}

// Generated by Noxus messages 
export class TeleportDestinationsListMessage extends ProtocolMessage {
    constructor(teleporterType, mapIds, subAreaIds, costs, destTeleporterType) {
        super(5960);
        this.teleporterType = teleporterType;
        this.mapIds = mapIds;
        this.subAreaIds = subAreaIds;
        this.costs = costs;
        this.destTeleporterType = destTeleporterType;
    }
    serialize() {
        this.buffer.writeByte(this.teleporterType);
        this.buffer.writeShort(this.mapIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mapIds.length) {
            if (this.mapIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.mapIds[_loc2_] + ") on element 2 (starting at 1) of mapIds.");
            }
            this.buffer.writeInt(this.mapIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.subAreaIds.length);
        var _loc3_ = 0;
        while (_loc3_ < this.subAreaIds.length) {
            if (this.subAreaIds[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.subAreaIds[_loc3_] + ") on element 3 (starting at 1) of subAreaIds.");
            }
            this.buffer.writeVarShort(this.subAreaIds[_loc3_]);
            _loc3_++;
        }
        this.buffer.writeShort(this.costs.length);
        var _loc4_ = 0;
        while (_loc4_ < this.costs.length) {
            if (this.costs[_loc4_] < 0) {
                Logger.error("Forbidden value (" + this.costs[_loc4_] + ") on element 4 (starting at 1) of costs.");
            }
            this.buffer.writeVarShort(this.costs[_loc4_]);
            _loc4_++;
        }
        this.buffer.writeShort(this.destTeleporterType.length);
        var _loc5_ = 0;
        while (_loc5_ < this.destTeleporterType.length) {
            this.buffer.writeByte(this.destTeleporterType[_loc5_]);
            _loc5_++;
        }
    }
    deserialize(buffer) {
        var _loc10_ = 0;
        var _loc11_ = 0;
        var _loc12_ = 0;
        var _loc13_ = 0;
        this.teleporterType = buffer.readByte();
        if (this.teleporterType < 0) {
            Logger.error("Forbidden value (" + this.teleporterType + ") on element of TeleportDestinationsListMessage.teleporterType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc10_ = buffer.readInt();
            if (_loc10_ < 0) {
                Logger.error("Forbidden value (" + _loc10_ + ") on elements of mapIds.");
            }
            this.mapIds.push(_loc10_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc11_ = buffer.readVarUhShort();
            if (_loc11_ < 0) {
                Logger.error("Forbidden value (" + _loc11_ + ") on elements of subAreaIds.");
            }
            this.subAreaIds.push(_loc11_);
            _loc5_++;
        }
        var _loc6_ = buffer.readUnsignedShort();
        var _loc7_ = 0;
        while (_loc7_ < _loc6_) {
            _loc12_ = buffer.readVarUhShort();
            if (_loc12_ < 0) {
                Logger.error("Forbidden value (" + _loc12_ + ") on elements of costs.");
            }
            this.costs.push(_loc12_);
            _loc7_++;
        }
        var _loc8_ = buffer.readUnsignedShort();
        var _loc9_ = 0;
        while (_loc9_ < _loc8_) {
            _loc13_ = buffer.readByte();
            if (_loc13_ < 0) {
                Logger.error("Forbidden value (" + _loc13_ + ") on elements of destTeleporterType.");
            }
            this.destTeleporterType.push(_loc13_);
            _loc9_++;
        }
    }
}

// Generated by Noxus messages 
export class TeleportRequestMessage extends ProtocolMessage {
    constructor(teleporterType, mapId) {
        super(5961);
        this.teleporterType = teleporterType;
        this.mapId = mapId;
    }
    serialize() {
        this.buffer.writeByte(this.teleporterType);
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }
    deserialize(buffer) {
        this.teleporterType = buffer.readByte();
        if (this.teleporterType < 0) {
            Logger.error("Forbidden value (" + this.teleporterType + ") on element of TeleportRequestMessage.teleporterType.");
        }
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element of TeleportRequestMessage.mapId.");
        }
    }
}

// Generated by Noxus messages 
export class ZaapListMessage extends TeleportDestinationsListMessage {
    constructor(param1, param2, param3, param4, param5, param6) {
        super(param1, param2, param3, param4, param5);
        this.spawnMapId = param6;
        this.messageId = 1604;
    }
    serialize() {
        super.serialize();
        if (this.spawnMapId < 0) {
            Logger.error("Forbidden value (" + this.spawnMapId + ") on element spawnMapId.");
        }
        this.buffer.writeInt(this.spawnMapId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.spawnMapId = buffer.readInt();
        if (this.spawnMapId < 0) {
            Logger.error("Forbidden value (" + this.spawnMapId + ") on element of ZaapListMessage.spawnMapId.");
        }
    }
}

// Generated by Noxus messages 
export class ZaapRespawnSaveRequestMessage extends ProtocolMessage {
constructor) {
    super(6572);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ZaapRespawnUpdatedMessage extends ProtocolMessage {
    constructor(mapId) {
        super(6571);
        this.mapId = mapId;
    }
    serialize() {
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element mapId.");
        }
        this.buffer.writeInt(this.mapId);
    }
    deserialize(buffer) {
        this.mapId = buffer.readInt();
        if (this.mapId < 0) {
            Logger.error("Forbidden value (" + this.mapId + ") on element of ZaapRespawnUpdatedMessage.mapId.");
        }
    }
}

// Generated by Noxus messages 
export class KamasUpdateMessage extends ProtocolMessage {
    constructor(kamasTotal) {
        super(5537);
        this.kamasTotal = kamasTotal;
    }
    serialize() {
        this.buffer.writeVarInt(this.kamasTotal);
    }
    deserialize(buffer) {
        this.kamasTotal = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class ObjectAveragePricesErrorMessage extends ProtocolMessage {
constructor) {
    super(6336);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ObjectAveragePricesGetMessage extends ProtocolMessage {
constructor) {
    super(6334);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ObjectAveragePricesMessage extends ProtocolMessage {
    constructor(ids, avgPrices) {
        super(6335);
        this.ids = ids;
        this.avgPrices = avgPrices;
    }
    serialize() {
        this.buffer.writeShort(this.ids.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ids.length) {
            if (this.ids[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.ids[_loc2_] + ") on element 1 (starting at 1) of ids.");
            }
            this.buffer.writeVarShort(this.ids[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.avgPrices.length);
        var _loc3_ = 0;
        while (_loc3_ < this.avgPrices.length) {
            if (this.avgPrices[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.avgPrices[_loc3_] + ") on element 2 (starting at 1) of avgPrices.");
            }
            this.buffer.writeVarInt(this.avgPrices[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of ids.");
            }
            this.ids.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhInt();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of avgPrices.");
            }
            this.avgPrices.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class DecraftResultMessage extends ProtocolMessage {
    constructor(results) {
        super(6569);
        this.results = results;
    }
    serialize() {
        this.buffer.writeShort(this.results.length);
        var _loc2_ = 0;
        while (_loc2_ < this.results.length) {
            this.results[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new DecraftedItemStackInfo();
            _loc4_.deserialize(buffer);
            this.results.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeAcceptMessage extends ProtocolMessage {
constructor) {
    super(5508);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeBidHouseBuyMessage extends ProtocolMessage {
    constructor(uid, qty, price) {
        super(5804);
        this.uid = uid;
        this.qty = qty;
        this.price = price;
    }
    serialize() {
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element uid.");
        }
        this.buffer.writeVarInt(this.uid);
        if (this.qty < 0) {
            Logger.error("Forbidden value (" + this.qty + ") on element qty.");
        }
        this.buffer.writeVarInt(this.qty);
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarInt(this.price);
    }
    deserialize(buffer) {
        this.uid = buffer.readVarUhInt();
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element of ExchangeBidHouseBuyMessage.uid.");
        }
        this.qty = buffer.readVarUhInt();
        if (this.qty < 0) {
            Logger.error("Forbidden value (" + this.qty + ") on element of ExchangeBidHouseBuyMessage.qty.");
        }
        this.price = buffer.readVarUhInt();
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element of ExchangeBidHouseBuyMessage.price.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseBuyResultMessage extends ProtocolMessage {
    constructor(uid, bought) {
        super(6272);
        this.uid = uid;
        this.bought = bought;
    }
    serialize() {
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element uid.");
        }
        this.buffer.writeVarInt(this.uid);
        this.buffer.writeBoolean(this.bought);
    }
    deserialize(buffer) {
        this.uid = buffer.readVarUhInt();
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element of ExchangeBidHouseBuyResultMessage.uid.");
        }
        this.bought = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseGenericItemAddedMessage extends ProtocolMessage {
    constructor(objGenericId) {
        super(5947);
        this.objGenericId = objGenericId;
    }
    serialize() {
        if (this.objGenericId < 0) {
            Logger.error("Forbidden value (" + this.objGenericId + ") on element objGenericId.");
        }
        this.buffer.writeVarShort(this.objGenericId);
    }
    deserialize(buffer) {
        this.objGenericId = buffer.readVarUhShort();
        if (this.objGenericId < 0) {
            Logger.error("Forbidden value (" + this.objGenericId + ") on element of ExchangeBidHouseGenericItemAddedMessage.objGenericId.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseGenericItemRemovedMessage extends ProtocolMessage {
    constructor(objGenericId) {
        super(5948);
        this.objGenericId = objGenericId;
    }
    serialize() {
        if (this.objGenericId < 0) {
            Logger.error("Forbidden value (" + this.objGenericId + ") on element objGenericId.");
        }
        this.buffer.writeVarShort(this.objGenericId);
    }
    deserialize(buffer) {
        this.objGenericId = buffer.readVarUhShort();
        if (this.objGenericId < 0) {
            Logger.error("Forbidden value (" + this.objGenericId + ") on element of ExchangeBidHouseGenericItemRemovedMessage.objGenericId.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseInListAddedMessage extends ProtocolMessage {
    constructor(itemUID, objGenericId, effects, prices) {
        super(5949);
        this.itemUID = itemUID;
        this.objGenericId = objGenericId;
        this.effects = effects;
        this.prices = prices;
    }
    serialize() {
        this.buffer.writeInt(this.itemUID);
        this.buffer.writeInt(this.objGenericId);
        this.buffer.writeShort(this.effects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.effects.length) {
            this.buffer.writeShort((this.effects[_loc2_]).protocolId);
            this.effects[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.prices.length);
        var _loc3_ = 0;
        while (_loc3_ < this.prices.length) {
            if (this.prices[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.prices[_loc3_] + ") on element 4 (starting at 1) of prices.");
            }
            this.buffer.writeVarInt(this.prices[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = null;
        var _loc8_ = 0;
        this.itemUID = buffer.readInt();
        this.objGenericId = buffer.readInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedShort();
            _loc7_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc6_);
            _loc7_.deserialize(buffer);
            this.effects.push(_loc7_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc8_ = buffer.readVarUhInt();
            if (_loc8_ < 0) {
                Logger.error("Forbidden value (" + _loc8_ + ") on elements of prices.");
            }
            this.prices.push(_loc8_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseInListRemovedMessage extends ProtocolMessage {
    constructor(itemUID) {
        super(5950);
        this.itemUID = itemUID;
    }
    serialize() {
        this.buffer.writeInt(this.itemUID);
    }
    deserialize(buffer) {
        this.itemUID = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseInListUpdatedMessage extends ExchangeBidHouseInListAddedMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2, param3, param4);
        this.messageId = 6337;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseItemAddOkMessage extends ProtocolMessage {
    constructor(itemInfo) {
        super(5945);
        this.itemInfo = itemInfo;
    }
    serialize() {
        this.itemInfo.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.itemInfo = new ObjectItemToSellInBid();
        this.itemInfo.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseItemRemoveOkMessage extends ProtocolMessage {
    constructor(sellerId) {
        super(5946);
        this.sellerId = sellerId;
    }
    serialize() {
        this.buffer.writeInt(this.sellerId);
    }
    deserialize(buffer) {
        this.sellerId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseListMessage extends ProtocolMessage {
    constructor(id) {
        super(5807);
        this.id = id;
    }
    serialize() {
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarShort(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhShort();
        if (this.id < 0) {
            Logger.error("Forbidden value (" + this.id + ") on element of ExchangeBidHouseListMessage.id.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeBidHousePriceMessage extends ProtocolMessage {
    constructor(genId) {
        super(5805);
        this.genId = genId;
    }
    serialize() {
        if (this.genId < 0) {
            Logger.error("Forbidden value (" + this.genId + ") on element genId.");
        }
        this.buffer.writeVarShort(this.genId);
    }
    deserialize(buffer) {
        this.genId = buffer.readVarUhShort();
        if (this.genId < 0) {
            Logger.error("Forbidden value (" + this.genId + ") on element of ExchangeBidHousePriceMessage.genId.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseSearchMessage extends ProtocolMessage {
    constructor(type, genId) {
        super(5806);
        this.type = type;
        this.genId = genId;
    }
    serialize() {
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element type.");
        }
        this.buffer.writeVarInt(this.type);
        if (this.genId < 0) {
            Logger.error("Forbidden value (" + this.genId + ") on element genId.");
        }
        this.buffer.writeVarShort(this.genId);
    }
    deserialize(buffer) {
        this.type = buffer.readVarUhInt();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of ExchangeBidHouseSearchMessage.type.");
        }
        this.genId = buffer.readVarUhShort();
        if (this.genId < 0) {
            Logger.error("Forbidden value (" + this.genId + ") on element of ExchangeBidHouseSearchMessage.genId.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseTypeMessage extends ProtocolMessage {
    constructor(type) {
        super(5803);
        this.type = type;
    }
    serialize() {
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element type.");
        }
        this.buffer.writeVarInt(this.type);
    }
    deserialize(buffer) {
        this.type = buffer.readVarUhInt();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of ExchangeBidHouseTypeMessage.type.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeBidHouseUnsoldItemsMessage extends ProtocolMessage {
    constructor(items) {
        super(6612);
        this.items = items;
    }
    serialize() {
        this.buffer.writeShort(this.items.length);
        var _loc2_ = 0;
        while (_loc2_ < this.items.length) {
            this.items[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemGenericQuantity();
            _loc4_.deserialize(buffer);
            this.items.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeBidPriceForSellerMessage extends ExchangeBidPriceMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.allIdentical = param3;
        this.minimalPrices = param4;
        this.messageId = 6464;
    }
    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.allIdentical);
        this.buffer.writeShort(this.minimalPrices.length);
        var _loc2_ = 0;
        while (_loc2_ < this.minimalPrices.length) {
            if (this.minimalPrices[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.minimalPrices[_loc2_] + ") on element 2 (starting at 1) of minimalPrices.");
            }
            this.buffer.writeVarInt(this.minimalPrices[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        this.allIdentical = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of minimalPrices.");
            }
            this.minimalPrices.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeBidPriceMessage extends ProtocolMessage {
    constructor(genericId, averagePrice) {
        super(5755);
        this.genericId = genericId;
        this.averagePrice = averagePrice;
    }
    serialize() {
        if (this.genericId < 0) {
            Logger.error("Forbidden value (" + this.genericId + ") on element genericId.");
        }
        this.buffer.writeVarShort(this.genericId);
        this.buffer.writeVarInt(this.averagePrice);
    }
    deserialize(buffer) {
        this.genericId = buffer.readVarUhShort();
        if (this.genericId < 0) {
            Logger.error("Forbidden value (" + this.genericId + ") on element of ExchangeBidPriceMessage.genericId.");
        }
        this.averagePrice = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class ExchangeBidSearchOkMessage extends ProtocolMessage {
constructor) {
    super(5802);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeBuyMessage extends ProtocolMessage {
    constructor(objectToBuyId, quantity) {
        super(5774);
        this.objectToBuyId = objectToBuyId;
        this.quantity = quantity;
    }
    serialize() {
        if (this.objectToBuyId < 0) {
            Logger.error("Forbidden value (" + this.objectToBuyId + ") on element objectToBuyId.");
        }
        this.buffer.writeVarInt(this.objectToBuyId);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        this.objectToBuyId = buffer.readVarUhInt();
        if (this.objectToBuyId < 0) {
            Logger.error("Forbidden value (" + this.objectToBuyId + ") on element of ExchangeBuyMessage.objectToBuyId.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ExchangeBuyMessage.quantity.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeBuyOkMessage extends ProtocolMessage {
constructor) {
    super(5759);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeCraftCountModifiedMessage extends ProtocolMessage {
    constructor(count) {
        super(6595);
        this.count = count;
    }
    serialize() {
        this.buffer.writeVarInt(this.count);
    }
    deserialize(buffer) {
        this.count = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class ExchangeCraftCountRequestMessage extends ProtocolMessage {
    constructor(count) {
        super(6597);
        this.count = count;
    }
    serialize() {
        this.buffer.writeVarInt(this.count);
    }
    deserialize(buffer) {
        this.count = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class ExchangeCrafterJobLevelupMessage extends ProtocolMessage {
    constructor(crafterJobLevel) {
        super(6598);
        this.crafterJobLevel = crafterJobLevel;
    }
    serialize() {
        if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
            Logger.error("Forbidden value (" + this.crafterJobLevel + ") on element crafterJobLevel.");
        }
        this.buffer.writeByte(this.crafterJobLevel);
    }
    deserialize(buffer) {
        this.crafterJobLevel = buffer.readUnsignedByte();
        if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
            Logger.error("Forbidden value (" + this.crafterJobLevel + ") on element of ExchangeCrafterJobLevelupMessage.crafterJobLevel.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeCraftInformationObjectMessage extends ExchangeCraftResultWithObjectIdMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.playerId = param3;
        this.messageId = 5794;
    }
    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of ExchangeCraftInformationObjectMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeCraftPaymentModificationRequestMessage extends ProtocolMessage {
    constructor(quantity) {
        super(6579);
        this.quantity = quantity;
    }
    serialize() {
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ExchangeCraftPaymentModificationRequestMessage.quantity.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeCraftPaymentModifiedMessage extends ProtocolMessage {
    constructor(goldSum) {
        super(6578);
        this.goldSum = goldSum;
    }
    serialize() {
        if (this.goldSum < 0) {
            Logger.error("Forbidden value (" + this.goldSum + ") on element goldSum.");
        }
        this.buffer.writeVarInt(this.goldSum);
    }
    deserialize(buffer) {
        this.goldSum = buffer.readVarUhInt();
        if (this.goldSum < 0) {
            Logger.error("Forbidden value (" + this.goldSum + ") on element of ExchangeCraftPaymentModifiedMessage.goldSum.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeCraftResultMagicWithObjectDescMessage extends ExchangeCraftResultWithObjectDescMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.magicPoolStatus = param3;
        this.messageId = 6188;
    }
    serialize() {
        super.serialize();
        this.buffer.writeByte(this.magicPoolStatus);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.magicPoolStatus = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class ExchangeCraftResultMessage extends ProtocolMessage {
    constructor(craftResult) {
        super(5790);
        this.craftResult = craftResult;
    }
    serialize() {
        this.buffer.writeByte(this.craftResult);
    }
    deserialize(buffer) {
        this.craftResult = buffer.readByte();
        if (this.craftResult < 0) {
            Logger.error("Forbidden value (" + this.craftResult + ") on element of ExchangeCraftResultMessage.craftResult.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeCraftResultWithObjectDescMessage extends ExchangeCraftResultMessage {
    constructor(param1, param2) {
        super(param1);
        this.objectInfo = param2;
        this.messageId = 5999;
    }
    serialize() {
        super.serialize();
        this.objectInfo.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectInfo = new ObjectItemNotInContainer();
        this.objectInfo.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ExchangeCraftResultWithObjectIdMessage extends ExchangeCraftResultMessage {
    constructor(param1, param2) {
        super(param1);
        this.objectGenericId = param2;
        this.messageId = 6000;
    }
    serialize() {
        super.serialize();
        if (this.objectGenericId < 0) {
            Logger.error("Forbidden value (" + this.objectGenericId + ") on element objectGenericId.");
        }
        this.buffer.writeVarShort(this.objectGenericId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectGenericId = buffer.readVarUhShort();
        if (this.objectGenericId < 0) {
            Logger.error("Forbidden value (" + this.objectGenericId + ") on element of ExchangeCraftResultWithObjectIdMessage.objectGenericId.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeErrorMessage extends ProtocolMessage {
    constructor(errorType) {
        super(5513);
        this.errorType = errorType;
    }
    serialize() {
        this.buffer.writeByte(this.errorType);
    }
    deserialize(buffer) {
        this.errorType = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class ExchangeGuildTaxCollectorGetMessage extends ProtocolMessage {
    constructor(collectorName, worldX, worldY, mapId, subAreaId, userName, callerId, callerName, experience, pods, objectsInfos) {
        super(5762);
        this.collectorName = collectorName;
        this.worldX = worldX;
        this.worldY = worldY;
        this.mapId = mapId;
        this.subAreaId = subAreaId;
        this.userName = userName;
        this.callerId = callerId;
        this.callerName = callerName;
        this.experience = experience;
        this.pods = pods;
        this.objectsInfos = objectsInfos;
    }
    serialize() {
        this.buffer.writeUTF(this.collectorName);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeInt(this.mapId);
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeUTF(this.userName);
        if (this.callerId < 0 || this.callerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.callerId + ") on element callerId.");
        }
        this.buffer.writeVarLong(this.callerId);
        this.buffer.writeUTF(this.callerName);
        if (this.experience < -9007199254740990 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element experience.");
        }
        this.buffer.writeDouble(this.experience);
        if (this.pods < 0) {
            Logger.error("Forbidden value (" + this.pods + ") on element pods.");
        }
        this.buffer.writeVarShort(this.pods);
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            this.objectsInfos[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.collectorName = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of ExchangeGuildTaxCollectorGetMessage.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of ExchangeGuildTaxCollectorGetMessage.worldY.");
        }
        this.mapId = buffer.readInt();
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of ExchangeGuildTaxCollectorGetMessage.subAreaId.");
        }
        this.userName = buffer.readUTF();
        this.callerId = buffer.readVarUhLong();
        if (this.callerId < 0 || this.callerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.callerId + ") on element of ExchangeGuildTaxCollectorGetMessage.callerId.");
        }
        this.callerName = buffer.readUTF();
        this.experience = buffer.readDouble();
        if (this.experience < -9007199254740990 || this.experience > 9007199254740990) {
            Logger.error("Forbidden value (" + this.experience + ") on element of ExchangeGuildTaxCollectorGetMessage.experience.");
        }
        this.pods = buffer.readVarUhShort();
        if (this.pods < 0) {
            Logger.error("Forbidden value (" + this.pods + ") on element of ExchangeGuildTaxCollectorGetMessage.pods.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemGenericQuantity();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeHandleMountsStableMessage extends ProtocolMessage {
    constructor(actionType, ridesId) {
        super(6562);
        this.actionType = actionType;
        this.ridesId = ridesId;
    }
    serialize() {
        this.buffer.writeByte(this.actionType);
        this.buffer.writeShort(this.ridesId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ridesId.length) {
            if (this.ridesId[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.ridesId[_loc2_] + ") on element 2 (starting at 1) of ridesId.");
            }
            this.buffer.writeVarInt(this.ridesId[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.actionType = buffer.readByte();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of ridesId.");
            }
            this.ridesId.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeIsReadyMessage extends ProtocolMessage {
    constructor(id, ready) {
        super(5509);
        this.id = id;
        this.ready = ready;
    }
    serialize() {
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeDouble(this.id);
        this.buffer.writeBoolean(this.ready);
    }
    deserialize(buffer) {
        this.id = buffer.readDouble();
        if (this.id < -9007199254740990 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of ExchangeIsReadyMessage.id.");
        }
        this.ready = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class ExchangeItemAutoCraftStopedMessage extends ProtocolMessage {
    constructor(reason) {
        super(5810);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class ExchangeLeaveMessage extends LeaveDialogMessage {
    constructor(param1, param2) {
        super(param1);
        this.success = param2;
        this.messageId = 5628;
    }
    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.success);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.success = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class ExchangeMountFreeFromPaddockMessage extends ProtocolMessage {
    constructor(name, worldX, worldY, liberator) {
        super(6055);
        this.name = name;
        this.worldX = worldX;
        this.worldY = worldY;
        this.liberator = liberator;
    }
    serialize() {
        this.buffer.writeUTF(this.name);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeUTF(this.liberator);
    }
    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of ExchangeMountFreeFromPaddockMessage.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of ExchangeMountFreeFromPaddockMessage.worldY.");
        }
        this.liberator = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class ExchangeMountsPaddockAddMessage extends ProtocolMessage {
    constructor(mountDescription) {
        super(6561);
        this.mountDescription = mountDescription;
    }
    serialize() {
        this.buffer.writeShort(this.mountDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mountDescription.length) {
            this.mountDescription[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
            _loc4_.deserialize(buffer);
            this.mountDescription.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeMountsPaddockRemoveMessage extends ProtocolMessage {
    constructor(mountsId) {
        super(6559);
        this.mountsId = mountsId;
    }
    serialize() {
        this.buffer.writeShort(this.mountsId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mountsId.length) {
            this.buffer.writeVarInt(this.mountsId[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarInt();
            this.mountsId.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeMountsStableAddMessage extends ProtocolMessage {
    constructor(mountDescription) {
        super(6555);
        this.mountDescription = mountDescription;
    }
    serialize() {
        this.buffer.writeShort(this.mountDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mountDescription.length) {
            this.mountDescription[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
            _loc4_.deserialize(buffer);
            this.mountDescription.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeMountsStableBornAddMessage extends ExchangeMountsStableAddMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6557;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ExchangeMountsStableRemoveMessage extends ProtocolMessage {
    constructor(mountsId) {
        super(6556);
        this.mountsId = mountsId;
    }
    serialize() {
        this.buffer.writeShort(this.mountsId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.mountsId.length) {
            this.buffer.writeVarInt(this.mountsId[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarInt();
            this.mountsId.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeMountStableErrorMessage extends ProtocolMessage {
constructor) {
    super(5981);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeMountsTakenFromPaddockMessage extends ProtocolMessage {
    constructor(name, worldX, worldY, ownername) {
        super(6554);
        this.name = name;
        this.worldX = worldX;
        this.worldY = worldY;
        this.ownername = ownername;
    }
    serialize() {
        this.buffer.writeUTF(this.name);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeUTF(this.ownername);
    }
    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of ExchangeMountsTakenFromPaddockMessage.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of ExchangeMountsTakenFromPaddockMessage.worldY.");
        }
        this.ownername = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class ExchangeMountSterilizeFromPaddockMessage extends ProtocolMessage {
    constructor(name, worldX, worldY, sterilizator) {
        super(6056);
        this.name = name;
        this.worldX = worldX;
        this.worldY = worldY;
        this.sterilizator = sterilizator;
    }
    serialize() {
        this.buffer.writeUTF(this.name);
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element worldX.");
        }
        this.buffer.writeShort(this.worldX);
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element worldY.");
        }
        this.buffer.writeShort(this.worldY);
        this.buffer.writeUTF(this.sterilizator);
    }
    deserialize(buffer) {
        this.name = buffer.readUTF();
        this.worldX = buffer.readShort();
        if (this.worldX < -255 || this.worldX > 255) {
            Logger.error("Forbidden value (" + this.worldX + ") on element of ExchangeMountSterilizeFromPaddockMessage.worldX.");
        }
        this.worldY = buffer.readShort();
        if (this.worldY < -255 || this.worldY > 255) {
            Logger.error("Forbidden value (" + this.worldY + ") on element of ExchangeMountSterilizeFromPaddockMessage.worldY.");
        }
        this.sterilizator = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class ExchangeObjectAddedMessage extends ExchangeObjectMessage {
    constructor(param1, param2) {
        super(param1);
        this.object = param2;
        this.messageId = 5516;
    }
    serialize() {
        super.serialize();
        this.object.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ExchangeObjectMessage extends ProtocolMessage {
    constructor(remote) {
        super(5515);
        this.remote = remote;
    }
    serialize() {
        this.buffer.writeBoolean(this.remote);
    }
    deserialize(buffer) {
        this.remote = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class ExchangeObjectModifyPricedMessage extends ExchangeObjectMovePricedMessage {
    constructor(param1, param2, param3) {
        super(param1, param2, param3);
        this.messageId = 6238;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ExchangeObjectMoveKamaMessage extends ProtocolMessage {
    constructor(quantity) {
        super(5520);
        this.quantity = quantity;
    }
    serialize() {
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        this.quantity = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class ExchangeObjectMoveMessage extends ProtocolMessage {
    constructor(objectUID, quantity) {
        super(5518);
        this.objectUID = objectUID;
        this.quantity = quantity;
    }
    serialize() {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectMoveMessage.objectUID.");
        }
        this.quantity = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class ExchangeObjectMovePricedMessage extends ExchangeObjectMoveMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.price = param3;
        this.messageId = 5514;
    }
    serialize() {
        super.serialize();
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element price.");
        }
        this.buffer.writeVarInt(this.price);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.price = buffer.readVarUhInt();
        if (this.price < 0) {
            Logger.error("Forbidden value (" + this.price + ") on element of ExchangeObjectMovePricedMessage.price.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeObjectsAddedMessage extends ExchangeObjectMessage {
    constructor(param1, param2) {
        super(param1);
        this.object = param2;
        this.messageId = 6535;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.object.length);
        var _loc2_ = 0;
        while (_loc2_ < this.object.length) {
            this.object[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.object.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeObjectTransfertAllFromInvMessage extends ProtocolMessage {
constructor) {
    super(6184);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeObjectTransfertAllToInvMessage extends ProtocolMessage {
constructor) {
    super(6032);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeObjectTransfertExistingFromInvMessage extends ProtocolMessage {
constructor) {
    super(6325);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeObjectTransfertExistingToInvMessage extends ProtocolMessage {
constructor) {
    super(6326);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeObjectTransfertListFromInvMessage extends ProtocolMessage {
    constructor(ids) {
        super(6183);
        this.ids = ids;
    }
    serialize() {
        this.buffer.writeShort(this.ids.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ids.length) {
            if (this.ids[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.ids[_loc2_] + ") on element 1 (starting at 1) of ids.");
            }
            this.buffer.writeVarInt(this.ids[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of ids.");
            }
            this.ids.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeObjectTransfertListToInvMessage extends ProtocolMessage {
    constructor(ids) {
        super(6039);
        this.ids = ids;
    }
    serialize() {
        this.buffer.writeShort(this.ids.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ids.length) {
            if (this.ids[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.ids[_loc2_] + ") on element 1 (starting at 1) of ids.");
            }
            this.buffer.writeVarInt(this.ids[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of ids.");
            }
            this.ids.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeObjectTransfertListWithQuantityToInvMessage extends ProtocolMessage {
    constructor(ids, qtys) {
        super(6470);
        this.ids = ids;
        this.qtys = qtys;
    }
    serialize() {
        this.buffer.writeShort(this.ids.length);
        var _loc2_ = 0;
        while (_loc2_ < this.ids.length) {
            if (this.ids[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.ids[_loc2_] + ") on element 1 (starting at 1) of ids.");
            }
            this.buffer.writeVarInt(this.ids[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.qtys.length);
        var _loc3_ = 0;
        while (_loc3_ < this.qtys.length) {
            if (this.qtys[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.qtys[_loc3_] + ") on element 2 (starting at 1) of qtys.");
            }
            this.buffer.writeVarInt(this.qtys[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhInt();
            if (_loc6_ < 0) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of ids.");
            }
            this.ids.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhInt();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of qtys.");
            }
            this.qtys.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeObjectUseInWorkshopMessage extends ProtocolMessage {
    constructor(objectUID, quantity) {
        super(6004);
        this.objectUID = objectUID;
        this.quantity = quantity;
    }
    serialize() {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectUseInWorkshopMessage.objectUID.");
        }
        this.quantity = buffer.readVarInt();
    }
}

// Generated by Noxus messages 
export class ExchangeOfflineSoldItemsMessage extends ProtocolMessage {
    constructor(bidHouseItems, merchantItems) {
        super(6613);
        this.bidHouseItems = bidHouseItems;
        this.merchantItems = merchantItems;
    }
    serialize() {
        this.buffer.writeShort(this.bidHouseItems.length);
        var _loc2_ = 0;
        while (_loc2_ < this.bidHouseItems.length) {
            this.bidHouseItems[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.merchantItems.length);
        var _loc3_ = 0;
        while (_loc3_ < this.merchantItems.length) {
            this.merchantItems[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new ObjectItemGenericQuantityPrice();
            _loc6_.deserialize(buffer);
            this.bidHouseItems.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new ObjectItemGenericQuantityPrice();
            _loc7_.deserialize(buffer);
            this.merchantItems.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeOkMultiCraftMessage extends ProtocolMessage {
    constructor(initiatorId, otherId, role) {
        super(5768);
        this.initiatorId = initiatorId;
        this.otherId = otherId;
        this.role = role;
    }
    serialize() {
        if (this.initiatorId < 0 || this.initiatorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.initiatorId + ") on element initiatorId.");
        }
        this.buffer.writeVarLong(this.initiatorId);
        if (this.otherId < 0 || this.otherId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.otherId + ") on element otherId.");
        }
        this.buffer.writeVarLong(this.otherId);
        this.buffer.writeByte(this.role);
    }
    deserialize(buffer) {
        this.initiatorId = buffer.readVarUhLong();
        if (this.initiatorId < 0 || this.initiatorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.initiatorId + ") on element of ExchangeOkMultiCraftMessage.initiatorId.");
        }
        this.otherId = buffer.readVarUhLong();
        if (this.otherId < 0 || this.otherId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.otherId + ") on element of ExchangeOkMultiCraftMessage.otherId.");
        }
        this.role = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class ExchangeOnHumanVendorRequestMessage extends ProtocolMessage {
    constructor(humanVendorId, humanVendorCell) {
        super(5772);
        this.humanVendorId = humanVendorId;
        this.humanVendorCell = humanVendorCell;
    }
    serialize() {
        if (this.humanVendorId < 0 || this.humanVendorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.humanVendorId + ") on element humanVendorId.");
        }
        this.buffer.writeVarLong(this.humanVendorId);
        if (this.humanVendorCell < 0 || this.humanVendorCell > 559) {
            Logger.error("Forbidden value (" + this.humanVendorCell + ") on element humanVendorCell.");
        }
        this.buffer.writeVarShort(this.humanVendorCell);
    }
    deserialize(buffer) {
        this.humanVendorId = buffer.readVarUhLong();
        if (this.humanVendorId < 0 || this.humanVendorId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.humanVendorId + ") on element of ExchangeOnHumanVendorRequestMessage.humanVendorId.");
        }
        this.humanVendorCell = buffer.readVarUhShort();
        if (this.humanVendorCell < 0 || this.humanVendorCell > 559) {
            Logger.error("Forbidden value (" + this.humanVendorCell + ") on element of ExchangeOnHumanVendorRequestMessage.humanVendorCell.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangePlayerMultiCraftRequestMessage extends ExchangeRequestMessage {
    constructor(param1, param2, param3) {
        super(param1);
        this.target = param2;
        this.skillId = param3;
        this.messageId = 5784;
    }
    serialize() {
        super.serialize();
        if (this.target < 0 || this.target > 9007199254740990) {
            Logger.error("Forbidden value (" + this.target + ") on element target.");
        }
        this.buffer.writeVarLong(this.target);
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarInt(this.skillId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.target = buffer.readVarUhLong();
        if (this.target < 0 || this.target > 9007199254740990) {
            Logger.error("Forbidden value (" + this.target + ") on element of ExchangePlayerMultiCraftRequestMessage.target.");
        }
        this.skillId = buffer.readVarUhInt();
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element of ExchangePlayerMultiCraftRequestMessage.skillId.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangePlayerRequestMessage extends ExchangeRequestMessage {
    constructor(param1, param2) {
        super(param1);
        this.target = param2;
        this.messageId = 5773;
    }
    serialize() {
        super.serialize();
        if (this.target < 0 || this.target > 9007199254740990) {
            Logger.error("Forbidden value (" + this.target + ") on element target.");
        }
        this.buffer.writeVarLong(this.target);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.target = buffer.readVarUhLong();
        if (this.target < 0 || this.target > 9007199254740990) {
            Logger.error("Forbidden value (" + this.target + ") on element of ExchangePlayerRequestMessage.target.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeReadyMessage extends ProtocolMessage {
    constructor(ready, step) {
        super(5511);
        this.ready = ready;
        this.step = step;
    }
    serialize() {
        this.buffer.writeBoolean(this.ready);
        if (this.step < 0) {
            Logger.error("Forbidden value (" + this.step + ") on element step.");
        }
        this.buffer.writeVarShort(this.step);
    }
    deserialize(buffer) {
        this.ready = buffer.readBoolean();
        this.step = buffer.readVarUhShort();
        if (this.step < 0) {
            Logger.error("Forbidden value (" + this.step + ") on element of ExchangeReadyMessage.step.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeReplayStopMessage extends ProtocolMessage {
constructor) {
    super(6001);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeReplyTaxVendorMessage extends ProtocolMessage {
    constructor(objectValue, totalTaxValue) {
        super(5787);
        this.objectValue = objectValue;
        this.totalTaxValue = totalTaxValue;
    }
    serialize() {
        if (this.objectValue < 0) {
            Logger.error("Forbidden value (" + this.objectValue + ") on element objectValue.");
        }
        this.buffer.writeVarInt(this.objectValue);
        if (this.totalTaxValue < 0) {
            Logger.error("Forbidden value (" + this.totalTaxValue + ") on element totalTaxValue.");
        }
        this.buffer.writeVarInt(this.totalTaxValue);
    }
    deserialize(buffer) {
        this.objectValue = buffer.readVarUhInt();
        if (this.objectValue < 0) {
            Logger.error("Forbidden value (" + this.objectValue + ") on element of ExchangeReplyTaxVendorMessage.objectValue.");
        }
        this.totalTaxValue = buffer.readVarUhInt();
        if (this.totalTaxValue < 0) {
            Logger.error("Forbidden value (" + this.totalTaxValue + ") on element of ExchangeReplyTaxVendorMessage.totalTaxValue.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeRequestedMessage extends ProtocolMessage {
    constructor(exchangeType) {
        super(5522);
        this.exchangeType = exchangeType;
    }
    serialize() {
        this.buffer.writeByte(this.exchangeType);
    }
    deserialize(buffer) {
        this.exchangeType = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class ExchangeRequestedTradeMessage extends ExchangeRequestedMessage {
    constructor(param1, param2, param3) {
        super(param1);
        this.source = param2;
        this.target = param3;
        this.messageId = 5523;
    }
    serialize() {
        super.serialize();
        if (this.source < 0 || this.source > 9007199254740990) {
            Logger.error("Forbidden value (" + this.source + ") on element source.");
        }
        this.buffer.writeVarLong(this.source);
        if (this.target < 0 || this.target > 9007199254740990) {
            Logger.error("Forbidden value (" + this.target + ") on element target.");
        }
        this.buffer.writeVarLong(this.target);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.source = buffer.readVarUhLong();
        if (this.source < 0 || this.source > 9007199254740990) {
            Logger.error("Forbidden value (" + this.source + ") on element of ExchangeRequestedTradeMessage.source.");
        }
        this.target = buffer.readVarUhLong();
        if (this.target < 0 || this.target > 9007199254740990) {
            Logger.error("Forbidden value (" + this.target + ") on element of ExchangeRequestedTradeMessage.target.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeRequestMessage extends ProtocolMessage {
    constructor(exchangeType) {
        super(5505);
        this.exchangeType = exchangeType;
    }
    serialize() {
        this.buffer.writeByte(this.exchangeType);
    }
    deserialize(buffer) {
        this.exchangeType = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class ExchangeRequestOnMountStockMessage extends ProtocolMessage {
constructor) {
    super(5986);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeRequestOnShopStockMessage extends ProtocolMessage {
constructor) {
    super(5753);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeRequestOnTaxCollectorMessage extends ProtocolMessage {
    constructor(taxCollectorId) {
        super(5779);
        this.taxCollectorId = taxCollectorId;
    }
    serialize() {
        this.buffer.writeInt(this.taxCollectorId);
    }
    deserialize(buffer) {
        this.taxCollectorId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class ExchangeSellMessage extends ProtocolMessage {
    constructor(objectToSellId, quantity) {
        super(5778);
        this.objectToSellId = objectToSellId;
        this.quantity = quantity;
    }
    serialize() {
        if (this.objectToSellId < 0) {
            Logger.error("Forbidden value (" + this.objectToSellId + ") on element objectToSellId.");
        }
        this.buffer.writeVarInt(this.objectToSellId);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        this.objectToSellId = buffer.readVarUhInt();
        if (this.objectToSellId < 0) {
            Logger.error("Forbidden value (" + this.objectToSellId + ") on element of ExchangeSellMessage.objectToSellId.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ExchangeSellMessage.quantity.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeSellOkMessage extends ProtocolMessage {
constructor) {
    super(5792);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeSetCraftRecipeMessage extends ProtocolMessage {
    constructor(objectGID) {
        super(6389);
        this.objectGID = objectGID;
    }
    serialize() {
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element objectGID.");
        }
        this.buffer.writeVarShort(this.objectGID);
    }
    deserialize(buffer) {
        this.objectGID = buffer.readVarUhShort();
        if (this.objectGID < 0) {
            Logger.error("Forbidden value (" + this.objectGID + ") on element of ExchangeSetCraftRecipeMessage.objectGID.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeShopStockMovementRemovedMessage extends ProtocolMessage {
    constructor(objectId) {
        super(5907);
        this.objectId = objectId;
    }
    serialize() {
        if (this.objectId < 0) {
            Logger.error("Forbidden value (" + this.objectId + ") on element objectId.");
        }
        this.buffer.writeVarInt(this.objectId);
    }
    deserialize(buffer) {
        this.objectId = buffer.readVarUhInt();
        if (this.objectId < 0) {
            Logger.error("Forbidden value (" + this.objectId + ") on element of ExchangeShopStockMovementRemovedMessage.objectId.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeShopStockMovementUpdatedMessage extends ProtocolMessage {
    constructor(objectInfo) {
        super(5909);
        this.objectInfo = objectInfo;
    }
    serialize() {
        this.objectInfo.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.objectInfo = new ObjectItemToSell();
        this.objectInfo.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ExchangeShopStockMultiMovementRemovedMessage extends ProtocolMessage {
    constructor(objectIdList) {
        super(6037);
        this.objectIdList = objectIdList;
    }
    serialize() {
        this.buffer.writeShort(this.objectIdList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectIdList.length) {
            if (this.objectIdList[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.objectIdList[_loc2_] + ") on element 1 (starting at 1) of objectIdList.");
            }
            this.buffer.writeVarInt(this.objectIdList[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of objectIdList.");
            }
            this.objectIdList.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeShopStockMultiMovementUpdatedMessage extends ProtocolMessage {
    constructor(objectInfoList) {
        super(6038);
        this.objectInfoList = objectInfoList;
    }
    serialize() {
        this.buffer.writeShort(this.objectInfoList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectInfoList.length) {
            this.objectInfoList[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSell();
            _loc4_.deserialize(buffer);
            this.objectInfoList.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeShopStockStartedMessage extends ProtocolMessage {
    constructor(objectsInfos) {
        super(5910);
        this.objectsInfos = objectsInfos;
    }
    serialize() {
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            this.objectsInfos[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSell();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeShowVendorTaxMessage extends ProtocolMessage {
constructor) {
    super(5783);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeStartAsVendorMessage extends ProtocolMessage {
constructor) {
    super(5775);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeStartedBidBuyerMessage extends ProtocolMessage {
    constructor(buyerDescriptor) {
        super(5904);
        this.buyerDescriptor = buyerDescriptor;
    }
    serialize() {
        this.buyerDescriptor.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.buyerDescriptor = new SellerBuyerDescriptor();
        this.buyerDescriptor.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ExchangeStartedBidSellerMessage extends ProtocolMessage {
    constructor(sellerDescriptor, objectsInfos) {
        super(5905);
        this.sellerDescriptor = sellerDescriptor;
        this.objectsInfos = objectsInfos;
    }
    serialize() {
        this.sellerDescriptor.serialize(this.buffer);
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            this.objectsInfos[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.sellerDescriptor = new SellerBuyerDescriptor();
        this.sellerDescriptor.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSellInBid();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartedMessage extends ProtocolMessage {
    constructor(exchangeType) {
        super(5512);
        this.exchangeType = exchangeType;
    }
    serialize() {
        this.buffer.writeByte(this.exchangeType);
    }
    deserialize(buffer) {
        this.exchangeType = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class ExchangeStartedMountStockMessage extends ProtocolMessage {
    constructor(objectsInfos) {
        super(5984);
        this.objectsInfos = objectsInfos;
    }
    serialize() {
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            this.objectsInfos[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartedTaxCollectorShopMessage extends ProtocolMessage {
    constructor(objects, kamas) {
        super(6664);
        this.objects = objects;
        this.kamas = kamas;
    }
    serialize() {
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            this.objects[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        this.buffer.writeVarInt(this.kamas);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
        this.kamas = buffer.readVarUhInt();
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element of ExchangeStartedTaxCollectorShopMessage.kamas.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartedWithPodsMessage extends ExchangeStartedMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7) {
        super(param1);
        this.firstCharacterId = param2;
        this.firstCharacterCurrentWeight = param3;
        this.firstCharacterMaxWeight = param4;
        this.secondCharacterId = param5;
        this.secondCharacterCurrentWeight = param6;
        this.secondCharacterMaxWeight = param7;
        this.messageId = 6129;
    }
    serialize() {
        super.serialize();
        if (this.firstCharacterId < -9007199254740990 || this.firstCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.firstCharacterId + ") on element firstCharacterId.");
        }
        this.buffer.writeDouble(this.firstCharacterId);
        if (this.firstCharacterCurrentWeight < 0) {
            Logger.error("Forbidden value (" + this.firstCharacterCurrentWeight + ") on element firstCharacterCurrentWeight.");
        }
        this.buffer.writeVarInt(this.firstCharacterCurrentWeight);
        if (this.firstCharacterMaxWeight < 0) {
            Logger.error("Forbidden value (" + this.firstCharacterMaxWeight + ") on element firstCharacterMaxWeight.");
        }
        this.buffer.writeVarInt(this.firstCharacterMaxWeight);
        if (this.secondCharacterId < -9007199254740990 || this.secondCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.secondCharacterId + ") on element secondCharacterId.");
        }
        this.buffer.writeDouble(this.secondCharacterId);
        if (this.secondCharacterCurrentWeight < 0) {
            Logger.error("Forbidden value (" + this.secondCharacterCurrentWeight + ") on element secondCharacterCurrentWeight.");
        }
        this.buffer.writeVarInt(this.secondCharacterCurrentWeight);
        if (this.secondCharacterMaxWeight < 0) {
            Logger.error("Forbidden value (" + this.secondCharacterMaxWeight + ") on element secondCharacterMaxWeight.");
        }
        this.buffer.writeVarInt(this.secondCharacterMaxWeight);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.firstCharacterId = buffer.readDouble();
        if (this.firstCharacterId < -9007199254740990 || this.firstCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.firstCharacterId + ") on element of ExchangeStartedWithPodsMessage.firstCharacterId.");
        }
        this.firstCharacterCurrentWeight = buffer.readVarUhInt();
        if (this.firstCharacterCurrentWeight < 0) {
            Logger.error("Forbidden value (" + this.firstCharacterCurrentWeight + ") on element of ExchangeStartedWithPodsMessage.firstCharacterCurrentWeight.");
        }
        this.firstCharacterMaxWeight = buffer.readVarUhInt();
        if (this.firstCharacterMaxWeight < 0) {
            Logger.error("Forbidden value (" + this.firstCharacterMaxWeight + ") on element of ExchangeStartedWithPodsMessage.firstCharacterMaxWeight.");
        }
        this.secondCharacterId = buffer.readDouble();
        if (this.secondCharacterId < -9007199254740990 || this.secondCharacterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.secondCharacterId + ") on element of ExchangeStartedWithPodsMessage.secondCharacterId.");
        }
        this.secondCharacterCurrentWeight = buffer.readVarUhInt();
        if (this.secondCharacterCurrentWeight < 0) {
            Logger.error("Forbidden value (" + this.secondCharacterCurrentWeight + ") on element of ExchangeStartedWithPodsMessage.secondCharacterCurrentWeight.");
        }
        this.secondCharacterMaxWeight = buffer.readVarUhInt();
        if (this.secondCharacterMaxWeight < 0) {
            Logger.error("Forbidden value (" + this.secondCharacterMaxWeight + ") on element of ExchangeStartedWithPodsMessage.secondCharacterMaxWeight.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartedWithStorageMessage extends ExchangeStartedMessage {
    constructor(param1, param2) {
        super(param1);
        this.storageMaxSlot = param2;
        this.messageId = 6236;
    }
    serialize() {
        super.serialize();
        if (this.storageMaxSlot < 0) {
            Logger.error("Forbidden value (" + this.storageMaxSlot + ") on element storageMaxSlot.");
        }
        this.buffer.writeVarInt(this.storageMaxSlot);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.storageMaxSlot = buffer.readVarUhInt();
        if (this.storageMaxSlot < 0) {
            Logger.error("Forbidden value (" + this.storageMaxSlot + ") on element of ExchangeStartedWithStorageMessage.storageMaxSlot.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartOkCraftMessage extends ProtocolMessage {
constructor) {
    super(5813);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeStartOkCraftWithInformationMessage extends ExchangeStartOkCraftMessage {
    constructor(param1) {
        this.skillId = param1;
        this.messageId = 5941;
    }
    serialize() {
        super.serialize();
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarInt(this.skillId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.skillId = buffer.readVarUhInt();
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkCraftWithInformationMessage.skillId.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartOkHumanVendorMessage extends ProtocolMessage {
    constructor(sellerId, objectsInfos) {
        super(5767);
        this.sellerId = sellerId;
        this.objectsInfos = objectsInfos;
    }
    serialize() {
        if (this.sellerId < -9007199254740990 || this.sellerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sellerId + ") on element sellerId.");
        }
        this.buffer.writeDouble(this.sellerId);
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            this.objectsInfos[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.sellerId = buffer.readDouble();
        if (this.sellerId < -9007199254740990 || this.sellerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.sellerId + ") on element of ExchangeStartOkHumanVendorMessage.sellerId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSellInHumanVendorShop();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartOkJobIndexMessage extends ProtocolMessage {
    constructor(jobs) {
        super(5819);
        this.jobs = jobs;
    }
    serialize() {
        this.buffer.writeShort(this.jobs.length);
        var _loc2_ = 0;
        while (_loc2_ < this.jobs.length) {
            if (this.jobs[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.jobs[_loc2_] + ") on element 1 (starting at 1) of jobs.");
            }
            this.buffer.writeVarInt(this.jobs[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of jobs.");
            }
            this.jobs.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartOkMountMessage extends ExchangeStartOkMountWithOutPaddockMessage {
    constructor(param1, param2) {
        super(param1);
        this.paddockedMountsDescription = param2;
        this.messageId = 5979;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.paddockedMountsDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.paddockedMountsDescription.length) {
            this.paddockedMountsDescription[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
            _loc4_.deserialize(buffer);
            this.paddockedMountsDescription.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartOkMountWithOutPaddockMessage extends ProtocolMessage {
    constructor(stabledMountsDescription) {
        super(5991);
        this.stabledMountsDescription = stabledMountsDescription;
    }
    serialize() {
        this.buffer.writeShort(this.stabledMountsDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.stabledMountsDescription.length) {
            this.stabledMountsDescription[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
            _loc4_.deserialize(buffer);
            this.stabledMountsDescription.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartOkMulticraftCrafterMessage extends ProtocolMessage {
    constructor(skillId) {
        super(5818);
        this.skillId = skillId;
    }
    serialize() {
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarInt(this.skillId);
    }
    deserialize(buffer) {
        this.skillId = buffer.readVarUhInt();
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkMulticraftCrafterMessage.skillId.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartOkMulticraftCustomerMessage extends ProtocolMessage {
    constructor(skillId, crafterJobLevel) {
        super(5817);
        this.skillId = skillId;
        this.crafterJobLevel = crafterJobLevel;
    }
    serialize() {
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element skillId.");
        }
        this.buffer.writeVarInt(this.skillId);
        if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
            Logger.error("Forbidden value (" + this.crafterJobLevel + ") on element crafterJobLevel.");
        }
        this.buffer.writeByte(this.crafterJobLevel);
    }
    deserialize(buffer) {
        this.skillId = buffer.readVarUhInt();
        if (this.skillId < 0) {
            Logger.error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkMulticraftCustomerMessage.skillId.");
        }
        this.crafterJobLevel = buffer.readUnsignedByte();
        if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
            Logger.error("Forbidden value (" + this.crafterJobLevel + ") on element of ExchangeStartOkMulticraftCustomerMessage.crafterJobLevel.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartOkNpcShopMessage extends ProtocolMessage {
    constructor(npcSellerId, tokenId, objectsInfos) {
        super(5761);
        this.npcSellerId = npcSellerId;
        this.tokenId = tokenId;
        this.objectsInfos = objectsInfos;
    }
    serialize() {
        if (this.npcSellerId < -9007199254740990 || this.npcSellerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.npcSellerId + ") on element npcSellerId.");
        }
        this.buffer.writeDouble(this.npcSellerId);
        if (this.tokenId < 0) {
            Logger.error("Forbidden value (" + this.tokenId + ") on element tokenId.");
        }
        this.buffer.writeVarShort(this.tokenId);
        this.buffer.writeShort(this.objectsInfos.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsInfos.length) {
            this.objectsInfos[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.npcSellerId = buffer.readDouble();
        if (this.npcSellerId < -9007199254740990 || this.npcSellerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.npcSellerId + ") on element of ExchangeStartOkNpcShopMessage.npcSellerId.");
        }
        this.tokenId = buffer.readVarUhShort();
        if (this.tokenId < 0) {
            Logger.error("Forbidden value (" + this.tokenId + ") on element of ExchangeStartOkNpcShopMessage.tokenId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSellInNpcShop();
            _loc4_.deserialize(buffer);
            this.objectsInfos.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartOkNpcTradeMessage extends ProtocolMessage {
    constructor(npcId) {
        super(5785);
        this.npcId = npcId;
    }
    serialize() {
        if (this.npcId < -9007199254740990 || this.npcId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.npcId + ") on element npcId.");
        }
        this.buffer.writeDouble(this.npcId);
    }
    deserialize(buffer) {
        this.npcId = buffer.readDouble();
        if (this.npcId < -9007199254740990 || this.npcId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.npcId + ") on element of ExchangeStartOkNpcTradeMessage.npcId.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartOkRecycleTradeMessage extends ProtocolMessage {
    constructor(percentToPrism, percentToPlayer) {
        super(6600);
        this.percentToPrism = percentToPrism;
        this.percentToPlayer = percentToPlayer;
    }
    serialize() {
        if (this.percentToPrism < 0) {
            Logger.error("Forbidden value (" + this.percentToPrism + ") on element percentToPrism.");
        }
        this.buffer.writeShort(this.percentToPrism);
        if (this.percentToPlayer < 0) {
            Logger.error("Forbidden value (" + this.percentToPlayer + ") on element percentToPlayer.");
        }
        this.buffer.writeShort(this.percentToPlayer);
    }
    deserialize(buffer) {
        this.percentToPrism = buffer.readShort();
        if (this.percentToPrism < 0) {
            Logger.error("Forbidden value (" + this.percentToPrism + ") on element of ExchangeStartOkRecycleTradeMessage.percentToPrism.");
        }
        this.percentToPlayer = buffer.readShort();
        if (this.percentToPlayer < 0) {
            Logger.error("Forbidden value (" + this.percentToPlayer + ") on element of ExchangeStartOkRecycleTradeMessage.percentToPlayer.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeStartOkRunesTradeMessage extends ProtocolMessage {
constructor) {
    super(6567);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class ExchangeStoppedMessage extends ProtocolMessage {
    constructor(id) {
        super(6589);
        this.id = id;
    }
    serialize() {
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element id.");
        }
        this.buffer.writeVarLong(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readVarUhLong();
        if (this.id < 0 || this.id > 9007199254740990) {
            Logger.error("Forbidden value (" + this.id + ") on element of ExchangeStoppedMessage.id.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeTypesExchangerDescriptionForUserMessage extends ProtocolMessage {
    constructor(typeDescription) {
        super(5765);
        this.typeDescription = typeDescription;
    }
    serialize() {
        this.buffer.writeShort(this.typeDescription.length);
        var _loc2_ = 0;
        while (_loc2_ < this.typeDescription.length) {
            if (this.typeDescription[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.typeDescription[_loc2_] + ") on element 1 (starting at 1) of typeDescription.");
            }
            this.buffer.writeVarInt(this.typeDescription[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of typeDescription.");
            }
            this.typeDescription.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeTypesItemsExchangerDescriptionForUserMessage extends ProtocolMessage {
    constructor(itemTypeDescriptions) {
        super(5752);
        this.itemTypeDescriptions = itemTypeDescriptions;
    }
    serialize() {
        this.buffer.writeShort(this.itemTypeDescriptions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.itemTypeDescriptions.length) {
            this.itemTypeDescriptions[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new BidExchangerObjectInfo();
            _loc4_.deserialize(buffer);
            this.itemTypeDescriptions.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeWaitingResultMessage extends ProtocolMessage {
    constructor(bwait) {
        super(5786);
        this.bwait = bwait;
    }
    serialize() {
        this.buffer.writeBoolean(this.bwait);
    }
    deserialize(buffer) {
        this.bwait = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class ExchangeWeightMessage extends ProtocolMessage {
    constructor(currentWeight, maxWeight) {
        super(5793);
        this.currentWeight = currentWeight;
        this.maxWeight = maxWeight;
    }
    serialize() {
        if (this.currentWeight < 0) {
            Logger.error("Forbidden value (" + this.currentWeight + ") on element currentWeight.");
        }
        this.buffer.writeVarInt(this.currentWeight);
        if (this.maxWeight < 0) {
            Logger.error("Forbidden value (" + this.maxWeight + ") on element maxWeight.");
        }
        this.buffer.writeVarInt(this.maxWeight);
    }
    deserialize(buffer) {
        this.currentWeight = buffer.readVarUhInt();
        if (this.currentWeight < 0) {
            Logger.error("Forbidden value (" + this.currentWeight + ") on element of ExchangeWeightMessage.currentWeight.");
        }
        this.maxWeight = buffer.readVarUhInt();
        if (this.maxWeight < 0) {
            Logger.error("Forbidden value (" + this.maxWeight + ") on element of ExchangeWeightMessage.maxWeight.");
        }
    }
}

// Generated by Noxus messages 
export class FocusedExchangeReadyMessage extends ExchangeReadyMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.focusActionId = param3;
        this.messageId = 6701;
    }
    serialize() {
        super.serialize();
        if (this.focusActionId < 0) {
            Logger.error("Forbidden value (" + this.focusActionId + ") on element focusActionId.");
        }
        this.buffer.writeVarInt(this.focusActionId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.focusActionId = buffer.readVarUhInt();
        if (this.focusActionId < 0) {
            Logger.error("Forbidden value (" + this.focusActionId + ") on element of FocusedExchangeReadyMessage.focusActionId.");
        }
    }
}

// Generated by Noxus messages 
export class ItemNoMoreAvailableMessage extends ProtocolMessage {
constructor) {
    super(5769);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class JobBookSubscribeRequestMessage extends ProtocolMessage {
    constructor(jobIds) {
        super(6592);
        this.jobIds = jobIds;
    }
    serialize() {
        this.buffer.writeShort(this.jobIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.jobIds.length) {
            if (this.jobIds[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.jobIds[_loc2_] + ") on element 1 (starting at 1) of jobIds.");
            }
            this.buffer.writeByte(this.jobIds[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of jobIds.");
            }
            this.jobIds.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class RecycleResultMessage extends ProtocolMessage {
    constructor(nuggetsForPrism, nuggetsForPlayer) {
        super(6601);
        this.nuggetsForPrism = nuggetsForPrism;
        this.nuggetsForPlayer = nuggetsForPlayer;
    }
    serialize() {
        if (this.nuggetsForPrism < 0) {
            Logger.error("Forbidden value (" + this.nuggetsForPrism + ") on element nuggetsForPrism.");
        }
        this.buffer.writeVarInt(this.nuggetsForPrism);
        if (this.nuggetsForPlayer < 0) {
            Logger.error("Forbidden value (" + this.nuggetsForPlayer + ") on element nuggetsForPlayer.");
        }
        this.buffer.writeVarInt(this.nuggetsForPlayer);
    }
    deserialize(buffer) {
        this.nuggetsForPrism = buffer.readVarUhInt();
        if (this.nuggetsForPrism < 0) {
            Logger.error("Forbidden value (" + this.nuggetsForPrism + ") on element of RecycleResultMessage.nuggetsForPrism.");
        }
        this.nuggetsForPlayer = buffer.readVarUhInt();
        if (this.nuggetsForPlayer < 0) {
            Logger.error("Forbidden value (" + this.nuggetsForPlayer + ") on element of RecycleResultMessage.nuggetsForPlayer.");
        }
    }
}

// Generated by Noxus messages 
export class UpdateMountBoostMessage extends ProtocolMessage {
    constructor(rideId, boostToUpdateList) {
        super(6179);
        this.rideId = rideId;
        this.boostToUpdateList = boostToUpdateList;
    }
    serialize() {
        this.buffer.writeVarInt(this.rideId);
        this.buffer.writeShort(this.boostToUpdateList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.boostToUpdateList.length) {
            this.buffer.writeShort((this.boostToUpdateList[_loc2_]).protocolId);
            this.boostToUpdateList[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.rideId = buffer.readVarInt();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(UpdateMountBoost, _loc4_);
            _loc5_.deserialize(buffer);
            this.boostToUpdateList.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeKamaModifiedMessage extends ExchangeObjectMessage {
    constructor(param1, param2) {
        super(param1);
        this.quantity = param2;
        this.messageId = 5521;
    }
    serialize() {
        super.serialize();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ExchangeKamaModifiedMessage.quantity.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeMultiCraftCrafterCanUseHisRessourcesMessage extends ProtocolMessage {
    constructor(allowed) {
        super(6020);
        this.allowed = allowed;
    }
    serialize() {
        this.buffer.writeBoolean(this.allowed);
    }
    deserialize(buffer) {
        this.allowed = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage extends ProtocolMessage {
    constructor(allow) {
        super(6021);
        this.allow = allow;
    }
    serialize() {
        this.buffer.writeBoolean(this.allow);
    }
    deserialize(buffer) {
        this.allow = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class ExchangeObjectModifiedInBagMessage extends ExchangeObjectMessage {
    constructor(param1, param2) {
        super(param1);
        this.object = param2;
        this.messageId = 6008;
    }
    serialize() {
        super.serialize();
        this.object.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ExchangeObjectModifiedMessage extends ExchangeObjectMessage {
    constructor(param1, param2) {
        super(param1);
        this.object = param2;
        this.messageId = 5519;
    }
    serialize() {
        super.serialize();
        this.object.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ExchangeObjectPutInBagMessage extends ExchangeObjectMessage {
    constructor(param1, param2) {
        super(param1);
        this.object = param2;
        this.messageId = 6009;
    }
    serialize() {
        super.serialize();
        this.object.serialize(this.buffer);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ExchangeObjectRemovedFromBagMessage extends ExchangeObjectMessage {
    constructor(param1, param2) {
        super(param1);
        this.objectUID = param2;
        this.messageId = 6010;
    }
    serialize() {
        super.serialize();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectRemovedFromBagMessage.objectUID.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeObjectRemovedMessage extends ExchangeObjectMessage {
    constructor(param1, param2) {
        super(param1);
        this.objectUID = param2;
        this.messageId = 5517;
    }
    serialize() {
        super.serialize();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectRemovedMessage.objectUID.");
        }
    }
}

// Generated by Noxus messages 
export class ExchangeObjectsModifiedMessage extends ExchangeObjectMessage {
    constructor(param1, param2) {
        super(param1);
        this.object = param2;
        this.messageId = 6533;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.object.length);
        var _loc2_ = 0;
        while (_loc2_ < this.object.length) {
            this.object[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.object.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangeObjectsRemovedMessage extends ExchangeObjectMessage {
    constructor(param1, param2) {
        super(param1);
        this.objectUID = param2;
        this.messageId = 6532;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.objectUID.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectUID.length) {
            if (this.objectUID[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.objectUID[_loc2_] + ") on element 1 (starting at 1) of objectUID.");
            }
            this.buffer.writeVarInt(this.objectUID[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of objectUID.");
            }
            this.objectUID.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ExchangePodsModifiedMessage extends ExchangeObjectMessage {
    constructor(param1, param2, param3) {
        super(param1);
        this.currentWeight = param2;
        this.maxWeight = param3;
        this.messageId = 6670;
    }
    serialize() {
        super.serialize();
        if (this.currentWeight < 0) {
            Logger.error("Forbidden value (" + this.currentWeight + ") on element currentWeight.");
        }
        this.buffer.writeVarInt(this.currentWeight);
        if (this.maxWeight < 0) {
            Logger.error("Forbidden value (" + this.maxWeight + ") on element maxWeight.");
        }
        this.buffer.writeVarInt(this.maxWeight);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.currentWeight = buffer.readVarUhInt();
        if (this.currentWeight < 0) {
            Logger.error("Forbidden value (" + this.currentWeight + ") on element of ExchangePodsModifiedMessage.currentWeight.");
        }
        this.maxWeight = buffer.readVarUhInt();
        if (this.maxWeight < 0) {
            Logger.error("Forbidden value (" + this.maxWeight + ") on element of ExchangePodsModifiedMessage.maxWeight.");
        }
    }
}

// Generated by Noxus messages 
export class GoldAddedMessage extends ProtocolMessage {
    constructor(gold) {
        super(6030);
        this.gold = gold;
    }
    serialize() {
        this.gold.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.gold = new GoldItem();
        this.gold.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class InventoryContentAndPresetMessage extends InventoryContentMessage {
    constructor(param1, param2, param3, param4) {
        super(param1, param2);
        this.presets = param3;
        this.idolsPresets = param4;
        this.messageId = 6162;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.presets.length);
        var _loc2_ = 0;
        while (_loc2_ < this.presets.length) {
            this.presets[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        this.buffer.writeShort(this.idolsPresets.length);
        var _loc3_ = 0;
        while (_loc3_ < this.idolsPresets.length) {
            this.idolsPresets[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = null;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = new Preset();
            _loc6_.deserialize(buffer);
            this.presets.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = new IdolsPreset();
            _loc7_.deserialize(buffer);
            this.idolsPresets.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class InventoryContentMessage extends ProtocolMessage {
    constructor(objects, kamas) {
        super(3016);
        this.objects = objects;
        this.kamas = kamas;
    }
    serialize() {
        this.buffer.writeShort(this.objects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objects.length) {
            this.objects[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element kamas.");
        }
        this.buffer.writeVarInt(this.kamas);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objects.push(_loc4_);
            _loc3_++;
        }
        this.kamas = buffer.readVarUhInt();
        if (this.kamas < 0) {
            Logger.error("Forbidden value (" + this.kamas + ") on element of InventoryContentMessage.kamas.");
        }
    }
}

// Generated by Noxus messages 
export class InventoryWeightMessage extends ProtocolMessage {
    constructor(weight, weightMax) {
        super(3009);
        this.weight = weight;
        this.weightMax = weightMax;
    }
    serialize() {
        if (this.weight < 0) {
            Logger.error("Forbidden value (" + this.weight + ") on element weight.");
        }
        this.buffer.writeVarInt(this.weight);
        if (this.weightMax < 0) {
            Logger.error("Forbidden value (" + this.weightMax + ") on element weightMax.");
        }
        this.buffer.writeVarInt(this.weightMax);
    }
    deserialize(buffer) {
        this.weight = buffer.readVarUhInt();
        if (this.weight < 0) {
            Logger.error("Forbidden value (" + this.weight + ") on element of InventoryWeightMessage.weight.");
        }
        this.weightMax = buffer.readVarUhInt();
        if (this.weightMax < 0) {
            Logger.error("Forbidden value (" + this.weightMax + ") on element of InventoryWeightMessage.weightMax.");
        }
    }
}

// Generated by Noxus messages 
export class LivingObjectChangeSkinRequestMessage extends ProtocolMessage {
    constructor(livingUID, livingPosition, skinId) {
        super(5725);
        this.livingUID = livingUID;
        this.livingPosition = livingPosition;
        this.skinId = skinId;
    }
    serialize() {
        if (this.livingUID < 0) {
            Logger.error("Forbidden value (" + this.livingUID + ") on element livingUID.");
        }
        this.buffer.writeVarInt(this.livingUID);
        if (this.livingPosition < 0 || this.livingPosition > 255) {
            Logger.error("Forbidden value (" + this.livingPosition + ") on element livingPosition.");
        }
        this.buffer.writeByte(this.livingPosition);
        if (this.skinId < 0) {
            Logger.error("Forbidden value (" + this.skinId + ") on element skinId.");
        }
        this.buffer.writeVarInt(this.skinId);
    }
    deserialize(buffer) {
        this.livingUID = buffer.readVarUhInt();
        if (this.livingUID < 0) {
            Logger.error("Forbidden value (" + this.livingUID + ") on element of LivingObjectChangeSkinRequestMessage.livingUID.");
        }
        this.livingPosition = buffer.readUnsignedByte();
        if (this.livingPosition < 0 || this.livingPosition > 255) {
            Logger.error("Forbidden value (" + this.livingPosition + ") on element of LivingObjectChangeSkinRequestMessage.livingPosition.");
        }
        this.skinId = buffer.readVarUhInt();
        if (this.skinId < 0) {
            Logger.error("Forbidden value (" + this.skinId + ") on element of LivingObjectChangeSkinRequestMessage.skinId.");
        }
    }
}

// Generated by Noxus messages 
export class LivingObjectDissociateMessage extends ProtocolMessage {
    constructor(livingUID, livingPosition) {
        super(5723);
        this.livingUID = livingUID;
        this.livingPosition = livingPosition;
    }
    serialize() {
        if (this.livingUID < 0) {
            Logger.error("Forbidden value (" + this.livingUID + ") on element livingUID.");
        }
        this.buffer.writeVarInt(this.livingUID);
        if (this.livingPosition < 0 || this.livingPosition > 255) {
            Logger.error("Forbidden value (" + this.livingPosition + ") on element livingPosition.");
        }
        this.buffer.writeByte(this.livingPosition);
    }
    deserialize(buffer) {
        this.livingUID = buffer.readVarUhInt();
        if (this.livingUID < 0) {
            Logger.error("Forbidden value (" + this.livingUID + ") on element of LivingObjectDissociateMessage.livingUID.");
        }
        this.livingPosition = buffer.readUnsignedByte();
        if (this.livingPosition < 0 || this.livingPosition > 255) {
            Logger.error("Forbidden value (" + this.livingPosition + ") on element of LivingObjectDissociateMessage.livingPosition.");
        }
    }
}

// Generated by Noxus messages 
export class LivingObjectMessageMessage extends ProtocolMessage {
    constructor(msgId, timeStamp, owner, objectGenericId) {
        super(6065);
        this.msgId = msgId;
        this.timeStamp = timeStamp;
        this.owner = owner;
        this.objectGenericId = objectGenericId;
    }
    serialize() {
        if (this.msgId < 0) {
            Logger.error("Forbidden value (" + this.msgId + ") on element msgId.");
        }
        this.buffer.writeVarShort(this.msgId);
        if (this.timeStamp < 0) {
            Logger.error("Forbidden value (" + this.timeStamp + ") on element timeStamp.");
        }
        this.buffer.writeInt(this.timeStamp);
        this.buffer.writeUTF(this.owner);
        if (this.objectGenericId < 0) {
            Logger.error("Forbidden value (" + this.objectGenericId + ") on element objectGenericId.");
        }
        this.buffer.writeVarShort(this.objectGenericId);
    }
    deserialize(buffer) {
        this.msgId = buffer.readVarUhShort();
        if (this.msgId < 0) {
            Logger.error("Forbidden value (" + this.msgId + ") on element of LivingObjectMessageMessage.msgId.");
        }
        this.timeStamp = buffer.readInt();
        if (this.timeStamp < 0) {
            Logger.error("Forbidden value (" + this.timeStamp + ") on element of LivingObjectMessageMessage.timeStamp.");
        }
        this.owner = buffer.readUTF();
        this.objectGenericId = buffer.readVarUhShort();
        if (this.objectGenericId < 0) {
            Logger.error("Forbidden value (" + this.objectGenericId + ") on element of LivingObjectMessageMessage.objectGenericId.");
        }
    }
}

// Generated by Noxus messages 
export class LivingObjectMessageRequestMessage extends ProtocolMessage {
    constructor(msgId, parameters, livingObject) {
        super(6066);
        this.msgId = msgId;
        this.parameters = parameters;
        this.livingObject = livingObject;
    }
    serialize() {
        if (this.msgId < 0) {
            Logger.error("Forbidden value (" + this.msgId + ") on element msgId.");
        }
        this.buffer.writeVarShort(this.msgId);
        this.buffer.writeShort(this.parameters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parameters.length) {
            this.buffer.writeUTF(this.parameters[_loc2_]);
            _loc2_++;
        }
        if (this.livingObject < 0) {
            Logger.error("Forbidden value (" + this.livingObject + ") on element livingObject.");
        }
        this.buffer.writeVarInt(this.livingObject);
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.msgId = buffer.readVarUhShort();
        if (this.msgId < 0) {
            Logger.error("Forbidden value (" + this.msgId + ") on element of LivingObjectMessageRequestMessage.msgId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.parameters.push(_loc4_);
            _loc3_++;
        }
        this.livingObject = buffer.readVarUhInt();
        if (this.livingObject < 0) {
            Logger.error("Forbidden value (" + this.livingObject + ") on element of LivingObjectMessageRequestMessage.livingObject.");
        }
    }
}

// Generated by Noxus messages 
export class MimicryObjectAssociatedMessage extends SymbioticObjectAssociatedMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6462;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class MimicryObjectEraseRequestMessage extends ProtocolMessage {
    constructor(hostUID, hostPos) {
        super(6457);
        this.hostUID = hostUID;
        this.hostPos = hostPos;
    }
    serialize() {
        if (this.hostUID < 0) {
            Logger.error("Forbidden value (" + this.hostUID + ") on element hostUID.");
        }
        this.buffer.writeVarInt(this.hostUID);
        if (this.hostPos < 0 || this.hostPos > 255) {
            Logger.error("Forbidden value (" + this.hostPos + ") on element hostPos.");
        }
        this.buffer.writeByte(this.hostPos);
    }
    deserialize(buffer) {
        this.hostUID = buffer.readVarUhInt();
        if (this.hostUID < 0) {
            Logger.error("Forbidden value (" + this.hostUID + ") on element of MimicryObjectEraseRequestMessage.hostUID.");
        }
        this.hostPos = buffer.readUnsignedByte();
        if (this.hostPos < 0 || this.hostPos > 255) {
            Logger.error("Forbidden value (" + this.hostPos + ") on element of MimicryObjectEraseRequestMessage.hostPos.");
        }
    }
}

// Generated by Noxus messages 
export class MimicryObjectErrorMessage extends SymbioticObjectErrorMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.preview = param3;
        this.messageId = 6461;
    }
    serialize() {
        super.serialize();
        this.buffer.writeBoolean(this.preview);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.preview = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class MimicryObjectFeedAndAssociateRequestMessage extends SymbioticObjectAssociateRequestMessage {
    constructor(param1, param2, param3, param4, param5, param6, param7) {
        super(param1, param2, param3, param4);
        this.foodUID = param5;
        this.foodPos = param6;
        this.preview = param7;
        this.messageId = 6460;
    }
    serialize() {
        super.serialize();
        if (this.foodUID < 0) {
            Logger.error("Forbidden value (" + this.foodUID + ") on element foodUID.");
        }
        this.buffer.writeVarInt(this.foodUID);
        if (this.foodPos < 0 || this.foodPos > 255) {
            Logger.error("Forbidden value (" + this.foodPos + ") on element foodPos.");
        }
        this.buffer.writeByte(this.foodPos);
        this.buffer.writeBoolean(this.preview);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.foodUID = buffer.readVarUhInt();
        if (this.foodUID < 0) {
            Logger.error("Forbidden value (" + this.foodUID + ") on element of MimicryObjectFeedAndAssociateRequestMessage.foodUID.");
        }
        this.foodPos = buffer.readUnsignedByte();
        if (this.foodPos < 0 || this.foodPos > 255) {
            Logger.error("Forbidden value (" + this.foodPos + ") on element of MimicryObjectFeedAndAssociateRequestMessage.foodPos.");
        }
        this.preview = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class MimicryObjectPreviewMessage extends ProtocolMessage {
    constructor(result) {
        super(6458);
        this.result = result;
    }
    serialize() {
        this.result.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.result = new ObjectItem();
        this.result.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ObjectAddedMessage extends ProtocolMessage {
    constructor(object) {
        super(3025);
        this.object = object;
    }
    serialize() {
        this.object.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ObjectDeletedMessage extends ProtocolMessage {
    constructor(objectUID) {
        super(3024);
        this.objectUID = objectUID;
    }
    serialize() {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
    }
    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectDeletedMessage.objectUID.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectDeleteMessage extends ProtocolMessage {
    constructor(objectUID, quantity) {
        super(3022);
        this.objectUID = objectUID;
        this.quantity = quantity;
    }
    serialize() {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectDeleteMessage.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectDeleteMessage.quantity.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectDropMessage extends ProtocolMessage {
    constructor(objectUID, quantity) {
        super(3005);
        this.objectUID = objectUID;
        this.quantity = quantity;
    }
    serialize() {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectDropMessage.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectDropMessage.quantity.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(3004);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class ObjectFeedMessage extends ProtocolMessage {
    constructor(objectUID, foodUID, foodQuantity) {
        super(6290);
        this.objectUID = objectUID;
        this.foodUID = foodUID;
        this.foodQuantity = foodQuantity;
    }
    serialize() {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.foodUID < 0) {
            Logger.error("Forbidden value (" + this.foodUID + ") on element foodUID.");
        }
        this.buffer.writeVarInt(this.foodUID);
        if (this.foodQuantity < 0) {
            Logger.error("Forbidden value (" + this.foodQuantity + ") on element foodQuantity.");
        }
        this.buffer.writeVarInt(this.foodQuantity);
    }
    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectFeedMessage.objectUID.");
        }
        this.foodUID = buffer.readVarUhInt();
        if (this.foodUID < 0) {
            Logger.error("Forbidden value (" + this.foodUID + ") on element of ObjectFeedMessage.foodUID.");
        }
        this.foodQuantity = buffer.readVarUhInt();
        if (this.foodQuantity < 0) {
            Logger.error("Forbidden value (" + this.foodQuantity + ") on element of ObjectFeedMessage.foodQuantity.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectFoundWhileRecoltingMessage extends ProtocolMessage {
    constructor(genericId, quantity, resourceGenericId) {
        super(6017);
        this.genericId = genericId;
        this.quantity = quantity;
        this.resourceGenericId = resourceGenericId;
    }
    serialize() {
        if (this.genericId < 0) {
            Logger.error("Forbidden value (" + this.genericId + ") on element genericId.");
        }
        this.buffer.writeVarShort(this.genericId);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
        if (this.resourceGenericId < 0) {
            Logger.error("Forbidden value (" + this.resourceGenericId + ") on element resourceGenericId.");
        }
        this.buffer.writeVarInt(this.resourceGenericId);
    }
    deserialize(buffer) {
        this.genericId = buffer.readVarUhShort();
        if (this.genericId < 0) {
            Logger.error("Forbidden value (" + this.genericId + ") on element of ObjectFoundWhileRecoltingMessage.genericId.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectFoundWhileRecoltingMessage.quantity.");
        }
        this.resourceGenericId = buffer.readVarUhInt();
        if (this.resourceGenericId < 0) {
            Logger.error("Forbidden value (" + this.resourceGenericId + ") on element of ObjectFoundWhileRecoltingMessage.resourceGenericId.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectJobAddedMessage extends ProtocolMessage {
    constructor(jobId) {
        super(6014);
        this.jobId = jobId;
    }
    serialize() {
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element jobId.");
        }
        this.buffer.writeByte(this.jobId);
    }
    deserialize(buffer) {
        this.jobId = buffer.readByte();
        if (this.jobId < 0) {
            Logger.error("Forbidden value (" + this.jobId + ") on element of ObjectJobAddedMessage.jobId.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectModifiedMessage extends ProtocolMessage {
    constructor(object) {
        super(3029);
        this.object = object;
    }
    serialize() {
        this.object.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ObjectMovementMessage extends ProtocolMessage {
    constructor(objectUID, position) {
        super(3010);
        this.objectUID = objectUID;
        this.position = position;
    }
    serialize() {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        this.buffer.writeByte(this.position);
    }
    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectMovementMessage.objectUID.");
        }
        this.position = buffer.readUnsignedByte();
        if (this.position < 0 || this.position > 255) {
            Logger.error("Forbidden value (" + this.position + ") on element of ObjectMovementMessage.position.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectQuantityMessage extends ProtocolMessage {
    constructor(objectUID, quantity) {
        super(3023);
        this.objectUID = objectUID;
        this.quantity = quantity;
    }
    serialize() {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectQuantityMessage.objectUID.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectQuantityMessage.quantity.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectsAddedMessage extends ProtocolMessage {
    constructor(object) {
        super(6033);
        this.object = object;
    }
    serialize() {
        this.buffer.writeShort(this.object.length);
        var _loc2_ = 0;
        while (_loc2_ < this.object.length) {
            this.object[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.object.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ObjectsDeletedMessage extends ProtocolMessage {
    constructor(objectUID) {
        super(6034);
        this.objectUID = objectUID;
    }
    serialize() {
        this.buffer.writeShort(this.objectUID.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectUID.length) {
            if (this.objectUID[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.objectUID[_loc2_] + ") on element 1 (starting at 1) of objectUID.");
            }
            this.buffer.writeVarInt(this.objectUID[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of objectUID.");
            }
            this.objectUID.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ObjectSetPositionMessage extends ProtocolMessage {
    constructor(objectUID, position, quantity) {
        super(3021);
        this.objectUID = objectUID;
        this.position = position;
        this.quantity = quantity;
    }
    serialize() {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
        this.buffer.writeByte(this.position);
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectSetPositionMessage.objectUID.");
        }
        this.position = buffer.readUnsignedByte();
        if (this.position < 0 || this.position > 255) {
            Logger.error("Forbidden value (" + this.position + ") on element of ObjectSetPositionMessage.position.");
        }
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectSetPositionMessage.quantity.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectsQuantityMessage extends ProtocolMessage {
    constructor(objectsUIDAndQty) {
        super(6206);
        this.objectsUIDAndQty = objectsUIDAndQty;
    }
    serialize() {
        this.buffer.writeShort(this.objectsUIDAndQty.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectsUIDAndQty.length) {
            this.objectsUIDAndQty[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemQuantity();
            _loc4_.deserialize(buffer);
            this.objectsUIDAndQty.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ObjectUseMessage extends ProtocolMessage {
    constructor(objectUID) {
        super(3019);
        this.objectUID = objectUID;
    }
    serialize() {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
    }
    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of ObjectUseMessage.objectUID.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectUseMultipleMessage extends ObjectUseMessage {
    constructor(param1, param2) {
        super(param1);
        this.quantity = param2;
        this.messageId = 6234;
    }
    serialize() {
        super.serialize();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element quantity.");
        }
        this.buffer.writeVarInt(this.quantity);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.quantity = buffer.readVarUhInt();
        if (this.quantity < 0) {
            Logger.error("Forbidden value (" + this.quantity + ") on element of ObjectUseMultipleMessage.quantity.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectUseOnCellMessage extends ObjectUseMessage {
    constructor(param1, param2) {
        super(param1);
        this.cells = param2;
        this.messageId = 3013;
    }
    serialize() {
        super.serialize();
        if (this.cells < 0 || this.cells > 559) {
            Logger.error("Forbidden value (" + this.cells + ") on element cells.");
        }
        this.buffer.writeVarShort(this.cells);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.cells = buffer.readVarUhShort();
        if (this.cells < 0 || this.cells > 559) {
            Logger.error("Forbidden value (" + this.cells + ") on element of ObjectUseOnCellMessage.cells.");
        }
    }
}

// Generated by Noxus messages 
export class ObjectUseOnCharacterMessage extends ObjectUseMessage {
    constructor(param1, param2) {
        super(param1);
        this.characterId = param2;
        this.messageId = 3003;
    }
    serialize() {
        super.serialize();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element of ObjectUseOnCharacterMessage.characterId.");
        }
    }
}

// Generated by Noxus messages 
export class ObtainedItemMessage extends ProtocolMessage {
    constructor(genericId, baseQuantity) {
        super(6519);
        this.genericId = genericId;
        this.baseQuantity = baseQuantity;
    }
    serialize() {
        if (this.genericId < 0) {
            Logger.error("Forbidden value (" + this.genericId + ") on element genericId.");
        }
        this.buffer.writeVarShort(this.genericId);
        if (this.baseQuantity < 0) {
            Logger.error("Forbidden value (" + this.baseQuantity + ") on element baseQuantity.");
        }
        this.buffer.writeVarInt(this.baseQuantity);
    }
    deserialize(buffer) {
        this.genericId = buffer.readVarUhShort();
        if (this.genericId < 0) {
            Logger.error("Forbidden value (" + this.genericId + ") on element of ObtainedItemMessage.genericId.");
        }
        this.baseQuantity = buffer.readVarUhInt();
        if (this.baseQuantity < 0) {
            Logger.error("Forbidden value (" + this.baseQuantity + ") on element of ObtainedItemMessage.baseQuantity.");
        }
    }
}

// Generated by Noxus messages 
export class ObtainedItemWithBonusMessage extends ObtainedItemMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.bonusQuantity = param3;
        this.messageId = 6520;
    }
    serialize() {
        super.serialize();
        if (this.bonusQuantity < 0) {
            Logger.error("Forbidden value (" + this.bonusQuantity + ") on element bonusQuantity.");
        }
        this.buffer.writeVarInt(this.bonusQuantity);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.bonusQuantity = buffer.readVarUhInt();
        if (this.bonusQuantity < 0) {
            Logger.error("Forbidden value (" + this.bonusQuantity + ") on element of ObtainedItemWithBonusMessage.bonusQuantity.");
        }
    }
}

// Generated by Noxus messages 
export class SetUpdateMessage extends ProtocolMessage {
    constructor(setId, setObjects, setEffects) {
        super(5503);
        this.setId = setId;
        this.setObjects = setObjects;
        this.setEffects = setEffects;
    }
    serialize() {
        if (this.setId < 0) {
            Logger.error("Forbidden value (" + this.setId + ") on element setId.");
        }
        this.buffer.writeVarShort(this.setId);
        this.buffer.writeShort(this.setObjects.length);
        var _loc2_ = 0;
        while (_loc2_ < this.setObjects.length) {
            if (this.setObjects[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.setObjects[_loc2_] + ") on element 2 (starting at 1) of setObjects.");
            }
            this.buffer.writeVarShort(this.setObjects[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.setEffects.length);
        var _loc3_ = 0;
        while (_loc3_ < this.setEffects.length) {
            this.buffer.writeShort((this.setEffects[_loc3_]).protocolId);
            this.setEffects[_loc3_].serialize(this.buffer);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc8_ = null;
        this.setId = buffer.readVarUhShort();
        if (this.setId < 0) {
            Logger.error("Forbidden value (" + this.setId + ") on element of SetUpdateMessage.setId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of setObjects.");
            }
            this.setObjects.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readUnsignedShort();
            _loc8_ = ProtocolTypeManager.getInstance(ObjectEffect, _loc7_);
            _loc8_.deserialize(buffer);
            this.setEffects.push(_loc8_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class SymbioticObjectAssociatedMessage extends ProtocolMessage {
    constructor(hostUID) {
        super(6527);
        this.hostUID = hostUID;
    }
    serialize() {
        if (this.hostUID < 0) {
            Logger.error("Forbidden value (" + this.hostUID + ") on element hostUID.");
        }
        this.buffer.writeVarInt(this.hostUID);
    }
    deserialize(buffer) {
        this.hostUID = buffer.readVarUhInt();
        if (this.hostUID < 0) {
            Logger.error("Forbidden value (" + this.hostUID + ") on element of SymbioticObjectAssociatedMessage.hostUID.");
        }
    }
}

// Generated by Noxus messages 
export class SymbioticObjectAssociateRequestMessage extends ProtocolMessage {
    constructor(symbioteUID, symbiotePos, hostUID, hostPos) {
        super(6522);
        this.symbioteUID = symbioteUID;
        this.symbiotePos = symbiotePos;
        this.hostUID = hostUID;
        this.hostPos = hostPos;
    }
    serialize() {
        if (this.symbioteUID < 0) {
            Logger.error("Forbidden value (" + this.symbioteUID + ") on element symbioteUID.");
        }
        this.buffer.writeVarInt(this.symbioteUID);
        if (this.symbiotePos < 0 || this.symbiotePos > 255) {
            Logger.error("Forbidden value (" + this.symbiotePos + ") on element symbiotePos.");
        }
        this.buffer.writeByte(this.symbiotePos);
        if (this.hostUID < 0) {
            Logger.error("Forbidden value (" + this.hostUID + ") on element hostUID.");
        }
        this.buffer.writeVarInt(this.hostUID);
        if (this.hostPos < 0 || this.hostPos > 255) {
            Logger.error("Forbidden value (" + this.hostPos + ") on element hostPos.");
        }
        this.buffer.writeByte(this.hostPos);
    }
    deserialize(buffer) {
        this.symbioteUID = buffer.readVarUhInt();
        if (this.symbioteUID < 0) {
            Logger.error("Forbidden value (" + this.symbioteUID + ") on element of SymbioticObjectAssociateRequestMessage.symbioteUID.");
        }
        this.symbiotePos = buffer.readUnsignedByte();
        if (this.symbiotePos < 0 || this.symbiotePos > 255) {
            Logger.error("Forbidden value (" + this.symbiotePos + ") on element of SymbioticObjectAssociateRequestMessage.symbiotePos.");
        }
        this.hostUID = buffer.readVarUhInt();
        if (this.hostUID < 0) {
            Logger.error("Forbidden value (" + this.hostUID + ") on element of SymbioticObjectAssociateRequestMessage.hostUID.");
        }
        this.hostPos = buffer.readUnsignedByte();
        if (this.hostPos < 0 || this.hostPos > 255) {
            Logger.error("Forbidden value (" + this.hostPos + ") on element of SymbioticObjectAssociateRequestMessage.hostPos.");
        }
    }
}

// Generated by Noxus messages 
export class SymbioticObjectErrorMessage extends ObjectErrorMessage {
    constructor(param1, param2) {
        super(param1);
        this.errorCode = param2;
        this.messageId = 6526;
    }
    serialize() {
        super.serialize();
        this.buffer.writeByte(this.errorCode);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.errorCode = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class WrapperObjectAssociatedMessage extends SymbioticObjectAssociatedMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6523;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class WrapperObjectDissociateRequestMessage extends ProtocolMessage {
    constructor(hostUID, hostPos) {
        super(6524);
        this.hostUID = hostUID;
        this.hostPos = hostPos;
    }
    serialize() {
        if (this.hostUID < 0) {
            Logger.error("Forbidden value (" + this.hostUID + ") on element hostUID.");
        }
        this.buffer.writeVarInt(this.hostUID);
        if (this.hostPos < 0 || this.hostPos > 255) {
            Logger.error("Forbidden value (" + this.hostPos + ") on element hostPos.");
        }
        this.buffer.writeByte(this.hostPos);
    }
    deserialize(buffer) {
        this.hostUID = buffer.readVarUhInt();
        if (this.hostUID < 0) {
            Logger.error("Forbidden value (" + this.hostUID + ") on element of WrapperObjectDissociateRequestMessage.hostUID.");
        }
        this.hostPos = buffer.readUnsignedByte();
        if (this.hostPos < 0 || this.hostPos > 255) {
            Logger.error("Forbidden value (" + this.hostPos + ") on element of WrapperObjectDissociateRequestMessage.hostPos.");
        }
    }
}

// Generated by Noxus messages 
export class WrapperObjectErrorMessage extends SymbioticObjectErrorMessage {
    constructor(param1, param2) {
        super(param1, param2);
        this.messageId = 6529;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class IdolsPresetDeleteMessage extends ProtocolMessage {
    constructor(presetId) {
        super(6602);
        this.presetId = presetId;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of IdolsPresetDeleteMessage.presetId.");
        }
    }
}

// Generated by Noxus messages 
export class IdolsPresetDeleteResultMessage extends ProtocolMessage {
    constructor(presetId, code) {
        super(6605);
        this.presetId = presetId;
        this.code = code;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of IdolsPresetDeleteResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            Logger.error("Forbidden value (" + this.code + ") on element of IdolsPresetDeleteResultMessage.code.");
        }
    }
}

// Generated by Noxus messages 
export class IdolsPresetSaveMessage extends ProtocolMessage {
    constructor(presetId, symbolId) {
        super(6603);
        this.presetId = presetId;
        this.symbolId = symbolId;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        if (this.symbolId < 0) {
            Logger.error("Forbidden value (" + this.symbolId + ") on element symbolId.");
        }
        this.buffer.writeByte(this.symbolId);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of IdolsPresetSaveMessage.presetId.");
        }
        this.symbolId = buffer.readByte();
        if (this.symbolId < 0) {
            Logger.error("Forbidden value (" + this.symbolId + ") on element of IdolsPresetSaveMessage.symbolId.");
        }
    }
}

// Generated by Noxus messages 
export class IdolsPresetSaveResultMessage extends ProtocolMessage {
    constructor(presetId, code) {
        super(6604);
        this.presetId = presetId;
        this.code = code;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of IdolsPresetSaveResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            Logger.error("Forbidden value (" + this.code + ") on element of IdolsPresetSaveResultMessage.code.");
        }
    }
}

// Generated by Noxus messages 
export class IdolsPresetUpdateMessage extends ProtocolMessage {
    constructor(idolsPreset) {
        super(6606);
        this.idolsPreset = idolsPreset;
    }
    serialize() {
        this.idolsPreset.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.idolsPreset = new IdolsPreset();
        this.idolsPreset.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class IdolsPresetUseMessage extends ProtocolMessage {
    constructor(presetId, party) {
        super(6615);
        this.presetId = presetId;
        this.party = party;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeBoolean(this.party);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of IdolsPresetUseMessage.presetId.");
        }
        this.party = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class IdolsPresetUseResultMessage extends ProtocolMessage {
    constructor(presetId, code, missingIdols) {
        super(6614);
        this.presetId = presetId;
        this.code = code;
        this.missingIdols = missingIdols;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
        this.buffer.writeShort(this.missingIdols.length);
        var _loc2_ = 0;
        while (_loc2_ < this.missingIdols.length) {
            if (this.missingIdols[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.missingIdols[_loc2_] + ") on element 3 (starting at 1) of missingIdols.");
            }
            this.buffer.writeVarShort(this.missingIdols[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of IdolsPresetUseResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            Logger.error("Forbidden value (" + this.code + ") on element of IdolsPresetUseResultMessage.code.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of missingIdols.");
            }
            this.missingIdols.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class InventoryPresetDeleteMessage extends ProtocolMessage {
    constructor(presetId) {
        super(6169);
        this.presetId = presetId;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of InventoryPresetDeleteMessage.presetId.");
        }
    }
}

// Generated by Noxus messages 
export class InventoryPresetDeleteResultMessage extends ProtocolMessage {
    constructor(presetId, code) {
        super(6173);
        this.presetId = presetId;
        this.code = code;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of InventoryPresetDeleteResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            Logger.error("Forbidden value (" + this.code + ") on element of InventoryPresetDeleteResultMessage.code.");
        }
    }
}

// Generated by Noxus messages 
export class InventoryPresetItemUpdateErrorMessage extends ProtocolMessage {
    constructor(code) {
        super(6211);
        this.code = code;
    }
    serialize() {
        this.buffer.writeByte(this.code);
    }
    deserialize(buffer) {
        this.code = buffer.readByte();
        if (this.code < 0) {
            Logger.error("Forbidden value (" + this.code + ") on element of InventoryPresetItemUpdateErrorMessage.code.");
        }
    }
}

// Generated by Noxus messages 
export class InventoryPresetItemUpdateMessage extends ProtocolMessage {
    constructor(presetId, presetItem) {
        super(6168);
        this.presetId = presetId;
        this.presetItem = presetItem;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.presetItem.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of InventoryPresetItemUpdateMessage.presetId.");
        }
        this.presetItem = new PresetItem();
        this.presetItem.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class InventoryPresetItemUpdateRequestMessage extends ProtocolMessage {
    constructor(presetId, position, objUid) {
        super(6210);
        this.presetId = presetId;
        this.position = position;
        this.objUid = objUid;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.position);
        if (this.objUid < 0) {
            Logger.error("Forbidden value (" + this.objUid + ") on element objUid.");
        }
        this.buffer.writeVarInt(this.objUid);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of InventoryPresetItemUpdateRequestMessage.presetId.");
        }
        this.position = buffer.readUnsignedByte();
        if (this.position < 0 || this.position > 255) {
            Logger.error("Forbidden value (" + this.position + ") on element of InventoryPresetItemUpdateRequestMessage.position.");
        }
        this.objUid = buffer.readVarUhInt();
        if (this.objUid < 0) {
            Logger.error("Forbidden value (" + this.objUid + ") on element of InventoryPresetItemUpdateRequestMessage.objUid.");
        }
    }
}

// Generated by Noxus messages 
export class InventoryPresetSaveCustomMessage extends ProtocolMessage {
    constructor(presetId, symbolId, itemsPositions, itemsUids) {
        super(6329);
        this.presetId = presetId;
        this.symbolId = symbolId;
        this.itemsPositions = itemsPositions;
        this.itemsUids = itemsUids;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        if (this.symbolId < 0) {
            Logger.error("Forbidden value (" + this.symbolId + ") on element symbolId.");
        }
        this.buffer.writeByte(this.symbolId);
        this.buffer.writeShort(this.itemsPositions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.itemsPositions.length) {
            this.buffer.writeByte(this.itemsPositions[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.itemsUids.length);
        var _loc3_ = 0;
        while (_loc3_ < this.itemsUids.length) {
            if (this.itemsUids[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.itemsUids[_loc3_] + ") on element 4 (starting at 1) of itemsUids.");
            }
            this.buffer.writeVarInt(this.itemsUids[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of InventoryPresetSaveCustomMessage.presetId.");
        }
        this.symbolId = buffer.readByte();
        if (this.symbolId < 0) {
            Logger.error("Forbidden value (" + this.symbolId + ") on element of InventoryPresetSaveCustomMessage.symbolId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readUnsignedByte();
            if (_loc6_ < 0 || _loc6_ > 255) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of itemsPositions.");
            }
            this.itemsPositions.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhInt();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of itemsUids.");
            }
            this.itemsUids.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class InventoryPresetSaveMessage extends ProtocolMessage {
    constructor(presetId, symbolId, saveEquipment) {
        super(6165);
        this.presetId = presetId;
        this.symbolId = symbolId;
        this.saveEquipment = saveEquipment;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        if (this.symbolId < 0) {
            Logger.error("Forbidden value (" + this.symbolId + ") on element symbolId.");
        }
        this.buffer.writeByte(this.symbolId);
        this.buffer.writeBoolean(this.saveEquipment);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of InventoryPresetSaveMessage.presetId.");
        }
        this.symbolId = buffer.readByte();
        if (this.symbolId < 0) {
            Logger.error("Forbidden value (" + this.symbolId + ") on element of InventoryPresetSaveMessage.symbolId.");
        }
        this.saveEquipment = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class InventoryPresetSaveResultMessage extends ProtocolMessage {
    constructor(presetId, code) {
        super(6170);
        this.presetId = presetId;
        this.code = code;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of InventoryPresetSaveResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            Logger.error("Forbidden value (" + this.code + ") on element of InventoryPresetSaveResultMessage.code.");
        }
    }
}

// Generated by Noxus messages 
export class InventoryPresetUpdateMessage extends ProtocolMessage {
    constructor(preset) {
        super(6171);
        this.preset = preset;
    }
    serialize() {
        this.preset.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.preset = new Preset();
        this.preset.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class InventoryPresetUseMessage extends ProtocolMessage {
    constructor(presetId) {
        super(6167);
        this.presetId = presetId;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
    }
    deserialize(buffer) {
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of InventoryPresetUseMessage.presetId.");
        }
    }
}

// Generated by Noxus messages 
export class InventoryPresetUseResultMessage extends ProtocolMessage {
    constructor(presetId, code, unlinkedPosition) {
        super(6163);
        this.presetId = presetId;
        this.code = code;
        this.unlinkedPosition = unlinkedPosition;
    }
    serialize() {
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element presetId.");
        }
        this.buffer.writeByte(this.presetId);
        this.buffer.writeByte(this.code);
        this.buffer.writeShort(this.unlinkedPosition.length);
        var _loc2_ = 0;
        while (_loc2_ < this.unlinkedPosition.length) {
            this.buffer.writeByte(this.unlinkedPosition[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        this.presetId = buffer.readByte();
        if (this.presetId < 0) {
            Logger.error("Forbidden value (" + this.presetId + ") on element of InventoryPresetUseResultMessage.presetId.");
        }
        this.code = buffer.readByte();
        if (this.code < 0) {
            Logger.error("Forbidden value (" + this.code + ") on element of InventoryPresetUseResultMessage.code.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedByte();
            if (_loc4_ < 0 || _loc4_ > 255) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of unlinkedPosition.");
            }
            this.unlinkedPosition.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class SpellListMessage extends ProtocolMessage {
    constructor(spellPrevisualization, spells) {
        super(1200);
        this.spellPrevisualization = spellPrevisualization;
        this.spells = spells;
    }
    serialize() {
        this.buffer.writeBoolean(this.spellPrevisualization);
        this.buffer.writeShort(this.spells.length);
        var _loc2_ = 0;
        while (_loc2_ < this.spells.length) {
            this.spells[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.spellPrevisualization = buffer.readBoolean();
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new SpellItem();
            _loc4_.deserialize(buffer);
            this.spells.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class StorageInventoryContentMessage extends InventoryContentMessage {
    constructor(param1, param2) {
        super(param1, param2);
        this.messageId = 5646;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class StorageKamasUpdateMessage extends ProtocolMessage {
    constructor(kamasTotal) {
        super(5645);
        this.kamasTotal = kamasTotal;
    }
    serialize() {
        this.buffer.writeInt(this.kamasTotal);
    }
    deserialize(buffer) {
        this.kamasTotal = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class StorageObjectRemoveMessage extends ProtocolMessage {
    constructor(objectUID) {
        super(5648);
        this.objectUID = objectUID;
    }
    serialize() {
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element objectUID.");
        }
        this.buffer.writeVarInt(this.objectUID);
    }
    deserialize(buffer) {
        this.objectUID = buffer.readVarUhInt();
        if (this.objectUID < 0) {
            Logger.error("Forbidden value (" + this.objectUID + ") on element of StorageObjectRemoveMessage.objectUID.");
        }
    }
}

// Generated by Noxus messages 
export class StorageObjectsRemoveMessage extends ProtocolMessage {
    constructor(objectUIDList) {
        super(6035);
        this.objectUIDList = objectUIDList;
    }
    serialize() {
        this.buffer.writeShort(this.objectUIDList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectUIDList.length) {
            if (this.objectUIDList[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.objectUIDList[_loc2_] + ") on element 1 (starting at 1) of objectUIDList.");
            }
            this.buffer.writeVarInt(this.objectUIDList[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhInt();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of objectUIDList.");
            }
            this.objectUIDList.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class StorageObjectsUpdateMessage extends ProtocolMessage {
    constructor(objectList) {
        super(6036);
        this.objectList = objectList;
    }
    serialize() {
        this.buffer.writeShort(this.objectList.length);
        var _loc2_ = 0;
        while (_loc2_ < this.objectList.length) {
            this.objectList[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
            _loc4_.deserialize(buffer);
            this.objectList.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class StorageObjectUpdateMessage extends ProtocolMessage {
    constructor(object) {
        super(5647);
        this.object = object;
    }
    serialize() {
        this.object.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.object = new ObjectItem();
        this.object.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AccessoryPreviewErrorMessage extends ProtocolMessage {
    constructor(error) {
        super(6521);
        this.error = error;
    }
    serialize() {
        this.buffer.writeByte(this.error);
    }
    deserialize(buffer) {
        this.error = buffer.readByte();
        if (this.error < 0) {
            Logger.error("Forbidden value (" + this.error + ") on element of AccessoryPreviewErrorMessage.error.");
        }
    }
}

// Generated by Noxus messages 
export class AccessoryPreviewMessage extends ProtocolMessage {
    constructor(look) {
        super(6517);
        this.look = look;
    }
    serialize() {
        this.look.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.look = new EntityLook();
        this.look.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class AccessoryPreviewRequestMessage extends ProtocolMessage {
    constructor(genericId) {
        super(6518);
        this.genericId = genericId;
    }
    serialize() {
        this.buffer.writeShort(this.genericId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.genericId.length) {
            if (this.genericId[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.genericId[_loc2_] + ") on element 1 (starting at 1) of genericId.");
            }
            this.buffer.writeVarShort(this.genericId[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readVarUhShort();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of genericId.");
            }
            this.genericId.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class PopupWarningMessage extends ProtocolMessage {
    constructor(lockDuration, author, content) {
        super(6134);
        this.lockDuration = lockDuration;
        this.author = author;
        this.content = content;
    }
    serialize() {
        if (this.lockDuration < 0 || this.lockDuration > 255) {
            Logger.error("Forbidden value (" + this.lockDuration + ") on element lockDuration.");
        }
        this.buffer.writeByte(this.lockDuration);
        this.buffer.writeUTF(this.author);
        this.buffer.writeUTF(this.content);
    }
    deserialize(buffer) {
        this.lockDuration = buffer.readUnsignedByte();
        if (this.lockDuration < 0 || this.lockDuration > 255) {
            Logger.error("Forbidden value (" + this.lockDuration + ") on element of PopupWarningMessage.lockDuration.");
        }
        this.author = buffer.readUTF();
        this.content = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class AreaFightModificatorUpdateMessage extends ProtocolMessage {
    constructor(spellPairId) {
        super(6493);
        this.spellPairId = spellPairId;
    }
    serialize() {
        this.buffer.writeInt(this.spellPairId);
    }
    deserialize(buffer) {
        this.spellPairId = buffer.readInt();
    }
}

// Generated by Noxus messages 
export class PrismAttackRequestMessage extends ProtocolMessage {
constructor) {
    super(6042);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class PrismFightAddedMessage extends ProtocolMessage {
    constructor(fight) {
        super(6452);
        this.fight = fight;
    }
    serialize() {
        this.fight.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.fight = new PrismFightersInformation();
        this.fight.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PrismFightAttackerAddMessage extends ProtocolMessage {
    constructor(subAreaId, fightId, attacker) {
        super(5893);
        this.subAreaId = subAreaId;
        this.fightId = fightId;
        this.attacker = attacker;
    }
    serialize() {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeVarShort(this.fightId);
        this.buffer.writeShort(this.attacker.protocolId);
        this.attacker.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismFightAttackerAddMessage.subAreaId.");
        }
        this.fightId = buffer.readVarUhShort();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of PrismFightAttackerAddMessage.fightId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.attacker = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc2_);
        this.attacker.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PrismFightAttackerRemoveMessage extends ProtocolMessage {
    constructor(subAreaId, fightId, fighterToRemoveId) {
        super(5897);
        this.subAreaId = subAreaId;
        this.fightId = fightId;
        this.fighterToRemoveId = fighterToRemoveId;
    }
    serialize() {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeVarShort(this.fightId);
        if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fighterToRemoveId + ") on element fighterToRemoveId.");
        }
        this.buffer.writeVarLong(this.fighterToRemoveId);
    }
    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismFightAttackerRemoveMessage.subAreaId.");
        }
        this.fightId = buffer.readVarUhShort();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of PrismFightAttackerRemoveMessage.fightId.");
        }
        this.fighterToRemoveId = buffer.readVarUhLong();
        if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fighterToRemoveId + ") on element of PrismFightAttackerRemoveMessage.fighterToRemoveId.");
        }
    }
}

// Generated by Noxus messages 
export class PrismFightDefenderAddMessage extends ProtocolMessage {
    constructor(subAreaId, fightId, defender) {
        super(5895);
        this.subAreaId = subAreaId;
        this.fightId = fightId;
        this.defender = defender;
    }
    serialize() {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeVarShort(this.fightId);
        this.buffer.writeShort(this.defender.protocolId);
        this.defender.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismFightDefenderAddMessage.subAreaId.");
        }
        this.fightId = buffer.readVarUhShort();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of PrismFightDefenderAddMessage.fightId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.defender = ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc2_);
        this.defender.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PrismFightDefenderLeaveMessage extends ProtocolMessage {
    constructor(subAreaId, fightId, fighterToRemoveId) {
        super(5892);
        this.subAreaId = subAreaId;
        this.fightId = fightId;
        this.fighterToRemoveId = fighterToRemoveId;
    }
    serialize() {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element fightId.");
        }
        this.buffer.writeVarShort(this.fightId);
        if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fighterToRemoveId + ") on element fighterToRemoveId.");
        }
        this.buffer.writeVarLong(this.fighterToRemoveId);
    }
    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismFightDefenderLeaveMessage.subAreaId.");
        }
        this.fightId = buffer.readVarUhShort();
        if (this.fightId < 0) {
            Logger.error("Forbidden value (" + this.fightId + ") on element of PrismFightDefenderLeaveMessage.fightId.");
        }
        this.fighterToRemoveId = buffer.readVarUhLong();
        if (this.fighterToRemoveId < 0 || this.fighterToRemoveId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.fighterToRemoveId + ") on element of PrismFightDefenderLeaveMessage.fighterToRemoveId.");
        }
    }
}

// Generated by Noxus messages 
export class PrismFightJoinLeaveRequestMessage extends ProtocolMessage {
    constructor(subAreaId, join) {
        super(5843);
        this.subAreaId = subAreaId;
        this.join = join;
    }
    serialize() {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeBoolean(this.join);
    }
    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismFightJoinLeaveRequestMessage.subAreaId.");
        }
        this.join = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class PrismFightRemovedMessage extends ProtocolMessage {
    constructor(subAreaId) {
        super(6453);
        this.subAreaId = subAreaId;
    }
    serialize() {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
    }
    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismFightRemovedMessage.subAreaId.");
        }
    }
}

// Generated by Noxus messages 
export class PrismFightStateUpdateMessage extends ProtocolMessage {
    constructor(state) {
        super(6040);
        this.state = state;
    }
    serialize() {
        if (this.state < 0) {
            Logger.error("Forbidden value (" + this.state + ") on element state.");
        }
        this.buffer.writeByte(this.state);
    }
    deserialize(buffer) {
        this.state = buffer.readByte();
        if (this.state < 0) {
            Logger.error("Forbidden value (" + this.state + ") on element of PrismFightStateUpdateMessage.state.");
        }
    }
}

// Generated by Noxus messages 
export class PrismFightSwapRequestMessage extends ProtocolMessage {
    constructor(subAreaId, targetId) {
        super(5901);
        this.subAreaId = subAreaId;
        this.targetId = targetId;
    }
    serialize() {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element targetId.");
        }
        this.buffer.writeVarLong(this.targetId);
    }
    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismFightSwapRequestMessage.subAreaId.");
        }
        this.targetId = buffer.readVarUhLong();
        if (this.targetId < 0 || this.targetId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.targetId + ") on element of PrismFightSwapRequestMessage.targetId.");
        }
    }
}

// Generated by Noxus messages 
export class PrismInfoCloseMessage extends ProtocolMessage {
constructor) {
    super(5853);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class PrismInfoInValidMessage extends ProtocolMessage {
    constructor(reason) {
        super(5859);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of PrismInfoInValidMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class PrismInfoJoinLeaveRequestMessage extends ProtocolMessage {
    constructor(join) {
        super(5844);
        this.join = join;
    }
    serialize() {
        this.buffer.writeBoolean(this.join);
    }
    deserialize(buffer) {
        this.join = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class PrismModuleExchangeRequestMessage extends ProtocolMessage {
constructor) {
    super(6531);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class PrismSetSabotagedRefusedMessage extends ProtocolMessage {
    constructor(subAreaId, reason) {
        super(6466);
        this.subAreaId = subAreaId;
        this.reason = reason;
    }
    serialize() {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismSetSabotagedRefusedMessage.subAreaId.");
        }
        this.reason = buffer.readByte();
    }
}

// Generated by Noxus messages 
export class PrismSetSabotagedRequestMessage extends ProtocolMessage {
    constructor(subAreaId) {
        super(6468);
        this.subAreaId = subAreaId;
    }
    serialize() {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
    }
    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismSetSabotagedRequestMessage.subAreaId.");
        }
    }
}

// Generated by Noxus messages 
export class PrismSettingsErrorMessage extends ProtocolMessage {
constructor) {
    super(6442);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class PrismSettingsRequestMessage extends ProtocolMessage {
    constructor(subAreaId, startDefenseTime) {
        super(6437);
        this.subAreaId = subAreaId;
        this.startDefenseTime = startDefenseTime;
    }
    serialize() {
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
        }
        this.buffer.writeVarShort(this.subAreaId);
        if (this.startDefenseTime < 0) {
            Logger.error("Forbidden value (" + this.startDefenseTime + ") on element startDefenseTime.");
        }
        this.buffer.writeByte(this.startDefenseTime);
    }
    deserialize(buffer) {
        this.subAreaId = buffer.readVarUhShort();
        if (this.subAreaId < 0) {
            Logger.error("Forbidden value (" + this.subAreaId + ") on element of PrismSettingsRequestMessage.subAreaId.");
        }
        this.startDefenseTime = buffer.readByte();
        if (this.startDefenseTime < 0) {
            Logger.error("Forbidden value (" + this.startDefenseTime + ") on element of PrismSettingsRequestMessage.startDefenseTime.");
        }
    }
}

// Generated by Noxus messages 
export class PrismsInfoValidMessage extends ProtocolMessage {
    constructor(fights) {
        super(6451);
        this.fights = fights;
    }
    serialize() {
        this.buffer.writeShort(this.fights.length);
        var _loc2_ = 0;
        while (_loc2_ < this.fights.length) {
            this.fights[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new PrismFightersInformation();
            _loc4_.deserialize(buffer);
            this.fights.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class PrismsListMessage extends ProtocolMessage {
    constructor(prisms) {
        super(6440);
        this.prisms = prisms;
    }
    serialize() {
        this.buffer.writeShort(this.prisms.length);
        var _loc2_ = 0;
        while (_loc2_ < this.prisms.length) {
            this.buffer.writeShort((this.prisms[_loc2_]).protocolId);
            this.prisms[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(PrismSubareaEmptyInfo, _loc4_);
            _loc5_.deserialize(buffer);
            this.prisms.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class PrismsListRegisterMessage extends ProtocolMessage {
    constructor(listen) {
        super(6441);
        this.listen = listen;
    }
    serialize() {
        this.buffer.writeByte(this.listen);
    }
    deserialize(buffer) {
        this.listen = buffer.readByte();
        if (this.listen < 0) {
            Logger.error("Forbidden value (" + this.listen + ") on element of PrismsListRegisterMessage.listen.");
        }
    }
}

// Generated by Noxus messages 
export class PrismsListUpdateMessage extends PrismsListMessage {
    constructor(param1) {
        super(param1);
        this.messageId = 6438;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class PrismUseRequestMessage extends ProtocolMessage {
    constructor(moduleToUse) {
        super(6041);
        this.moduleToUse = moduleToUse;
    }
    serialize() {
        this.buffer.writeByte(this.moduleToUse);
    }
    deserialize(buffer) {
        this.moduleToUse = buffer.readByte();
        if (this.moduleToUse < 0) {
            Logger.error("Forbidden value (" + this.moduleToUse + ") on element of PrismUseRequestMessage.moduleToUse.");
        }
    }
}

// Generated by Noxus messages 
export class AlignmentRankUpdateMessage extends ProtocolMessage {
    constructor(alignmentRank, verbose) {
        super(6058);
        this.alignmentRank = alignmentRank;
        this.verbose = verbose;
    }
    serialize() {
        if (this.alignmentRank < 0) {
            Logger.error("Forbidden value (" + this.alignmentRank + ") on element alignmentRank.");
        }
        this.buffer.writeByte(this.alignmentRank);
        this.buffer.writeBoolean(this.verbose);
    }
    deserialize(buffer) {
        this.alignmentRank = buffer.readByte();
        if (this.alignmentRank < 0) {
            Logger.error("Forbidden value (" + this.alignmentRank + ") on element of AlignmentRankUpdateMessage.alignmentRank.");
        }
        this.verbose = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class SetEnableAVARequestMessage extends ProtocolMessage {
    constructor(enable) {
        super(6443);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class SetEnablePVPRequestMessage extends ProtocolMessage {
    constructor(enable) {
        super(1810);
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeBoolean(this.enable);
    }
    deserialize(buffer) {
        this.enable = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class UpdateMapPlayersAgressableStatusMessage extends ProtocolMessage {
    constructor(playerIds, enable) {
        super(6454);
        this.playerIds = playerIds;
        this.enable = enable;
    }
    serialize() {
        this.buffer.writeShort(this.playerIds.length);
        var _loc2_ = 0;
        while (_loc2_ < this.playerIds.length) {
            if (this.playerIds[_loc2_] < 0 || this.playerIds[_loc2_] > 9007199254740990) {
                Logger.error("Forbidden value (" + this.playerIds[_loc2_] + ") on element 1 (starting at 1) of playerIds.");
            }
            this.buffer.writeVarLong(this.playerIds[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.enable.length);
        var _loc3_ = 0;
        while (_loc3_ < this.enable.length) {
            this.buffer.writeByte(this.enable[_loc3_]);
            _loc3_++;
        }
    }
    deserialize(buffer) {
        var _loc6_ = null;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhLong();
            if (_loc6_ < 0 || _loc6_ > 9007199254740990) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of playerIds.");
            }
            this.playerIds.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readByte();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of enable.");
            }
            this.enable.push(_loc7_);
            _loc5_++;
        }
    }
}

// Generated by Noxus messages 
export class UpdateSelfAgressableStatusMessage extends ProtocolMessage {
    constructor(status, probationTime) {
        super(6456);
        this.status = status;
        this.probationTime = probationTime;
    }
    serialize() {
        this.buffer.writeByte(this.status);
        if (this.probationTime < 0) {
            Logger.error("Forbidden value (" + this.probationTime + ") on element probationTime.");
        }
        this.buffer.writeInt(this.probationTime);
    }
    deserialize(buffer) {
        this.status = buffer.readByte();
        if (this.status < 0) {
            Logger.error("Forbidden value (" + this.status + ") on element of UpdateSelfAgressableStatusMessage.status.");
        }
        this.probationTime = buffer.readInt();
        if (this.probationTime < 0) {
            Logger.error("Forbidden value (" + this.probationTime + ") on element of UpdateSelfAgressableStatusMessage.probationTime.");
        }
    }
}

// Generated by Noxus messages 
export class CharacterReportMessage extends ProtocolMessage {
    constructor(reportedId, reason) {
        super(6079);
        this.reportedId = reportedId;
        this.reason = reason;
    }
    serialize() {
        if (this.reportedId < 0 || this.reportedId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.reportedId + ") on element reportedId.");
        }
        this.buffer.writeVarLong(this.reportedId);
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element reason.");
        }
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reportedId = buffer.readVarUhLong();
        if (this.reportedId < 0 || this.reportedId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.reportedId + ") on element of CharacterReportMessage.reportedId.");
        }
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of CharacterReportMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class CinematicMessage extends ProtocolMessage {
    constructor(cinematicId) {
        super(6053);
        this.cinematicId = cinematicId;
    }
    serialize() {
        if (this.cinematicId < 0) {
            Logger.error("Forbidden value (" + this.cinematicId + ") on element cinematicId.");
        }
        this.buffer.writeVarShort(this.cinematicId);
    }
    deserialize(buffer) {
        this.cinematicId = buffer.readVarUhShort();
        if (this.cinematicId < 0) {
            Logger.error("Forbidden value (" + this.cinematicId + ") on element of CinematicMessage.cinematicId.");
        }
    }
}

// Generated by Noxus messages 
export class URLOpenMessage extends ProtocolMessage {
    constructor(urlId) {
        super(6266);
        this.urlId = urlId;
    }
    serialize() {
        if (this.urlId < 0) {
            Logger.error("Forbidden value (" + this.urlId + ") on element urlId.");
        }
        this.buffer.writeByte(this.urlId);
    }
    deserialize(buffer) {
        this.urlId = buffer.readByte();
        if (this.urlId < 0) {
            Logger.error("Forbidden value (" + this.urlId + ") on element of URLOpenMessage.urlId.");
        }
    }
}

// Generated by Noxus messages 
export class ShortcutBarAddErrorMessage extends ProtocolMessage {
    constructor(error) {
        super(6227);
        this.error = error;
    }
    serialize() {
        this.buffer.writeByte(this.error);
    }
    deserialize(buffer) {
        this.error = buffer.readByte();
        if (this.error < 0) {
            Logger.error("Forbidden value (" + this.error + ") on element of ShortcutBarAddErrorMessage.error.");
        }
    }
}

// Generated by Noxus messages 
export class ShortcutBarAddRequestMessage extends ProtocolMessage {
    constructor(barType, shortcut) {
        super(6225);
        this.barType = barType;
        this.shortcut = shortcut;
    }
    serialize() {
        this.buffer.writeByte(this.barType);
        this.buffer.writeShort(this.shortcut.protocolId);
        this.shortcut.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            Logger.error("Forbidden value (" + this.barType + ") on element of ShortcutBarAddRequestMessage.barType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.shortcut = ProtocolTypeManager.getInstance(Shortcut, _loc2_);
        this.shortcut.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ShortcutBarContentMessage extends ProtocolMessage {
    constructor(barType, shortcuts) {
        super(6231);
        this.barType = barType;
        this.shortcuts = shortcuts;
    }
    serialize() {
        this.buffer.writeByte(this.barType);
        this.buffer.writeShort(this.shortcuts.length);
        var _loc2_ = 0;
        while (_loc2_ < this.shortcuts.length) {
            this.buffer.writeShort((this.shortcuts[_loc2_]).protocolId);
            this.shortcuts[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc5_ = null;
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            Logger.error("Forbidden value (" + this.barType + ") on element of ShortcutBarContentMessage.barType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUnsignedShort();
            _loc5_ = ProtocolTypeManager.getInstance(Shortcut, _loc4_);
            _loc5_.deserialize(buffer);
            this.shortcuts.push(_loc5_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ShortcutBarRefreshMessage extends ProtocolMessage {
    constructor(barType, shortcut) {
        super(6229);
        this.barType = barType;
        this.shortcut = shortcut;
    }
    serialize() {
        this.buffer.writeByte(this.barType);
        this.buffer.writeShort(this.shortcut.protocolId);
        this.shortcut.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            Logger.error("Forbidden value (" + this.barType + ") on element of ShortcutBarRefreshMessage.barType.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        this.shortcut = ProtocolTypeManager.getInstance(Shortcut, _loc2_);
        this.shortcut.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ShortcutBarRemovedMessage extends ProtocolMessage {
    constructor(barType, slot) {
        super(6224);
        this.barType = barType;
        this.slot = slot;
    }
    serialize() {
        this.buffer.writeByte(this.barType);
        if (this.slot < 0 || this.slot > 99) {
            Logger.error("Forbidden value (" + this.slot + ") on element slot.");
        }
        this.buffer.writeByte(this.slot);
    }
    deserialize(buffer) {
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            Logger.error("Forbidden value (" + this.barType + ") on element of ShortcutBarRemovedMessage.barType.");
        }
        this.slot = buffer.readByte();
        if (this.slot < 0 || this.slot > 99) {
            Logger.error("Forbidden value (" + this.slot + ") on element of ShortcutBarRemovedMessage.slot.");
        }
    }
}

// Generated by Noxus messages 
export class ShortcutBarRemoveErrorMessage extends ProtocolMessage {
    constructor(error) {
        super(6222);
        this.error = error;
    }
    serialize() {
        this.buffer.writeByte(this.error);
    }
    deserialize(buffer) {
        this.error = buffer.readByte();
        if (this.error < 0) {
            Logger.error("Forbidden value (" + this.error + ") on element of ShortcutBarRemoveErrorMessage.error.");
        }
    }
}

// Generated by Noxus messages 
export class ShortcutBarRemoveRequestMessage extends ProtocolMessage {
    constructor(barType, slot) {
        super(6228);
        this.barType = barType;
        this.slot = slot;
    }
    serialize() {
        this.buffer.writeByte(this.barType);
        if (this.slot < 0 || this.slot > 99) {
            Logger.error("Forbidden value (" + this.slot + ") on element slot.");
        }
        this.buffer.writeByte(this.slot);
    }
    deserialize(buffer) {
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            Logger.error("Forbidden value (" + this.barType + ") on element of ShortcutBarRemoveRequestMessage.barType.");
        }
        this.slot = buffer.readByte();
        if (this.slot < 0 || this.slot > 99) {
            Logger.error("Forbidden value (" + this.slot + ") on element of ShortcutBarRemoveRequestMessage.slot.");
        }
    }
}

// Generated by Noxus messages 
export class ShortcutBarSwapErrorMessage extends ProtocolMessage {
    constructor(error) {
        super(6226);
        this.error = error;
    }
    serialize() {
        this.buffer.writeByte(this.error);
    }
    deserialize(buffer) {
        this.error = buffer.readByte();
        if (this.error < 0) {
            Logger.error("Forbidden value (" + this.error + ") on element of ShortcutBarSwapErrorMessage.error.");
        }
    }
}

// Generated by Noxus messages 
export class ShortcutBarSwapRequestMessage extends ProtocolMessage {
    constructor(barType, firstSlot, secondSlot) {
        super(6230);
        this.barType = barType;
        this.firstSlot = firstSlot;
        this.secondSlot = secondSlot;
    }
    serialize() {
        this.buffer.writeByte(this.barType);
        if (this.firstSlot < 0 || this.firstSlot > 99) {
            Logger.error("Forbidden value (" + this.firstSlot + ") on element firstSlot.");
        }
        this.buffer.writeByte(this.firstSlot);
        if (this.secondSlot < 0 || this.secondSlot > 99) {
            Logger.error("Forbidden value (" + this.secondSlot + ") on element secondSlot.");
        }
        this.buffer.writeByte(this.secondSlot);
    }
    deserialize(buffer) {
        this.barType = buffer.readByte();
        if (this.barType < 0) {
            Logger.error("Forbidden value (" + this.barType + ") on element of ShortcutBarSwapRequestMessage.barType.");
        }
        this.firstSlot = buffer.readByte();
        if (this.firstSlot < 0 || this.firstSlot > 99) {
            Logger.error("Forbidden value (" + this.firstSlot + ") on element of ShortcutBarSwapRequestMessage.firstSlot.");
        }
        this.secondSlot = buffer.readByte();
        if (this.secondSlot < 0 || this.secondSlot > 99) {
            Logger.error("Forbidden value (" + this.secondSlot + ") on element of ShortcutBarSwapRequestMessage.secondSlot.");
        }
    }
}

// Generated by Noxus messages 
export class BulletinMessage extends SocialNoticeMessage {
    constructor(param1, param2, param3, param4, param5) {
        super(param1, param2, param3, param4);
        this.lastNotifiedTimestamp = param5;
        this.messageId = 6695;
    }
    serialize() {
        super.serialize();
        if (this.lastNotifiedTimestamp < 0) {
            Logger.error("Forbidden value (" + this.lastNotifiedTimestamp + ") on element lastNotifiedTimestamp.");
        }
        this.buffer.writeInt(this.lastNotifiedTimestamp);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.lastNotifiedTimestamp = buffer.readInt();
        if (this.lastNotifiedTimestamp < 0) {
            Logger.error("Forbidden value (" + this.lastNotifiedTimestamp + ") on element of BulletinMessage.lastNotifiedTimestamp.");
        }
    }
}

// Generated by Noxus messages 
export class ContactLookErrorMessage extends ProtocolMessage {
    constructor(requestId) {
        super(6045);
        this.requestId = requestId;
    }
    serialize() {
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeVarInt(this.requestId);
    }
    deserialize(buffer) {
        this.requestId = buffer.readVarUhInt();
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element of ContactLookErrorMessage.requestId.");
        }
    }
}

// Generated by Noxus messages 
export class ContactLookMessage extends ProtocolMessage {
    constructor(requestId, playerName, playerId, look) {
        super(5934);
        this.requestId = requestId;
        this.playerName = playerName;
        this.playerId = playerId;
        this.look = look;
    }
    serialize() {
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeVarInt(this.requestId);
        this.buffer.writeUTF(this.playerName);
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
        this.look.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.requestId = buffer.readVarUhInt();
        if (this.requestId < 0) {
            Logger.error("Forbidden value (" + this.requestId + ") on element of ContactLookMessage.requestId.");
        }
        this.playerName = buffer.readUTF();
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of ContactLookMessage.playerId.");
        }
        this.look = new EntityLook();
        this.look.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class ContactLookRequestByIdMessage extends ContactLookRequestMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.playerId = param3;
        this.messageId = 5935;
    }
    serialize() {
        super.serialize();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element playerId.");
        }
        this.buffer.writeVarLong(this.playerId);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerId = buffer.readVarUhLong();
        if (this.playerId < 0 || this.playerId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.playerId + ") on element of ContactLookRequestByIdMessage.playerId.");
        }
    }
}

// Generated by Noxus messages 
export class ContactLookRequestByNameMessage extends ContactLookRequestMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.playerName = param3;
        this.messageId = 5933;
    }
    serialize() {
        super.serialize();
        this.buffer.writeUTF(this.playerName);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.playerName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class ContactLookRequestMessage extends ProtocolMessage {
    constructor(requestId, contactType) {
        super(5932);
        this.requestId = requestId;
        this.contactType = contactType;
    }
    serialize() {
        if (this.requestId < 0 || this.requestId > 255) {
            Logger.error("Forbidden value (" + this.requestId + ") on element requestId.");
        }
        this.buffer.writeByte(this.requestId);
        this.buffer.writeByte(this.contactType);
    }
    deserialize(buffer) {
        this.requestId = buffer.readUnsignedByte();
        if (this.requestId < 0 || this.requestId > 255) {
            Logger.error("Forbidden value (" + this.requestId + ") on element of ContactLookRequestMessage.requestId.");
        }
        this.contactType = buffer.readByte();
        if (this.contactType < 0) {
            Logger.error("Forbidden value (" + this.contactType + ") on element of ContactLookRequestMessage.contactType.");
        }
    }
}

// Generated by Noxus messages 
export class SocialNoticeMessage extends ProtocolMessage {
    constructor(content, timestamp, memberId, memberName) {
        super(6688);
        this.content = content;
        this.timestamp = timestamp;
        this.memberId = memberId;
        this.memberName = memberName;
    }
    serialize() {
        this.buffer.writeUTF(this.content);
        if (this.timestamp < 0) {
            Logger.error("Forbidden value (" + this.timestamp + ") on element timestamp.");
        }
        this.buffer.writeInt(this.timestamp);
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element memberId.");
        }
        this.buffer.writeVarLong(this.memberId);
        this.buffer.writeUTF(this.memberName);
    }
    deserialize(buffer) {
        this.content = buffer.readUTF();
        this.timestamp = buffer.readInt();
        if (this.timestamp < 0) {
            Logger.error("Forbidden value (" + this.timestamp + ") on element of SocialNoticeMessage.timestamp.");
        }
        this.memberId = buffer.readVarUhLong();
        if (this.memberId < 0 || this.memberId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.memberId + ") on element of SocialNoticeMessage.memberId.");
        }
        this.memberName = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class SocialNoticeSetErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6684);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of SocialNoticeSetErrorMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class SocialNoticeSetRequestMessage extends ProtocolMessage {
constructor) {
    super(6686);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class StartupActionAddMessage extends ProtocolMessage {
    constructor(newAction) {
        super(6538);
        this.newAction = newAction;
    }
    serialize() {
        this.newAction.serialize(this.buffer);
    }
    deserialize(buffer) {
        this.newAction = new StartupActionAddObject();
        this.newAction.deserialize(buffer);
    }
}

// Generated by Noxus messages 
export class StartupActionFinishedMessage extends ProtocolMessage {
    constructor(success, actionId, automaticAction) {
        super(1304);
        this.success = success;
        this.actionId = actionId;
        this.automaticAction = automaticAction;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.success);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.automaticAction);
        this.buffer.writeByte(_loc2_);
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        this.buffer.writeInt(this.actionId);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.success = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.automaticAction = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
        this.actionId = buffer.readInt();
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element of StartupActionFinishedMessage.actionId.");
        }
    }
}

// Generated by Noxus messages 
export class StartupActionsAllAttributionMessage extends ProtocolMessage {
    constructor(characterId) {
        super(6537);
        this.characterId = characterId;
    }
    serialize() {
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
    }
    deserialize(buffer) {
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element of StartupActionsAllAttributionMessage.characterId.");
        }
    }
}

// Generated by Noxus messages 
export class StartupActionsExecuteMessage extends ProtocolMessage {
constructor) {
    super(1302);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class StartupActionsListMessage extends ProtocolMessage {
    constructor(actions) {
        super(1301);
        this.actions = actions;
    }
    serialize() {
        this.buffer.writeShort(this.actions.length);
        var _loc2_ = 0;
        while (_loc2_ < this.actions.length) {
            this.actions[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new StartupActionAddObject();
            _loc4_.deserialize(buffer);
            this.actions.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class StartupActionsObjetAttributionMessage extends ProtocolMessage {
    constructor(actionId, characterId) {
        super(1303);
        this.actionId = actionId;
        this.characterId = characterId;
    }
    serialize() {
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element actionId.");
        }
        this.buffer.writeInt(this.actionId);
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element characterId.");
        }
        this.buffer.writeVarLong(this.characterId);
    }
    deserialize(buffer) {
        this.actionId = buffer.readInt();
        if (this.actionId < 0) {
            Logger.error("Forbidden value (" + this.actionId + ") on element of StartupActionsObjetAttributionMessage.actionId.");
        }
        this.characterId = buffer.readVarUhLong();
        if (this.characterId < 0 || this.characterId > 9007199254740990) {
            Logger.error("Forbidden value (" + this.characterId + ") on element of StartupActionsObjetAttributionMessage.characterId.");
        }
    }
}

// Generated by Noxus messages 
export class SubscriptionLimitationMessage extends ProtocolMessage {
    constructor(reason) {
        super(5542);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of SubscriptionLimitationMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class SubscriptionZoneMessage extends ProtocolMessage {
    constructor(active) {
        super(5573);
        this.active = active;
    }
    serialize() {
        this.buffer.writeBoolean(this.active);
    }
    deserialize(buffer) {
        this.active = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class OrnamentGainedMessage extends ProtocolMessage {
    constructor(ornamentId) {
        super(6368);
        this.ornamentId = ornamentId;
    }
    serialize() {
        if (this.ornamentId < 0) {
            Logger.error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
        }
        this.buffer.writeShort(this.ornamentId);
    }
    deserialize(buffer) {
        this.ornamentId = buffer.readShort();
        if (this.ornamentId < 0) {
            Logger.error("Forbidden value (" + this.ornamentId + ") on element of OrnamentGainedMessage.ornamentId.");
        }
    }
}

// Generated by Noxus messages 
export class OrnamentSelectedMessage extends ProtocolMessage {
    constructor(ornamentId) {
        super(6369);
        this.ornamentId = ornamentId;
    }
    serialize() {
        if (this.ornamentId < 0) {
            Logger.error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
        }
        this.buffer.writeVarShort(this.ornamentId);
    }
    deserialize(buffer) {
        this.ornamentId = buffer.readVarUhShort();
        if (this.ornamentId < 0) {
            Logger.error("Forbidden value (" + this.ornamentId + ") on element of OrnamentSelectedMessage.ornamentId.");
        }
    }
}

// Generated by Noxus messages 
export class OrnamentSelectErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6370);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of OrnamentSelectErrorMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class OrnamentSelectRequestMessage extends ProtocolMessage {
    constructor(ornamentId) {
        super(6374);
        this.ornamentId = ornamentId;
    }
    serialize() {
        if (this.ornamentId < 0) {
            Logger.error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
        }
        this.buffer.writeVarShort(this.ornamentId);
    }
    deserialize(buffer) {
        this.ornamentId = buffer.readVarUhShort();
        if (this.ornamentId < 0) {
            Logger.error("Forbidden value (" + this.ornamentId + ") on element of OrnamentSelectRequestMessage.ornamentId.");
        }
    }
}

// Generated by Noxus messages 
export class TitleGainedMessage extends ProtocolMessage {
    constructor(titleId) {
        super(6364);
        this.titleId = titleId;
    }
    serialize() {
        if (this.titleId < 0) {
            Logger.error("Forbidden value (" + this.titleId + ") on element titleId.");
        }
        this.buffer.writeVarShort(this.titleId);
    }
    deserialize(buffer) {
        this.titleId = buffer.readVarUhShort();
        if (this.titleId < 0) {
            Logger.error("Forbidden value (" + this.titleId + ") on element of TitleGainedMessage.titleId.");
        }
    }
}

// Generated by Noxus messages 
export class TitleLostMessage extends ProtocolMessage {
    constructor(titleId) {
        super(6371);
        this.titleId = titleId;
    }
    serialize() {
        if (this.titleId < 0) {
            Logger.error("Forbidden value (" + this.titleId + ") on element titleId.");
        }
        this.buffer.writeVarShort(this.titleId);
    }
    deserialize(buffer) {
        this.titleId = buffer.readVarUhShort();
        if (this.titleId < 0) {
            Logger.error("Forbidden value (" + this.titleId + ") on element of TitleLostMessage.titleId.");
        }
    }
}

// Generated by Noxus messages 
export class TitlesAndOrnamentsListMessage extends ProtocolMessage {
    constructor(titles, ornaments, activeTitle, activeOrnament) {
        super(6367);
        this.titles = titles;
        this.ornaments = ornaments;
        this.activeTitle = activeTitle;
        this.activeOrnament = activeOrnament;
    }
    serialize() {
        this.buffer.writeShort(this.titles.length);
        var _loc2_ = 0;
        while (_loc2_ < this.titles.length) {
            if (this.titles[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.titles[_loc2_] + ") on element 1 (starting at 1) of titles.");
            }
            this.buffer.writeVarShort(this.titles[_loc2_]);
            _loc2_++;
        }
        this.buffer.writeShort(this.ornaments.length);
        var _loc3_ = 0;
        while (_loc3_ < this.ornaments.length) {
            if (this.ornaments[_loc3_] < 0) {
                Logger.error("Forbidden value (" + this.ornaments[_loc3_] + ") on element 2 (starting at 1) of ornaments.");
            }
            this.buffer.writeVarShort(this.ornaments[_loc3_]);
            _loc3_++;
        }
        if (this.activeTitle < 0) {
            Logger.error("Forbidden value (" + this.activeTitle + ") on element activeTitle.");
        }
        this.buffer.writeVarShort(this.activeTitle);
        if (this.activeOrnament < 0) {
            Logger.error("Forbidden value (" + this.activeOrnament + ") on element activeOrnament.");
        }
        this.buffer.writeVarShort(this.activeOrnament);
    }
    deserialize(buffer) {
        var _loc6_ = 0;
        var _loc7_ = 0;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc6_ = buffer.readVarUhShort();
            if (_loc6_ < 0) {
                Logger.error("Forbidden value (" + _loc6_ + ") on elements of titles.");
            }
            this.titles.push(_loc6_);
            _loc3_++;
        }
        var _loc4_ = buffer.readUnsignedShort();
        var _loc5_ = 0;
        while (_loc5_ < _loc4_) {
            _loc7_ = buffer.readVarUhShort();
            if (_loc7_ < 0) {
                Logger.error("Forbidden value (" + _loc7_ + ") on elements of ornaments.");
            }
            this.ornaments.push(_loc7_);
            _loc5_++;
        }
        this.activeTitle = buffer.readVarUhShort();
        if (this.activeTitle < 0) {
            Logger.error("Forbidden value (" + this.activeTitle + ") on element of TitlesAndOrnamentsListMessage.activeTitle.");
        }
        this.activeOrnament = buffer.readVarUhShort();
        if (this.activeOrnament < 0) {
            Logger.error("Forbidden value (" + this.activeOrnament + ") on element of TitlesAndOrnamentsListMessage.activeOrnament.");
        }
    }
}

// Generated by Noxus messages 
export class TitlesAndOrnamentsListRequestMessage extends ProtocolMessage {
constructor) {
    super(6363);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class TitleSelectedMessage extends ProtocolMessage {
    constructor(titleId) {
        super(6366);
        this.titleId = titleId;
    }
    serialize() {
        if (this.titleId < 0) {
            Logger.error("Forbidden value (" + this.titleId + ") on element titleId.");
        }
        this.buffer.writeVarShort(this.titleId);
    }
    deserialize(buffer) {
        this.titleId = buffer.readVarUhShort();
        if (this.titleId < 0) {
            Logger.error("Forbidden value (" + this.titleId + ") on element of TitleSelectedMessage.titleId.");
        }
    }
}

// Generated by Noxus messages 
export class TitleSelectErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6373);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of TitleSelectErrorMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class TitleSelectRequestMessage extends ProtocolMessage {
    constructor(titleId) {
        super(6365);
        this.titleId = titleId;
    }
    serialize() {
        if (this.titleId < 0) {
            Logger.error("Forbidden value (" + this.titleId + ") on element titleId.");
        }
        this.buffer.writeVarShort(this.titleId);
    }
    deserialize(buffer) {
        this.titleId = buffer.readVarUhShort();
        if (this.titleId < 0) {
            Logger.error("Forbidden value (" + this.titleId + ") on element of TitleSelectRequestMessage.titleId.");
        }
    }
}

// Generated by Noxus messages 
export class ClientUIOpenedByObjectMessage extends ClientUIOpenedMessage {
    constructor(param1, param2) {
        super(param1);
        this.uid = param2;
        this.messageId = 6463;
    }
    serialize() {
        super.serialize();
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element uid.");
        }
        this.buffer.writeVarInt(this.uid);
    }
    deserialize(buffer) {
        super.deserialize(buffer);
        this.uid = buffer.readVarUhInt();
        if (this.uid < 0) {
            Logger.error("Forbidden value (" + this.uid + ") on element of ClientUIOpenedByObjectMessage.uid.");
        }
    }
}

// Generated by Noxus messages 
export class ClientUIOpenedMessage extends ProtocolMessage {
    constructor(type) {
        super(6459);
        this.type = type;
    }
    serialize() {
        this.buffer.writeByte(this.type);
    }
    deserialize(buffer) {
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of ClientUIOpenedMessage.type.");
        }
    }
}

// Generated by Noxus messages 
export class ProtocolRequired extends ProtocolMessage {
    constructor(requiredVersion, currentVersion) {
        super(1);
        this.requiredVersion = requiredVersion;
        this.currentVersion = currentVersion;
    }
    serialize() {
        if (this.requiredVersion < 0) {
            Logger.error("Forbidden value (" + this.requiredVersion + ") on element requiredVersion.");
        }
        this.buffer.writeInt(this.requiredVersion);
        if (this.currentVersion < 0) {
            Logger.error("Forbidden value (" + this.currentVersion + ") on element currentVersion.");
        }
        this.buffer.writeInt(this.currentVersion);
    }
    deserialize(buffer) {
        this.requiredVersion = buffer.readInt();
        if (this.requiredVersion < 0) {
            Logger.error("Forbidden value (" + this.requiredVersion + ") on element of ProtocolRequired.requiredVersion.");
        }
        this.currentVersion = buffer.readInt();
        if (this.currentVersion < 0) {
            Logger.error("Forbidden value (" + this.currentVersion + ") on element of ProtocolRequired.currentVersion.");
        }
    }
}

// Generated by Noxus messages 
export class LoginQueueStatusMessage extends ProtocolMessage {
    constructor(position, total) {
        super(10);
        this.position = position;
        this.total = total;
    }
    serialize() {
        if (this.position < 0 || this.position > 65535) {
            Logger.error("Forbidden value (" + this.position + ") on element position.");
        }
        this.buffer.writeShort(this.position);
        if (this.total < 0 || this.total > 65535) {
            Logger.error("Forbidden value (" + this.total + ") on element total.");
        }
        this.buffer.writeShort(this.total);
    }
    deserialize(buffer) {
        this.position = buffer.readUnsignedShort();
        if (this.position < 0 || this.position > 65535) {
            Logger.error("Forbidden value (" + this.position + ") on element of LoginQueueStatusMessage.position.");
        }
        this.total = buffer.readUnsignedShort();
        if (this.total < 0 || this.total > 65535) {
            Logger.error("Forbidden value (" + this.total + ") on element of LoginQueueStatusMessage.total.");
        }
    }
}

// Generated by Noxus messages 
export class QueueStatusMessage extends ProtocolMessage {
    constructor(position, total) {
        super(6100);
        this.position = position;
        this.total = total;
    }
    serialize() {
        if (this.position < 0 || this.position > 65535) {
            Logger.error("Forbidden value (" + this.position + ") on element position.");
        }
        this.buffer.writeShort(this.position);
        if (this.total < 0 || this.total > 65535) {
            Logger.error("Forbidden value (" + this.total + ") on element total.");
        }
        this.buffer.writeShort(this.total);
    }
    deserialize(buffer) {
        this.position = buffer.readUnsignedShort();
        if (this.position < 0 || this.position > 65535) {
            Logger.error("Forbidden value (" + this.position + ") on element of QueueStatusMessage.position.");
        }
        this.total = buffer.readUnsignedShort();
        if (this.total < 0 || this.total > 65535) {
            Logger.error("Forbidden value (" + this.total + ") on element of QueueStatusMessage.total.");
        }
    }
}

// Generated by Noxus messages 
export class TrustStatusMessage extends ProtocolMessage {
    constructor(trusted, certified) {
        super(6267);
        this.trusted = trusted;
        this.certified = certified;
    }
    serialize() {
        var _loc2_ = 0;
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 0, this.trusted);
        _loc2_ = IO.BooleanByteWrapper.setFlag(_loc2_, 1, this.certified);
        this.buffer.writeByte(_loc2_);
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readByte();
        this.trusted = IO.BooleanByteWrapper.getFlag(_loc2_, 0);
        this.certified = IO.BooleanByteWrapper.getFlag(_loc2_, 1);
    }
}

// Generated by Noxus messages 
export class CheckFileMessage extends ProtocolMessage {
    constructor(filenameHash, type, value) {
        super(6156);
        this.filenameHash = filenameHash;
        this.type = type;
        this.value = value;
    }
    serialize() {
        this.buffer.writeUTF(this.filenameHash);
        this.buffer.writeByte(this.type);
        this.buffer.writeUTF(this.value);
    }
    deserialize(buffer) {
        this.filenameHash = buffer.readUTF();
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of CheckFileMessage.type.");
        }
        this.value = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class CheckFileRequestMessage extends ProtocolMessage {
    constructor(filename, type) {
        super(6154);
        this.filename = filename;
        this.type = type;
    }
    serialize() {
        this.buffer.writeUTF(this.filename);
        this.buffer.writeByte(this.type);
    }
    deserialize(buffer) {
        this.filename = buffer.readUTF();
        this.type = buffer.readByte();
        if (this.type < 0) {
            Logger.error("Forbidden value (" + this.type + ") on element of CheckFileRequestMessage.type.");
        }
    }
}

// Generated by Noxus messages 
export class CheckIntegrityMessage extends ProtocolMessage {
    constructor(data) {
        super(6372);
        this.data = data;
    }
    serialize() {
        this.buffer.writeVarInt(this.data.length);
        var _loc2_ = 0;
        while (_loc2_ < this.data.length) {
            this.buffer.writeByte(this.data[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        var _loc2_ = buffer.readVarInt();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readByte();
            this.data.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class ClientKeyMessage extends ProtocolMessage {
    constructor(key) {
        super(5607);
        this.key = key;
    }
    serialize() {
        this.buffer.writeUTF(this.key);
    }
    deserialize(buffer) {
        this.key = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class RawDataMessage extends ProtocolMessage {
    constructor(content) {
        super(6253);
        this.content = content;
    }
    serialize() {
        this.buffer.writeVarInt(this.content.length);
        var _loc2_ = 0;
        while (_loc2_ < this.content.length) {
            this.buffer.writeByte(this.content[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc2_ = buffer.readVarInt();
        buffer.readBytes(this.content, 0, _loc2_);
    }
}

// Generated by Noxus messages 
export class SystemMessageDisplayMessage extends ProtocolMessage {
    constructor(hangUp, msgId, parameters) {
        super(189);
        this.hangUp = hangUp;
        this.msgId = msgId;
        this.parameters = parameters;
    }
    serialize() {
        this.buffer.writeBoolean(this.hangUp);
        if (this.msgId < 0) {
            Logger.error("Forbidden value (" + this.msgId + ") on element msgId.");
        }
        this.buffer.writeVarShort(this.msgId);
        this.buffer.writeShort(this.parameters.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parameters.length) {
            this.buffer.writeUTF(this.parameters[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        this.hangUp = buffer.readBoolean();
        this.msgId = buffer.readVarUhShort();
        if (this.msgId < 0) {
            Logger.error("Forbidden value (" + this.msgId + ") on element of SystemMessageDisplayMessage.msgId.");
        }
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readUTF();
            this.parameters.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class SubscriptionUpdateMessage extends ProtocolMessage {
    constructor(timestamp) {
        super(6616);
        this.timestamp = timestamp;
    }
    serialize() {
        if (this.timestamp < -9007199254740990 || this.timestamp > 9007199254740990) {
            Logger.error("Forbidden value (" + this.timestamp + ") on element timestamp.");
        }
        this.buffer.writeDouble(this.timestamp);
    }
    deserialize(buffer) {
        this.timestamp = buffer.readDouble();
        if (this.timestamp < -9007199254740990 || this.timestamp > 9007199254740990) {
            Logger.error("Forbidden value (" + this.timestamp + ") on element of SubscriptionUpdateMessage.timestamp.");
        }
    }
}

// Generated by Noxus messages 
export class DownloadCurrentSpeedMessage extends ProtocolMessage {
    constructor(downloadSpeed) {
        super(1511);
        this.downloadSpeed = downloadSpeed;
    }
    serialize() {
        if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
            Logger.error("Forbidden value (" + this.downloadSpeed + ") on element downloadSpeed.");
        }
        this.buffer.writeByte(this.downloadSpeed);
    }
    deserialize(buffer) {
        this.downloadSpeed = buffer.readByte();
        if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
            Logger.error("Forbidden value (" + this.downloadSpeed + ") on element of DownloadCurrentSpeedMessage.downloadSpeed.");
        }
    }
}

// Generated by Noxus messages 
export class DownloadErrorMessage extends ProtocolMessage {
    constructor(errorId, message, helpUrl) {
        super(1513);
        this.errorId = errorId;
        this.message = message;
        this.helpUrl = helpUrl;
    }
    serialize() {
        this.buffer.writeByte(this.errorId);
        this.buffer.writeUTF(this.message);
        this.buffer.writeUTF(this.helpUrl);
    }
    deserialize(buffer) {
        this.errorId = buffer.readByte();
        if (this.errorId < 0) {
            Logger.error("Forbidden value (" + this.errorId + ") on element of DownloadErrorMessage.errorId.");
        }
        this.message = buffer.readUTF();
        this.helpUrl = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class DownloadGetCurrentSpeedRequestMessage extends ProtocolMessage {
constructor) {
    super(1510);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class DownloadPartMessage extends ProtocolMessage {
    constructor(id) {
        super(1503);
        this.id = id;
    }
    serialize() {
        this.buffer.writeUTF(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class DownloadSetSpeedRequestMessage extends ProtocolMessage {
    constructor(downloadSpeed) {
        super(1512);
        this.downloadSpeed = downloadSpeed;
    }
    serialize() {
        if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
            Logger.error("Forbidden value (" + this.downloadSpeed + ") on element downloadSpeed.");
        }
        this.buffer.writeByte(this.downloadSpeed);
    }
    deserialize(buffer) {
        this.downloadSpeed = buffer.readByte();
        if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
            Logger.error("Forbidden value (" + this.downloadSpeed + ") on element of DownloadSetSpeedRequestMessage.downloadSpeed.");
        }
    }
}

// Generated by Noxus messages 
export class GetPartInfoMessage extends ProtocolMessage {
    constructor(id) {
        super(1506);
        this.id = id;
    }
    serialize() {
        this.buffer.writeUTF(this.id);
    }
    deserialize(buffer) {
        this.id = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class GetPartsListMessage extends ProtocolMessage {
constructor) {
    super(1501);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class PartInfoMessage extends ProtocolMessage {
    constructor(part, installationPercent) {
        super(1508);
        this.part = part;
        this.installationPercent = installationPercent;
    }
    serialize() {
        this.part.serialize(this.buffer);
        this.buffer.writeFloat(this.installationPercent);
    }
    deserialize(buffer) {
        this.part = new ContentPart();
        this.part.deserialize(buffer);
        this.installationPercent = buffer.readFloat();
    }
}

// Generated by Noxus messages 
export class PartsListMessage extends ProtocolMessage {
    constructor(parts) {
        super(1502);
        this.parts = parts;
    }
    serialize() {
        this.buffer.writeShort(this.parts.length);
        var _loc2_ = 0;
        while (_loc2_ < this.parts.length) {
            this.parts[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new ContentPart();
            _loc4_.deserialize(buffer);
            this.parts.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class MailStatusMessage extends ProtocolMessage {
    constructor(unread, total) {
        super(6275);
        this.unread = unread;
        this.total = total;
    }
    serialize() {
        if (this.unread < 0) {
            Logger.error("Forbidden value (" + this.unread + ") on element unread.");
        }
        this.buffer.writeVarShort(this.unread);
        if (this.total < 0) {
            Logger.error("Forbidden value (" + this.total + ") on element total.");
        }
        this.buffer.writeVarShort(this.total);
    }
    deserialize(buffer) {
        this.unread = buffer.readVarUhShort();
        if (this.unread < 0) {
            Logger.error("Forbidden value (" + this.unread + ") on element of MailStatusMessage.unread.");
        }
        this.total = buffer.readVarUhShort();
        if (this.total < 0) {
            Logger.error("Forbidden value (" + this.total + ") on element of MailStatusMessage.total.");
        }
    }
}

// Generated by Noxus messages 
export class NewMailMessage extends MailStatusMessage {
    constructor(param1, param2, param3) {
        super(param1, param2);
        this.sendersAccountId = param3;
        this.messageId = 6292;
    }
    serialize() {
        super.serialize();
        this.buffer.writeShort(this.sendersAccountId.length);
        var _loc2_ = 0;
        while (_loc2_ < this.sendersAccountId.length) {
            if (this.sendersAccountId[_loc2_] < 0) {
                Logger.error("Forbidden value (" + this.sendersAccountId[_loc2_] + ") on element 1 (starting at 1) of sendersAccountId.");
            }
            this.buffer.writeInt(this.sendersAccountId[_loc2_]);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = 0;
        super.deserialize(buffer);
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = buffer.readInt();
            if (_loc4_ < 0) {
                Logger.error("Forbidden value (" + _loc4_ + ") on elements of sendersAccountId.");
            }
            this.sendersAccountId.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class HaapiApiKeyMessage extends ProtocolMessage {
    constructor(returnType, keyType, token) {
        super(6649);
        this.returnType = returnType;
        this.keyType = keyType;
        this.token = token;
    }
    serialize() {
        this.buffer.writeByte(this.returnType);
        this.buffer.writeByte(this.keyType);
        this.buffer.writeUTF(this.token);
    }
    deserialize(buffer) {
        this.returnType = buffer.readByte();
        if (this.returnType < 0) {
            Logger.error("Forbidden value (" + this.returnType + ") on element of HaapiApiKeyMessage.returnType.");
        }
        this.keyType = buffer.readByte();
        if (this.keyType < 0) {
            Logger.error("Forbidden value (" + this.keyType + ") on element of HaapiApiKeyMessage.keyType.");
        }
        this.token = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class HaapiApiKeyRequestMessage extends ProtocolMessage {
    constructor(keyType) {
        super(6648);
        this.keyType = keyType;
    }
    serialize() {
        this.buffer.writeByte(this.keyType);
    }
    deserialize(buffer) {
        this.keyType = buffer.readByte();
        if (this.keyType < 0) {
            Logger.error("Forbidden value (" + this.keyType + ") on element of HaapiApiKeyRequestMessage.keyType.");
        }
    }
}

// Generated by Noxus messages 
export class KrosmasterAuthTokenErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6345);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of KrosmasterAuthTokenErrorMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class KrosmasterAuthTokenMessage extends ProtocolMessage {
    constructor(token) {
        super(6351);
        this.token = token;
    }
    serialize() {
        this.buffer.writeUTF(this.token);
    }
    deserialize(buffer) {
        this.token = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class KrosmasterAuthTokenRequestMessage extends ProtocolMessage {
constructor) {
    super(6346);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class KrosmasterInventoryErrorMessage extends ProtocolMessage {
    constructor(reason) {
        super(6343);
        this.reason = reason;
    }
    serialize() {
        this.buffer.writeByte(this.reason);
    }
    deserialize(buffer) {
        this.reason = buffer.readByte();
        if (this.reason < 0) {
            Logger.error("Forbidden value (" + this.reason + ") on element of KrosmasterInventoryErrorMessage.reason.");
        }
    }
}

// Generated by Noxus messages 
export class KrosmasterInventoryMessage extends ProtocolMessage {
    constructor(figures) {
        super(6350);
        this.figures = figures;
    }
    serialize() {
        this.buffer.writeShort(this.figures.length);
        var _loc2_ = 0;
        while (_loc2_ < this.figures.length) {
            this.figures[_loc2_].serialize(this.buffer);
            _loc2_++;
        }
    }
    deserialize(buffer) {
        var _loc4_ = null;
        var _loc2_ = buffer.readUnsignedShort();
        var _loc3_ = 0;
        while (_loc3_ < _loc2_) {
            _loc4_ = new KrosmasterFigure();
            _loc4_.deserialize(buffer);
            this.figures.push(_loc4_);
            _loc3_++;
        }
    }
}

// Generated by Noxus messages 
export class KrosmasterInventoryRequestMessage extends ProtocolMessage {
constructor) {
    super(6344);
}
serialize(){
}
deserialize(buffer){
}
}

// Generated by Noxus messages 
export class KrosmasterPlayingStatusMessage extends ProtocolMessage {
    constructor(playing) {
        super(6347);
        this.playing = playing;
    }
    serialize() {
        this.buffer.writeBoolean(this.playing);
    }
    deserialize(buffer) {
        this.playing = buffer.readBoolean();
    }
}

// Generated by Noxus messages 
export class KrosmasterTransferMessage extends ProtocolMessage {
    constructor(uid, failure) {
        super(6348);
        this.uid = uid;
        this.failure = failure;
    }
    serialize() {
        this.buffer.writeUTF(this.uid);
        this.buffer.writeByte(this.failure);
    }
    deserialize(buffer) {
        this.uid = buffer.readUTF();
        this.failure = buffer.readByte();
        if (this.failure < 0) {
            Logger.error("Forbidden value (" + this.failure + ") on element of KrosmasterTransferMessage.failure.");
        }
    }
}

// Generated by Noxus messages 
export class KrosmasterTransferRequestMessage extends ProtocolMessage {
    constructor(uid) {
        super(6349);
        this.uid = uid;
    }
    serialize() {
        this.buffer.writeUTF(this.uid);
    }
    deserialize(buffer) {
        this.uid = buffer.readUTF();
    }
}

// Generated by Noxus messages 
export class ClientYouAreDrunkMessage extends DebugInClientMessage {
    constructor(param1, param2) {
        super(param1, param2);
        this.messageId = 6594;
    }
    serialize() {
        super.serialize();
    }
    deserialize(buffer) {
        super.deserialize(buffer);
    }
}

